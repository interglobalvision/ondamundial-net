{"version":3,"sources":["lazysizes.js","three.js","CanvasRenderer.js","Projector.js"],"names":["window","factory","lazySizes","document","getElementsByClassName","lazySizesConfig","docElem","documentElement","Date","supportPicture","HTMLPictureElement","addEventListener","setTimeout","requestAnimationFrame","requestIdleCallback","regPicture","loadEvents","regClassCache","forEach","Array","prototype","hasClass","ele","cls","RegExp","test","addClass","setAttribute","trim","removeClass","reg","replace","addRemoveLoadEvents","dom","fn","add","action","evt","triggerEvent","elem","name","detail","noBubbles","noCancelable","event","createEvent","initCustomEvent","dispatchEvent","updatePolyfill","el","full","polyfill","picturefill","pf","reevaluate","elements","src","getCSS","style","getComputedStyle","getWidth","parent","width","offsetWidth","minSize","_lazysizesWidth","parentNode","rAF","running","waiting","fns","run","length","shift","apply","rafBatch","this","arguments","push","hidden","_lsFlush","rAFIt","simple","that","args","throttle","lastTime","rICTimeout","now","idleCallback","timeout","isPriority","delay","debounce","func","timestamp","later","last","loader","lazyloadElems","preloadElems","isCompleted","resetPreloadingTimer","loadMode","started","eLvW","elvH","eLtop","eLleft","eLright","eLbottom","defaultExpand","preloadExpand","hFac","regImg","regIframe","supportScroll","navigator","userAgent","currentExpand","isLoading","lowRuns","resetPreloading","e","target","isNestedVisible","elemExpand","outerRect","visible","body","offsetParent","getBoundingClientRect","left","right","top","bottom","checkElements","eLlen","i","rect","autoLoadElem","loadedSomething","elemNegativeExpand","elemExpandVal","beforeExpandVal","expand","clientHeight","clientWidth","expFactor","_lazyRace","innerWidth","innerHeight","unveilElement","preloadAfterLoad","sizesAttr","throttledCheckElements","switchLoadingClass","loadedClass","loadingClass","rafSwitchLoadingClass","rafedSwitchLoadingClass","changeIframeSrc","contentWindow","location","handleSources","source","customMedia","sourceSrcset","srcsetAttr","insertBefore","cloneNode","removeChild","lazyUnveil","isAuto","sizes","isImg","srcset","isPicture","firesLoad","defaultPrevented","autosizesClass","srcAttr","nodeName","clearTimeout","call","getElementsByTagName","lazyClass","complete","errorClass","autoSizer","updateElem","onload","afterScroll","_","preloadClass","MutationObserver","observe","childList","subtree","attributes","setInterval","readyState","checkElems","unveil","autosizesElems","sizeElement","sources","len","dataAttr","getSizeElement","updateElementsSizes","debouncedUpdateElementsSizes","init","prop","lazySizesDefaults","lazysizesConfig","cfg","uP","aC","rC","hC","fire","gW","module","exports","global","define","amd","THREE","EventDispatcher","Vector2","x","y","Texture","image","mapping","wrapS","wrapT","magFilter","minFilter","format","type","anisotropy","encoding","Object","defineProperty","value","textureId","uuid","_Math","generateUUID","undefined","DEFAULT_IMAGE","mipmaps","DEFAULT_MAPPING","ClampToEdgeWrapping","LinearFilter","LinearMipMapLinearFilter","RGBAFormat","UnsignedByteType","offset","repeat","generateMipmaps","premultiplyAlpha","flipY","unpackAlignment","LinearEncoding","version","onUpdate","Vector4","z","w","WebGLRenderTarget","height","options","scissor","scissorTest","viewport","texture","depthBuffer","stencilBuffer","depthTexture","WebGLRenderTargetCube","activeCubeFace","activeMipMapLevel","Quaternion","_x","_y","_z","_w","Vector3","Matrix4","console","error","DataTexture","data","NearestFilter","CubeTexture","images","CubeReflectionMapping","UniformContainer","seq","map","flatten","array","nBlocks","blockSize","firstElem","n","r","arrayCacheF32","Float32Array","toArray","allocTexUnits","renderer","arrayCacheI32","Int32Array","allocTextureUnit","setValue1f","gl","v","uniform1f","addr","setValue1i","uniform1i","setValue2fv","uniform2fv","uniform2f","setValue3fv","uniform3f","g","b","uniform3fv","setValue4fv","uniform4fv","uniform4f","setValue2fm","uniformMatrix2fv","setValue3fm","uniformMatrix3fv","mat3array","set","setValue4fm","uniformMatrix4fv","mat4array","setValueT1","unit","setTexture2D","emptyTexture","setValueT6","setTextureCube","emptyCubeTexture","setValue2iv","uniform2iv","setValue3iv","uniform3iv","setValue4iv","uniform4iv","getSingularSetter","setValue1fv","uniform1fv","setValue1iv","uniform1iv","setValueV2a","size","setValueV3a","setValueV4a","setValueM2a","setValueM3a","setValueM4a","setValueT1a","units","setValueT6a","getPureArraySetter","SingleUniform","id","activeInfo","setValue","PureArrayUniform","StructuredUniform","addUniform","container","uniformObject","parseUniform","path","pathLength","RePathPart","lastIndex","match","exec","matchEnd","idIsIndex","subscript","next","WebGLUniforms","program","getProgramParameter","ACTIVE_UNIFORMS","info","getActiveUniform","getUniformLocation","Color","setRGB","Box2","min","max","Infinity","LensFlarePlugin","flares","vertices","faces","Uint16Array","vertexBuffer","createBuffer","elementBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","ELEMENT_ARRAY_BUFFER","tempTexture","createTexture","occlusionTexture","state","bindTexture","TEXTURE_2D","texImage2D","RGB","UNSIGNED_BYTE","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","RGBA","shader","vertexShader","join","fragmentShader","createProgram","vertex","getAttribLocation","uv","uniforms","renderType","occlusionMap","opacity","color","scale","rotation","screenPosition","createShader","FRAGMENT_SHADER","VERTEX_SHADER","prefix","getPrecision","shaderSource","compileShader","attachShader","linkProgram","context","render","scene","camera","tempPosition","invAspect","halfViewportWidth","halfViewportHeight","screenPositionPixels","validArea","useProgram","initAttributes","enableAttribute","disableUnusedAttributes","vertexAttribPointer","FLOAT","disable","CULL_FACE","buffers","depth","setMask","l","flare","matrixWorld","applyMatrix4","matrixWorldInverse","projectionMatrix","copy","containsPoint","activeTexture","TEXTURE0","TEXTURE1","copyTexImage2D","BLEND","enable","DEPTH_TEST","drawElements","TRIANGLES","UNSIGNED_SHORT","positionScreen","customUpdateCallback","updateLensFlares","j","jl","lensFlares","sprite","setBlending","blending","blendEquation","blendSrc","blendDst","resetGLState","SpritePlugin","sprites","position","uvOffset","uvScale","modelViewMatrix","fogType","fogDensity","fogNear","fogFar","fogColor","alphaTest","canvas","createElementNS","getContext","fillStyle","fillRect","needsUpdate","painterSortStable","a","renderOrder","spritePosition","spriteRotation","spriteScale","oldFogType","sceneFogType","fog","isFog","near","far","isFogExp2","density","multiplyMatrices","sort","material","onBeforeRender","decompose","blendEquationAlpha","blendSrcAlpha","blendDstAlpha","premultipliedAlpha","setTest","depthTest","depthWrite","onAfterRender","Material","materialId","lights","NormalBlending","side","FrontSide","shading","SmoothShading","vertexColors","NoColors","transparent","SrcAlphaFactor","OneMinusSrcAlphaFactor","AddEquation","depthFunc","LessEqualDepth","clippingPlanes","clipIntersection","clipShadows","colorWrite","precision","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","dithering","overdraw","ShaderMaterial","parameters","defines","linewidth","wireframe","wireframeLinewidth","clipping","skinning","morphTargets","morphNormals","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","uv2","index0AttributeName","setValues","MeshDepthMaterial","depthPacking","BasicDepthPacking","alphaMap","displacementMap","displacementScale","displacementBias","Box3","Sphere","center","radius","Matrix3","Plane","normal","constant","Frustum","p0","p1","p2","p3","p4","p5","planes","WebGLShadowMap","_renderer","_lights","_objects","capabilities","getDepthMaterial","object","isPointLight","lightPositionWorld","geometry","result","materialVariants","_depthMaterials","customMaterial","customDepthMaterial","_distanceMaterials","customDistanceMaterial","useMorphing","isBufferGeometry","morphAttributes","isGeometry","isSkinnedMesh","warn","useSkinning","variantIndex","_MorphingFlag","_SkinningFlag","localClippingEnabled","keyA","keyB","materialsForVariant","_materialCache","cachedMaterial","clone","scope","renderSingleSided","DoubleSide","renderReverseSided","BackSide","lightPos","renderObject","shadowCamera","layers","isMesh","isLine","isPoints","castShadow","frustumCulled","_frustum","intersectsObject","update","isArray","groups","k","kl","group","groupMaterial","materialIndex","depthMaterial","_lightPositionWorld","renderBufferDirect","children","_gl","_state","_projScreenMatrix","_lightShadows","shadows","_shadowMapSize","_maxShadowMapSize","maxTextureSize","_lookTarget","_NumberOfMaterialVariants","cubeDirections","cubeUps","cube2DViewPorts","depthMaterialTemplate","RGBADepthPacking","distanceShader","ShaderLib","distanceUniforms","UniformsUtils","distanceMaterial","USE_SHADOWMAP","enabled","autoUpdate","PCFShadowMap","setClear","setScissorTest","faceCount","il","light","shadow","mapSize","vpWidth","vpHeight","pars","updateProjectionMatrix","isSpotLightShadow","shadowMap","shadowMatrix","matrix","setFromMatrixPosition","makeTranslation","lookAt","updateMatrixWorld","multiply","setRenderTarget","clear","face","up","vpDimensions","setFromMatrix","clearColor","getClearColor","clearAlpha","getClearAlpha","setClearColor","WebGLAttributes","attribute","bufferType","usage","dynamic","DYNAMIC_DRAW","buffer","onUploadCallback","Float64Array","Int16Array","SHORT","Uint32Array","UNSIGNED_INT","INT","Int8Array","BYTE","Uint8Array","bytesPerElement","BYTES_PER_ELEMENT","updateBuffer","updateRange","count","bufferSubData","subarray","get","isInterleavedBufferAttribute","remove","deleteBuffer","Euler","order","_order","DefaultOrder","Layers","mask","Object3D","onRotationChange","quaternion","setFromEuler","onQuaternionChange","setFromQuaternion","object3DId","DefaultUp","onChange","defineProperties","enumerable","normalMatrix","matrixAutoUpdate","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","receiveShadow","userData","Camera","OrthographicCamera","zoom","view","PerspectiveCamera","fov","aspect","focus","filmGauge","filmOffset","Face3","c","isVector3","vertexNormals","isColor","GeometryIdCount","Geometry","colors","faceVertexUvs","skinWeights","skinIndices","lineDistances","boundingBox","boundingSphere","elementsNeedUpdate","verticesNeedUpdate","uvsNeedUpdate","normalsNeedUpdate","colorsNeedUpdate","lineDistancesNeedUpdate","groupsNeedUpdate","BufferAttribute","itemSize","normalized","TypeError","Int8BufferAttribute","Uint8BufferAttribute","Uint8ClampedBufferAttribute","Uint8ClampedArray","Int16BufferAttribute","Uint16BufferAttribute","Int32BufferAttribute","Uint32BufferAttribute","Float32BufferAttribute","Float64BufferAttribute","DirectGeometry","indices","normals","uvs","uvs2","arrayMax","BufferGeometry","index","drawRange","start","BoxGeometry","widthSegments","heightSegments","depthSegments","fromBufferGeometry","BoxBufferGeometry","mergeVertices","buildPlane","u","udir","vdir","gridX","gridY","ix","iy","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","groupCount","vector","numberOfVertices","d","addGroup","groupStart","Math","floor","setIndex","addAttribute","PlaneGeometry","PlaneBufferGeometry","width_half","height_half","segment_width","segment_height","MeshBasicMaterial","lightMap","lightMapIntensity","aoMap","aoMapIntensity","specularMap","envMap","combine","MultiplyOperation","reflectivity","refractionRatio","wireframeLinecap","wireframeLinejoin","Ray","origin","direction","Line3","end","Triangle","Mesh","random","drawMode","TrianglesDrawMode","updateMorphTargets","WebGLBackground","objects","forceClear","background","autoClear","autoClearColor","autoClearDepth","autoClearStencil","isCubeTexture","boxCamera","boxMesh","cube","extractRotation","getInverse","isTexture","planeCamera","planeMesh","alpha","setClearAlpha","reversePainterSortStable","WebGLRenderList","opaqueLastIndex","transparentLastIndex","opaque","renderItem","finish","WebGLRenderLists","hash","list","lists","dispose","WebGLIndexedBufferRenderer","infoRender","setMode","mode","calls","renderInstances","extension","drawElementsInstancedANGLE","maxInstancedCount","WebGLBufferRenderer","drawArrays","drawArraysInstancedANGLE","WebGLGeometries","infoMemory","onGeometryDispose","buffergeometry","geometries","removeEventListener","wireframeAttributes","_bufferGeometry","setFromObject","geometryAttributes","getWireframeAttribute","geometryIndex","WebGLLights","shadowBias","shadowRadius","shadowMapSize","distance","coneCos","penumbraCos","decay","skyColor","groundColor","halfWidth","halfHeight","WebGLObjects","frame","updateList","updateFromObject","addLineNumbers","string","lines","split","WebGLShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","getEncodingComponents","sRGBEncoding","RGBEEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","GammaEncoding","Error","getTexelDecodingFunction","functionName","components","getTexelEncodingFunction","getToneMappingFunction","toneMapping","toneMappingName","LinearToneMapping","ReinhardToneMapping","Uncharted2ToneMapping","CineonToneMapping","generateExtensions","rendererExtensions","envMapCubeUV","bumpMap","normalMap","flatShading","logarithmicDepthBuffer","filter","filterEmptyLine","generateDefines","chunks","fetchAttributeLocations","identifiers","ACTIVE_ATTRIBUTES","getActiveAttrib","replaceLightNums","numDirLights","numSpotLights","numRectAreaLights","numPointLights","numHemiLights","parseIncludes","include","ShaderChunk","unrollLoops","snippet","unroll","parseInt","WebGLProgram","code","shadowMapTypeDefine","shadowMapType","PCFSoftShadowMap","envMapTypeDefine","envMapModeDefine","envMapBlendingDefine","CubeRefractionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","SphericalReflectionMapping","MixOperation","AddOperation","prefixVertex","prefixFragment","gammaFactorDefine","gammaFactor","customExtensions","customDefines","isRawShaderMaterial","supportsVertexTextures","maxBones","useFog","fogExp","emissiveMap","roughnessMap","metalnessMap","useVertexTexture","doubleSided","flipSided","numClippingPlanes","shadowMapEnabled","sizeAttenuation","gradientMap","numClipIntersection","physicallyCorrectLights","NoToneMapping","outputEncoding","mapEncoding","envMapEncoding","emissiveMapEncoding","isShaderMaterial","vertexGlsl","fragmentGlsl","glVertexShader","glFragmentShader","bindAttribLocation","programLog","getProgramInfoLog","vertexLog","fragmentLog","runnable","haveDiagnostics","LINK_STATUS","getError","VALIDATE_STATUS","diagnostics","log","deleteShader","cachedUniforms","getUniforms","cachedAttributes","getAttributes","destroy","deleteProgram","programIdCount","usedTimes","WebGLPrograms","allocateBones","skeleton","bones","floatVertexTextures","nVertexUniforms","maxVertexUniforms","nVertexMatrices","getTextureEncodingFromMap","gammaOverrideLinear","isWebGLRenderTarget","programs","shaderIDs","MeshNormalMaterial","MeshLambertMaterial","MeshPhongMaterial","MeshToonMaterial","MeshStandardMaterial","MeshPhysicalMaterial","LineBasicMaterial","LineDashedMaterial","PointsMaterial","parameterNames","getParameters","nClipPlanes","nClipIntersection","shaderID","getMaxPrecision","currentRenderTarget","getRenderTarget","vertexTextures","gammaOutput","gammaInput","envMapMode","FlatShading","maxMorphTargets","maxMorphNormals","directional","point","spot","rectArea","hemi","getProgramCode","onBeforeCompile","toString","acquireProgram","p","pl","programInfo","releaseProgram","indexOf","pop","WebGLTextures","properties","paramThreeToGL","clampToMaxSize","maxSize","drawImage","isPowerOfTwo","makePowerOfTwo","HTMLImageElement","HTMLCanvasElement","nearestPowerOfTwo","textureNeedsPowerOfTwo","textureNeedsGenerateMipmaps","filterFallback","f","NearestMipMapNearestFilter","NearestMipMapLinearFilter","LINEAR","onTextureDispose","deallocateTexture","textures","onRenderTargetDispose","renderTarget","deallocateRenderTarget","textureProperties","__image__webglTextureCube","deleteTexture","__webglInit","__webglTexture","renderTargetProperties","isWebGLRenderTargetCube","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","slot","__version","uploadTexture","TEXTURE_CUBE_MAP","pixelStorei","UNPACK_FLIP_Y_WEBGL","isCompressed","isCompressedTexture","isDataTexture","cubeImage","maxCubemapSize","isPowerOfTwoImage","glFormat","glType","setTextureParameters","mipmap","RGBFormat","getCompressedTextureFormats","compressedTexImage2D","TEXTURE_CUBE_MAP_POSITIVE_X","generateMipmap","setTextureCubeDynamic","textureType","FloatType","HalfFloatType","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","getMaxAnisotropy","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","isDepthTexture","internalFormat","DEPTH_COMPONENT","_isWebGL2","DEPTH_COMPONENT32F","DEPTH_COMPONENT16","DepthFormat","UnsignedShortType","UnsignedIntType","DepthStencilFormat","DEPTH_STENCIL","UnsignedInt248Type","setupFrameBufferTexture","framebuffer","attachment","textureTarget","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","setupRenderBufferStorage","renderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","framebufferRenderbuffer","DEPTH_ATTACHMENT","DEPTH_STENCIL_ATTACHMENT","RGBA4","setupDepthTexture","webglDepthTexture","setupDepthRenderbuffer","isCube","createRenderbuffer","setupRenderTarget","isTargetPowerOfTwo","createFramebuffer","COLOR_ATTACHMENT0","updateRenderTargetMipmap","webglTexture","WebGL2RenderingContext","WebGLProperties","WebGLState","ColorBuffer","locked","currentColorMask","currentColorClear","colorMask","setLocked","lock","equals","reset","DepthBuffer","currentDepthMask","currentDepthFunc","currentDepthClear","depthMask","setFunc","NeverDepth","NEVER","AlwaysDepth","ALWAYS","LessDepth","LESS","LEQUAL","EqualDepth","EQUAL","GreaterEqualDepth","GEQUAL","GreaterDepth","GREATER","NotEqualDepth","NOTEQUAL","clearDepth","StencilBuffer","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","stencilTest","STENCIL_TEST","stencilMask","stencilFunc","stencilRef","setOp","stencilFail","stencilZFail","stencilZPass","stencilOp","stencil","clearStencil","colorBuffer","setFlipSided","setCullFace","CullFaceBack","newAttributes","enabledAttributes","enableVertexAttribArray","attributeDivisors","vertexAttribDivisorANGLE","enableAttributeAndDivisor","meshPerAttribute","disableVertexAttribArray","compressedTextureFormats","formats","getParameter","COMPRESSED_TEXTURE_FORMATS","NoBlending","CustomBlending","currentBlending","currentPremultipledAlpha","AdditiveBlending","blendEquationSeparate","FUNC_ADD","blendFuncSeparate","ONE","blendFunc","SRC_ALPHA","SubtractiveBlending","ZERO","ONE_MINUS_SRC_COLOR","ONE_MINUS_SRC_ALPHA","MultiplyBlending","SRC_COLOR","currentBlendEquation","currentBlendEquationAlpha","currentBlendSrc","currentBlendDst","currentBlendSrcAlpha","currentBlendDstAlpha","setMaterial","setPolygonOffset","currentFlipSided","frontFace","CW","CCW","cullFace","CullFaceNone","currentCullFace","BACK","CullFaceFront","FRONT","FRONT_AND_BACK","setLineWidth","currentLineWidth","lineWidthAvailable","lineWidth","factor","POLYGON_OFFSET_FILL","currentPolygonOffsetFactor","currentPolygonOffsetUnits","getScissorTest","currentScissorTest","SCISSOR_TEST","webglSlot","maxTextures","currentTextureSlot","webglType","boundTexture","currentBoundTextures","emptyTextures","currentScissor","currentViewport","maxVertexAttributes","MAX_VERTEX_ATTRIBS","MAX_COMBINED_TEXTURE_IMAGE_UNITS","parseFloat","VERSION","WebGLCapabilities","maxAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","getShaderPrecisionFormat","HIGH_FLOAT","MEDIUM_FLOAT","maxPrecision","MAX_TEXTURE_IMAGE_UNITS","maxVertexTextures","MAX_VERTEX_TEXTURE_IMAGE_UNITS","MAX_TEXTURE_SIZE","MAX_CUBE_MAP_TEXTURE_SIZE","maxAttributes","MAX_VERTEX_UNIFORM_VECTORS","maxVaryings","MAX_VARYING_VECTORS","maxFragmentUniforms","MAX_FRAGMENT_UNIFORM_VECTORS","floatFragmentTextures","ArrayCamera","cameras","WebVRManager","onVRDisplayPresentChange","device","isPresenting","eyeParameters","getEyeParameters","renderWidth","renderHeight","currentPixelRatio","getPixelRatio","currentSize","getSize","setDrawingBufferSize","frameData","VRFrameData","standingMatrix","standingMatrixInverse","cameraL","bounds","cameraR","cameraVR","standing","getDevice","setDevice","getCamera","depthNear","depthFar","getFrameData","pose","fromArray","orientation","stageParameters","sittingToStandingTransform","leftViewMatrix","rightViewMatrix","leftProjectionMatrix","rightProjectionMatrix","getLayers","layer","leftBounds","rightBounds","getStandingMatrix","submitFrame","WebGLExtensions","getExtension","WebGLClipping","resetGlobalState","uniform","globalState","numGlobalPlanes","numPlanes","numIntersection","projectPlanes","dstOffset","skipTransform","nPlanes","dstArray","flatSize","viewMatrix","viewNormalMatrix","getNormalMatrix","i4","plane","renderingShadows","enableLocalClipping","beginShadows","endShadows","setState","cache","fromCache","nGlobal","lGlobal","clippingState","WebGLRenderer","getTargetPixelRatio","_currentRenderTarget","_pixelRatio","setDefaultGLState","_currentScissor","_scissor","multiplyScalar","_currentViewport","_viewport","_currentProgram","_currentCamera","_currentGeometryProgram","_currentMaterialId","onContextLost","preventDefault","onMaterialDispose","deallocateMaterial","releaseMaterialProgramReference","programCache","renderObjectImmediate","_this","renderBufferImmediate","absNumericalSort","abs","setupVertexAttributes","startIndex","isInstancedBufferGeometry","programAttributes","materialDefaultAttributeValues","programAttribute","geometryAttribute","stride","isInstancedInterleavedBuffer","isInstancedBufferAttribute","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","projectObject","sortObjects","isLight","isSprite","intersectsSprite","isLensFlare","isImmediateRenderObject","_vector3","currentRenderList","renderObjects","renderList","overrideMaterial","isArrayCamera","_currentArrayCamera","camera2","_width","_height","setViewport","setScissor","setProgram","initMaterial","materialProperties","_clipping","programChange","numSupportedMorphTargets","numSupportedMorphNormals","lightsHash","ambientLightColor","ambient","directionalLights","spotLights","rectAreaLights","pointLights","hemisphereLights","directionalShadowMap","directionalShadowMatrix","spotShadowMap","spotShadowMatrix","pointShadowMap","pointShadowMatrix","progUniforms","uniformsList","seqWithValue","_usedTextureUnits","_clippingEnabled","_localClippingEnabled","useCache","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","LN2","isMeshPhongMaterial","isMeshStandardMaterial","uCamPos","cameraPosition","isMeshLambertMaterial","isMeshBasicMaterial","setOptional","boneTexture","sqrt","nextPowerOfTwo","ceil","boneMatrices","boneTextureSize","toneMappingExposure","toneMappingWhitePoint","markUniformsLightsNeedsUpdate","refreshUniformsFog","isMeshNormalMaterial","isMeshDepthMaterial","refreshUniformsCommon","isLineBasicMaterial","refreshUniformsLine","isLineDashedMaterial","refreshUniformsDash","isPointsMaterial","refreshUniformsPoints","refreshUniformsLambert","isMeshToonMaterial","refreshUniformsToon","refreshUniformsPhong","isMeshPhysicalMaterial","refreshUniformsPhysical","refreshUniformsStandard","refreshUniformsNormal","ltcMat","UniformsLib","LTC_MAT_TEXTURE","ltcMag","LTC_MAG_TEXTURE","upload","diffuse","emissive","emissiveIntensity","uvScaleMap","offsetRepeat","flipEnvMap","dashSize","totalSize","gapSize","specular","shininess","bumpScale","normalScale","roughness","metalness","envMapIntensity","clearCoat","clearCoatRoughness","setupShadows","lightShadowsLength","setupLights","ll","intensity","directionalLength","pointLength","spotLength","rectAreaLength","hemiLength","isAmbientLight","isDirectionalLight","lightCache","sub","transformDirection","bias","isSpotLight","cos","angle","penumbra","isRectAreaLight","_matrix42","identity","_matrix4","premultiply","isHemisphereLight","normalize","textureUnit","RepeatWrapping","REPEAT","MirroredRepeatWrapping","MIRRORED_REPEAT","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LinearMipMapNearestFilter","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","UnsignedShort4444Type","UNSIGNED_SHORT_4_4_4_4","UnsignedShort5551Type","UNSIGNED_SHORT_5_5_5_1","UnsignedShort565Type","UNSIGNED_SHORT_5_6_5","ByteType","ShortType","IntType","HALF_FLOAT_OES","AlphaFormat","ALPHA","LuminanceFormat","LUMINANCE","LuminanceAlphaFormat","LUMINANCE_ALPHA","SubtractEquation","FUNC_SUBTRACT","ReverseSubtractEquation","FUNC_REVERSE_SUBTRACT","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","DstAlphaFactor","DST_ALPHA","OneMinusDstAlphaFactor","ONE_MINUS_DST_ALPHA","DstColorFactor","DST_COLOR","OneMinusDstColorFactor","ONE_MINUS_DST_COLOR","SrcAlphaSaturateFactor","SRC_ALPHA_SATURATE","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","RGB_ETC1_Format","COMPRESSED_RGB_ETC1_WEBGL","MinEquation","MaxEquation","MIN_EXT","MAX_EXT","UNSIGNED_INT_24_8_WEBGL","REVISION","_canvas","_context","_alpha","_depth","_stencil","_antialias","antialias","_premultipliedAlpha","_preserveDrawingBuffer","preserveDrawingBuffer","morphInfluences","domElement","_currentFramebuffer","_currentScissorTest","_scissorTest","_infoMemory","_infoRender","points","memory","contextAttributes","rangeMin","rangeMax","MaxIndex","renderLists","vr","bufferRenderer","indexedBufferRenderer","spritePlugin","lensFlarePlugin","getContextAttributes","forceContextLoss","loseContext","setPixelRatio","setSize","updateStyle","getDrawingBufferSize","pixelRatio","boolean","bits","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","clearTarget","hasPositions","hasNormals","hasUvs","hasColors","positionArray","normalArray","nx","ny","nz","uvArray","colorArray","geometryProgram","updateBuffers","morphTargetInfluences","activeInfluences","influence","removeAttribute","rangeFactor","dataCount","rangeStart","rangeCount","drawStart","drawEnd","drawCount","LINES","TriangleStripDrawMode","TRIANGLE_STRIP","TriangleFanDrawMode","TRIANGLE_FAN","isLineSegments","isLineLoop","LINE_LOOP","LINE_STRIP","POINTS","compile","traverse","animate","callback","onFrame","isCamera","opaqueObjects","transparentObjects","setFaceCulling","frontFaceDirection","FrontFaceDirectionCW","warned","setTexture","readRenderTargetPixels","restore","textureFormat","IMPLEMENTATION_COLOR_READ_FORMAT","IMPLEMENTATION_COLOR_READ_TYPE","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","readPixels","FogExp2","Fog","Scene","LensFlare","SpriteMaterial","Sprite","LOD","levels","Skeleton","boneInverses","slice","calculateInverses","Bone","SkinnedMesh","bindMode","bindMatrix","bindMatrixInverse","initBones","bind","normalizeSkinWeights","linecap","linejoin","Line","LineSegments","LineLoop","Points","Group","VideoTexture","video","HAVE_CURRENT_DATA","CompressedTexture","CanvasTexture","DepthTexture","WireframeGeometry","o","ol","edge1","edge2","key","edge","edges","keys","index1","index2","getX","fromBufferAttribute","ParametricGeometry","slices","stacks","ParametricBufferGeometry","pu","pv","sliceCount","subVectors","crossVectors","PolyhedronGeometry","PolyhedronBufferGeometry","subdivideFace","cols","pow","aj","lerp","bj","rows","pushVertex","correctSeam","uvBuffer","x0","x1","x2","getVertexByIndex","correctUVs","centroid","uvA","uvB","uvC","divideScalar","azi","azimuth","correctUV","PI","atan2","inclination","computeVertexNormals","normalizeNormals","TetrahedronGeometry","TetrahedronBufferGeometry","OctahedronGeometry","OctahedronBufferGeometry","IcosahedronGeometry","IcosahedronBufferGeometry","t","DodecahedronGeometry","DodecahedronBufferGeometry","TubeGeometry","tubularSegments","radialSegments","closed","taper","bufferGeometry","TubeBufferGeometry","tangents","binormals","generateSegment","P","getPointAt","N","frames","B","sin","generateIndices","generateUVs","computeFrenetFrames","TorusKnotGeometry","tube","q","heightScale","TorusKnotBufferGeometry","calculatePositionOnCurve","cu","su","quOverP","cs","P1","P2","T","addVectors","cx","cy","TorusGeometry","arc","TorusBufferGeometry","ExtrudeGeometry","shapes","ExtrudeBufferGeometry","addShapeList","TextGeometry","text","TextBufferGeometry","font","isFont","generateShapes","curveSegments","amount","bevelThickness","bevelSize","bevelEnabled","SphereGeometry","phiStart","phiLength","thetaStart","thetaLength","SphereBufferGeometry","thetaEnd","grid","verticesRow","RingGeometry","innerRadius","outerRadius","thetaSegments","phiSegments","RingBufferGeometry","segment","radiusStep","thetaSegmentLevel","LatheGeometry","segments","LatheBufferGeometry","clamp","base","inverseSegments","phi","n1","n2","ShapeGeometry","ShapeBufferGeometry","addShape","shape","shapeHole","indexOffset","extractPoints","shapeVertices","shapeHoles","holes","ShapeUtils","isClockWise","reverse","triangulateShape","concat","EdgesGeometry","thresholdAngle","geometry2","thresholdDot","DEG2RAD","computeFaceNormals","sourceVertices","face1","face2","dot","CylinderGeometry","radiusTop","radiusBottom","openEnded","CylinderBufferGeometry","generateCap","centerIndexStart","centerIndexEnd","sign","theta","cosTheta","sinTheta","indexArray","slope","indexRow","ConeGeometry","ConeBufferGeometry","CircleGeometry","CircleBufferGeometry","s","ShadowMaterial","merge","RawShaderMaterial","STANDARD","PHYSICAL","TOON","LoadingManager","onLoad","onProgress","onError","itemsLoaded","itemsTotal","onStart","itemStart","url","itemEnd","itemError","FileLoader","manager","DefaultLoadingManager","CompressedTextureLoader","_parser","DataTextureLoader","ImageLoader","CubeTextureLoader","TextureLoader","Light","HemisphereLight","updateMatrix","LightShadow","SpotLightShadow","SpotLight","power","PointLight","DirectionalLightShadow","DirectionalLight","AmbientLight","RectAreaLight","Interpolant","parameterPositions","sampleValues","sampleSize","resultBuffer","_cachedIndex","constructor","valueSize","CubicInterpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","LinearInterpolant","DiscreteInterpolant","KeyframeTrackConstructor","times","values","interpolation","AnimationUtils","convertArray","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","validate","optimize","VectorKeyframeTrack","QuaternionLinearInterpolant","QuaternionKeyframeTrack","NumberKeyframeTrack","StringKeyframeTrack","BooleanKeyframeTrack","ColorKeyframeTrack","KeyframeTrack","AnimationClip","duration","tracks","resetDuration","MaterialLoader","BufferGeometryLoader","Loader","onLoadStart","onLoadProgress","onLoadComplete","JSONLoader","withCredentials","ObjectLoader","texturePath","CatmullRom","v0","v1","t2","QuadraticBezierP0","QuadraticBezierP1","QuadraticBezierP2","QuadraticBezier","CubicBezierP0","CubicBezierP1","CubicBezierP2","CubicBezierP3","CubicBezier","Curve","arcLengthDivisions","LineCurve","v2","CurvePath","curves","autoClose","EllipseCurve","aX","aY","xRadius","yRadius","aStartAngle","aEndAngle","aClockwise","aRotation","SplineCurve","CubicBezierCurve","v3","QuadraticBezierCurve","Path","currentPoint","fromPoints","Shape","ShapePath","subPaths","currentPath","Font","FontLoader","AudioLoader","StereoCamera","eyeSep","CubeCamera","cubeResolution","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","updateCubeMap","AudioListener","AudioContext","gain","createGain","connect","destination","Audio","listener","getInput","autoplay","loop","startTime","playbackRate","isPlaying","hasPlaybackControl","sourceType","filters","PositionalAudio","panner","createPanner","AudioAnalyser","audio","fftSize","analyser","createAnalyser","frequencyBinCount","getOutput","PropertyMixer","binding","typeName","mixFunction","_slerp","_select","_lerp","_mixBufferRegion","cumulativeWeight","useCount","referenceCount","Composite","targetGroup","optionalParsedPath","parsedPath","PropertyBinding","parseTrackName","_targetGroup","_bindings","subscribe_","rootNode","node","findNode","AnimationObjectGroup","var_args","nCachedObjects_","_indicesByUUID","_paths","_parsedPaths","_bindingsIndicesByPath","stats","total","inUse","bindingsPerObject","AnimationAction","mixer","clip","localRoot","_mixer","_clip","_localRoot","nTracks","interpolants","interpolantSettings","endingStart","ZeroCurvatureEnding","endingEnd","interpolant","createInterpolant","settings","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","LoopRepeat","_loopCount","_startTime","time","timeScale","_effectiveTimeScale","weight","_effectiveWeight","repetitions","paused","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","AnimationMixer","root","_root","_initMemoryManager","_accuIndex","Uniform","InstancedBufferGeometry","InterleavedBufferAttribute","interleavedBuffer","InterleavedBuffer","InstancedInterleavedBuffer","InstancedBufferAttribute","Raycaster","ray","params","threshold","PointCloud","ascSort","intersectObject","raycaster","intersects","recursive","raycast","Clock","autoStart","oldTime","elapsedTime","Spherical","Cylindrical","MorphBlendMesh","animationsMap","animationsList","numFrames","endFrame","fps","createAnimation","setAnimationWeight","ImmediateRenderObject","renderCallback","VertexNormalsHelper","hex","nNormals","objGeometry","positions","SpotLightHelper","cone","getBoneList","boneList","isBone","SkeletonHelper","color1","color2","bone","VertexColors","PointLightHelper","sphereSize","RectAreaLightHelper","HemisphereLightHelper","rotateY","getAttribute","GridHelper","divisions","step","halfSize","PolarGridHelper","radials","circles","FaceNormalsHelper","DirectionalLightHelper","CameraHelper","addLine","addPoint","pointMap","FaceColors","colorFrustum","colorCone","colorUp","colorTarget","colorCross","BoxHelper","ArrowHelper","dir","headLength","headWidth","lineGeometry","coneGeometry","translate","line","setDirection","setLength","AxisHelper","CubicPoly","t0","t1","c0","c1","c2","c3","initCatmullRom","x3","tension","initNonuniformCatmullRom","dt0","dt1","dt2","calc","CatmullRomCurve3","CubicBezierCurve3","QuadraticBezierCurve3","LineCurve3","ArcCurve","aRadius","Face4","MeshFaceMaterial","materials","MultiMaterial","isMultiMaterial","Particle","ParticleSystem","PointCloudMaterial","ParticleBasicMaterial","ParticleSystemMaterial","Vertex","DynamicBufferAttribute","setDynamic","Int8Attribute","Uint8Attribute","Uint8ClampedAttribute","Int16Attribute","Uint16Attribute","Int32Attribute","Uint32Attribute","Float32Attribute","Float64Attribute","ClosedSplineCurve3","SplineCurve3","Spline","BoundingBoxHelper","EdgesHelper","WireframeHelper","XHRLoader","BinaryTextureLoader","Projector","projectVector","project","unprojectVector","unproject","pickingRay","CanvasRenderer","Number","EPSILON","isInteger","isFinite","Function","assign","output","nextKey","hasOwnProperty","_listeners","listeners","hasEventListener","listenerArray","splice","MOUSE","LEFT","MIDDLE","RIGHT","RGBEFormat","RAD2DEG","chars","rnd","euclideanModulo","m","mapLinear","a1","a2","b1","b2","smoothstep","smootherstep","randInt","low","high","randFloat","randFloatSpread","range","degToRad","degrees","radToDeg","radians","round","isVector2","setScalar","scalar","setX","setY","setComponent","getComponent","addScalar","addScaledVector","subScalar","divide","clampScalar","minVal","maxVal","clampLength","roundToZero","negate","lengthSq","lengthManhattan","distanceTo","distanceToSquared","dx","dy","distanceToManhattan","lerpVectors","getY","rotateAround","toJSON","meta","metadata","generator","wrap","toDataURL","transformUv","isVector4","setZ","setW","setAxisAngleFromQuaternion","acos","setAxisAngleFromRotationMatrix","te","m11","m12","m13","m21","m22","m23","m31","m32","m33","xx","yy","zz","xy","xz","yz","getZ","getW","create","slerp","qa","qb","qm","slerpFlat","dst","src0","srcOffset0","src1","srcOffset1","y0","z0","w0","y1","z1","w1","sqrSin","tDir","onChangeCallback","euler","isEuler","s1","s2","s3","setFromAxisAngle","axis","halfAngle","setFromRotationMatrix","trace","setFromUnitVectors","vFrom","vTo","inverse","conjugate","multiplyQuaternions","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","cosHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","multiplyVectors","applyEuler","applyQuaternion","applyAxisAngle","applyMatrix3","qx","qy","qz","qw","iz","iw","cross","ax","ay","az","bx","by","bz","projectOnVector","projectOnPlane","planeNormal","reflect","angleTo","dz","setFromSpherical","sinPhiRadius","setFromCylindrical","setFromMatrixScale","sx","setFromMatrixColumn","sy","sz","isMatrix4","n11","n12","n13","n14","n21","n22","n23","n24","n31","n32","n33","n34","n41","n42","n43","n44","me","copyPosition","extractBasis","xAxis","yAxis","zAxis","makeBasis","scaleX","scaleY","scaleZ","makeRotationFromEuler","ae","af","be","bf","ce","cf","de","df","ac","ad","bc","bd","makeRotationFromQuaternion","y2","z2","wx","wy","wz","eye","a11","a12","a13","a14","a21","a22","a23","a24","a31","a32","a33","a34","a41","a42","a43","a44","b11","b12","b13","b14","b21","b22","b23","b24","b31","b32","b33","b34","b41","b42","b43","b44","applyToBufferAttribute","setXYZ","determinant","transpose","tmp","setPosition","throwOnDegenerate","t11","t12","t13","t14","det","msg","detInv","getMaxScaleOnAxis","scaleXSq","scaleYSq","scaleZSq","makeRotationX","makeRotationY","makeRotationZ","makeRotationAxis","tx","ty","makeScale","makeShear","compose","invSX","invSY","invSZ","makePerspective","makeOrthographic","h","ColorKeywords","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","setHex","setStyle","setHSL","hue2rgb","handleAlpha","charAt","copyGammaToLinear","copyLinearToGamma","safeInverse","convertGammaToLinear","convertLinearToGamma","getHex","getHexString","getHSL","optionalTarget","hue","saturation","hsl","lightness","delta","getStyle","offsetHSL","addColors","common","aomap","lightmap","emissivemap","bumpmap","normalmap","displacementmap","roughnessmap","metalnessmap","gradientmap","merged","uniforms_src","uniforms_dst","parameter_src","isMatrix3","alphamap_fragment","alphamap_pars_fragment","alphatest_fragment","aomap_fragment","aomap_pars_fragment","begin_vertex","beginnormal_vertex","bsdfs","bumpmap_pars_fragment","clipping_planes_fragment","clipping_planes_pars_fragment","clipping_planes_pars_vertex","clipping_planes_vertex","color_fragment","color_pars_fragment","color_pars_vertex","color_vertex","cube_uv_reflection_fragment","defaultnormal_vertex","displacementmap_pars_vertex","displacementmap_vertex","emissivemap_fragment","emissivemap_pars_fragment","encodings_fragment","encodings_pars_fragment","envmap_fragment","envmap_pars_fragment","envmap_pars_vertex","envmap_vertex","fog_vertex","fog_pars_vertex","fog_fragment","fog_pars_fragment","gradientmap_pars_fragment","lightmap_fragment","lightmap_pars_fragment","lights_lambert_vertex","lights_pars","lights_phong_fragment","lights_phong_pars_fragment","lights_physical_fragment","lights_physical_pars_fragment","lights_template","logdepthbuf_fragment","logdepthbuf_pars_fragment","logdepthbuf_pars_vertex","logdepthbuf_vertex","map_fragment","map_pars_fragment","map_particle_fragment","map_particle_pars_fragment","metalnessmap_fragment","metalnessmap_pars_fragment","morphnormal_vertex","morphtarget_pars_vertex","morphtarget_vertex","normal_flip","normal_fragment","normalmap_pars_fragment","packing","premultiplied_alpha_fragment","project_vertex","dithering_fragment","dithering_pars_fragment","roughnessmap_fragment","roughnessmap_pars_fragment","shadowmap_pars_fragment","shadowmap_pars_vertex","shadowmap_vertex","shadowmask_pars_fragment","skinbase_vertex","skinning_pars_vertex","skinning_vertex","skinnormal_vertex","specularmap_fragment","specularmap_pars_fragment","tonemapping_fragment","tonemapping_pars_fragment","uv_pars_fragment","uv_pars_vertex","uv_vertex","uv2_pars_fragment","uv2_pars_vertex","uv2_vertex","worldpos_vertex","cube_frag","cube_vert","depth_frag","depth_vert","distanceRGBA_frag","distanceRGBA_vert","equirect_frag","equirect_vert","linedashed_frag","linedashed_vert","meshbasic_frag","meshbasic_vert","meshlambert_frag","meshlambert_vert","meshphong_frag","meshphong_vert","meshphysical_frag","meshphysical_vert","normal_frag","normal_vert","points_frag","points_vert","shadow_frag","shadow_vert","basic","lambert","phong","standard","dashed","tCube","tFlip","equirect","tEquirect","distanceRGBA","physical","setFromPoints","makeEmpty","expandByPoint","setFromCenterAndSize","box","isEmpty","getCenter","expandByVector","expandByScalar","containsBox","intersectsBox","clampPoint","distanceToPoint","intersect","union","isMaterial","newValue","currentValue","extractFromCache","isRoot","srcPlanes","dstPlanes","isBox3","setFromArray","minX","minY","minZ","maxX","maxY","maxZ","setFromBufferAttribute","expandByObject","intersectsSphere","closestPoint","sphere","intersectsPlane","getBoundingSphere","optionalCenter","maxRadiusSq","empty","radiusSum","deltaLengthSq","getBoundingBox","setFromMatrix4","matrix4","transposeIntoArray","setComponents","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","inverseNormalLength","distanceToSphere","projectPoint","orthoPoint","perpendicularMagnitude","intersectLine","denominator","intersectsLine","startSign","endSign","coplanarPoint","m1","optionalNormalMatrix","referencePoint","frustum","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","computeBoundingSphere","negRadius","d1","d2","RotationOrders","asin","setFromVector3","reorder","newOrder","toVector3","optionalResult","channel","toggle","isObject3D","applyMatrix","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","rotateOnAxis","q1","rotateX","rotateZ","translateOnAxis","translateX","translateY","translateZ","localToWorld","worldToLocal","getObjectById","getObjectByProperty","getObjectByName","child","getWorldPosition","getWorldQuaternion","getWorldRotation","getWorldScale","getWorldDirection","traverseVisible","traverseAncestors","force","serialize","library","element","isRootObject","JSON","stringify","uuids","parse","isOrthographicCamera","setViewOffset","fullWidth","fullHeight","offsetX","offsetY","clearViewOffset","zoomW","zoomH","scaleW","scaleH","isPerspectiveCamera","setFocalLength","focalLength","vExtentSlope","getFilmHeight","atan","getFocalLength","getEffectiveFOV","getFilmWidth","skew","computeBoundingBox","obj","addFace","tempNormals","tempUVs","tempUVs2","cb","ab","fl","vA","vB","vC","areaWeighted","vl","computeFlatVertexNormals","computeMorphNormals","__originalFaceNormal","__originalVertexNormals","tmpGeo","faceNormals","faceNormal","dstNormalsFace","dstNormalsVertex","computeLineDistances","materialIndexOffset","vertexOffset","vertices1","vertices2","faces1","faces2","uvs1","colors1","colors2","vertexCopy","faceCopy","faceVertexNormals","faceVertexColors","uvCopy","mergeMesh","mesh","verticesMap","unique","changes","faceIndicesToRemove","idx","diff","sortFacesByMaterialIndex","materialIndexSort","_id","newUvs1","newUvs2","setBit","getNormalIndex","normalsHash","getColorIndex","colorsHash","getUvIndex","uvsHash","hasFaceVertexUv","hasFaceNormal","hasFaceVertexNormal","hasFaceColor","hasFaceVertexColor","faceType","uvsCopy","morphTarget","morphNormal","srcVertexNormal","destVertexNormal","isBufferAttribute","setArray","copyAt","copyArray","copyColorsArray","copyIndicesArray","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","setXY","setXYZW","onUpload","computeGroups","fromGeometry","morphTargetsPosition","hasFaceVertexUv2","morphTargetsLength","morphTargetsNormal","morphNormalsLength","hasSkinIndices","hasSkinWeights","vertexUvs","getIndex","clearGroups","setDrawRange","direct","__directGeometry","lineDistance","fromDirectGeometry","TypeArray","isNaN","pA","pB","pC","attribute1","attributeArray1","attribute2","attributeArray2","attributeSize","toNonIndexed","array2","morphAttribute","at","recast","closestPointToPoint","directionDistance","distanceSqToPoint","distanceSqToSegment","segCenter","segDir","optionalPointOnRay","optionalPointOnSegment","s0","sqrDist","extDet","segExtent","a01","b0","invDet","intersectSphere","tca","radius2","thc","distanceToPlane","intersectPlane","distToPoint","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectTriangle","backfaceCulling","DdN","DdQxE2","DdE1xQ","QdN","distanceSq","closestPointToPointParameter","startP","startEnd","clampToLine","startEnd2","startEnd_startP","resultLengthSq","barycoordFromPoint","dot00","dot01","dot02","dot11","dot12","denom","invDenom","setFromPointsAndIndices","i0","i1","i2","triangle","area","midpoint","edgeList","projectedPoint","minDistance","setDrawMode","ml","morphTargetDictionary","String","uvIntersection","uv1","uv3","barycoord","checkIntersection","intersectionPointWorld","checkBufferGeometryIntersection","intersection","intersectionPoint","faceIndex","inverseMatrix","tempA","tempB","tempC","fvA","fvB","fvC","faceMaterial","tl","targets","uvs_f","vecX","vecY","wantedRotation","isSpriteMaterial","intersectPoint","worldPosition","worldScale","guessSizeSq","level","addLevel","getObjectForDistance","matrixPosition","offsetMatrix","identityMatrix","gbone","pos","rotq","scl","sw","vec","skinWeight","linePrecision","precisionSq","vStart","vEnd","interSegment","interRay","distSq","nbVertices","testPoint","rayPointDistanceSq","localThresholdSq","distanceToRay","localThreshold","contour","triangulate","snip","verts","px","py","bX","bY","cX","cY","apx","apy","bpx","bpy","cpx","cpy","cCROSSap","bCROSScp","aCROSSbp","vertIndices","nv","removeDupEndPts","point_in_segment_2D_colin","inSegPt1","inSegPt2","inOtherPt","intersect_segments_2D","inSeg1Pt1","inSeg1Pt2","inSeg2Pt1","inSeg2Pt2","inExcludeAdjacentSegs","seg1dx","seg1dy","seg2dx","seg2dy","seg1seg2dx","seg1seg2dy","limit","perpSeg1","perpSeg2","factorSeg1","seg1Pt","seg2Pt","seg1min","seg1max","seg1minVal","seg1maxVal","seg2min","seg2max","seg2minVal","seg2maxVal","isPointInsideAngle","inVertex","inLegFromPt","inLegToPt","legFromPtX","legFromPtY","legToPtX","legToPtY","otherPtX","otherPtY","from2toAngle","from2otherAngle","other2toAngle","allPointsMap","allpoints","hl","shapeWithoutHoles","hole","holeIndex","shapeIndex","shapePt","holePt","holeIdx","cutKey","tmpShape1","tmpShape2","tmpHole1","tmpHole2","indepHoles","failedCuts","minShapeIndex","counter","h2","inShapeIdx","inHoleIdx","lastShapeIdx","prevShapeIdx","nextShapeIdx","insideAngle","lastHoleIdx","prevHoleIdx","nextHoleIdx","inShapePt","inHolePt","sIdx","nextIdx","ihIdx","chkHole","hIdx","triangles","pts","getArrays","positionAttribute","verticesArray","uvAttribute","IndexAttribute","sl","arrays","scalePt2","pt","getBevelVec","inPt","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","collinear0","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","ptNextShift_x","ptNextShift_y","sf","v_trans_lensq","direction_eq","sidewalls","layeroffset","steps","bevelSegments","slen1","vlen","slen2","f4","placeholder","f3","addVertex","nextIndex","uvgen","generateTopUV","addUV","wallContour","stepIndex","stepsLength","contourIndex1","contourIndex2","generateSideWallUV","indicesArray","vector2","extrudePts","splineTube","binormal","position2","extrudePath","extrudeByPath","UVGenerator","WorldUVGenerator","getSpacedPoints","ahole","shapePoints","bs","vert","flen","contourMovements","oneHoleMovements","holesMovements","verticesMovements","extrudeMaterial","indexA","indexB","indexC","a_x","a_y","b_x","b_y","c_x","c_y","indexD","a_z","b_z","c_z","d_x","d_y","d_z","Geometries","freeze","isShadowMaterial","Materials","Cache","files","file","load","cached","dataUriRegexResult","mimeType","isBase64","decodeURIComponent","atob","response","responseType","toLowerCase","ArrayBuffer","charCodeAt","Blob","parser","DOMParser","parseFromString","request","XMLHttpRequest","open","status","overrideMimeType","header","requestHeader","setRequestHeader","send","setPath","setResponseType","setWithCredentials","setMimeType","loaded","texDatas","mipmapCount","isCubemap","texData","substr","crossOrigin","setCrossOrigin","urls","isJPEG","search","arraySlice","from","to","isTypedArray","forceClone","isView","DataView","getKeyframeOrder","compareTime","sortedArray","nValues","srcOffset","flattenJSON","jsonKeys","valuePropertyName","evaluate","pp","validate_interval","seek","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","beforeStart_","mid","intervalChanged_","interpolate_","DefaultSettings_","getSettings_","copySampleValue_","iPrev","iNext","tPrev","tNext","halfDt","o1","o0","oP","oN","wP","wN","ppp","sP","sN","offset1","offset0","weight1","weight0","KeyframeTrackPrototype","InterpolantFactoryMethodDiscrete","getValueSize","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","factoryMethod","message","ValueTypeName","getInterpolation","timeOffset","endTime","nKeys","valid","prevTime","currTime","smoothInterpolation","writeIndex","keep","offsetP","offsetN","readOffset","writeOffset","json","trackType","_getTrackTypeForValueTypeName","track","jsonTracks","frameTime","clipTracks","CreateFromMorphTargetSequence","morphTargetSequence","noLoop","numMorphTargets","findByName","objectOrClipArray","clipArray","animations","CreateClipsFromMorphTargetSequences","animationToMorphTargets","parts","animationMorphTargets","clips","parseAnimation","animation","addNonemptyTrack","trackName","animationKeys","propertyName","destTracks","clipName","hierarchyTracks","hierarchy","morphTargetNames","morphTargetName","animationKey","boneName","setTextures","getTexture","typedArray","TYPED_ARRAYS","drawcalls","offsets","Handlers","handlers","regex","extractUrlBase","initMaterials","createMaterial","BlendingMode","textureLoader","materialLoader","loadTexture","fullPath","mapDiffuseRepeat","mapDiffuseOffset","mapDiffuseWrap","mapDiffuseAnisotropy","mapEmissiveRepeat","mapEmissiveOffset","mapEmissiveWrap","mapEmissiveAnisotropy","mapLightRepeat","mapLightOffset","mapLightWrap","mapLightAnisotropy","mapAORepeat","mapAOOffset","mapAOWrap","mapAOAnisotropy","mapBumpRepeat","mapBumpOffset","mapBumpWrap","mapBumpAnisotropy","mapNormalRepeat","mapNormalOffset","mapNormalWrap","mapNormalAnisotropy","mapSpecularRepeat","mapSpecularOffset","mapSpecularWrap","mapSpecularAnisotropy","mapMetalnessRepeat","mapMetalnessOffset","mapMetalnessWrap","mapMetalnessAnisotropy","mapRoughnessRepeat","mapRoughnessOffset","mapRoughnessWrap","mapRoughnessAnisotropy","mapAlphaRepeat","mapAlphaOffset","mapAlphaWrap","mapAlphaAnisotropy","setTexturePath","parseModel","isBitSet","fi","zLength","colorIndex","normalIndex","uvIndex","isQuad","hasMaterial","faceA","faceB","uvLayer","nUvLayers","parseSkin","influencesPerVertex","parseMorphing","dstVertices","srcVertices","morphColors","parseAnimations","outputAnimations","morphAnimationClips","substring","lastIndexOf","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","geometryLoader","bufferGeometryLoader","parseConstant","TEXTURE_MAPPING","TEXTURE_WRAPPING","TEXTURE_FILTER","getGeometry","getMaterial","UVMapping","getPoint","getUtoTmapping","getPoints","getLength","lengths","getLengths","cacheArcLengths","current","sum","updateArcLengths","targetArcLength","arcLengths","comparison","lengthBefore","getTangent","pt1","getTangentAt","mat","MAX_VALUE","tz","isLineCurve","curve","closePath","startPoint","endPoint","curveLengths","getCurveLengths","segmentLength","lens","cacheLengths","sums","resolution","isEllipseCurve","isSplineCurve","createPointsGeometry","createGeometry","createSpacedPointsGeometry","twoPi","deltaAngle","samePoints","intPoint","point0","point1","point2","point3","PathPrototype","moveTo","lineTo","quadraticCurveTo","aCPx","aCPy","bezierCurveTo","aCP1x","aCP1y","aCP2x","aCP2y","splineThru","npts","absarc","absellipse","ellipse","firstPoint","lastPoint","getPointsHoles","holesPts","extractAllPoints","toShapes","isCCW","noHoles","toShapesNoHoles","inSubpaths","tmpPath","tmpShape","solid","holesFirst","tmpPoints","betterShapeHoles","newShapes","newShapeHoles","mainIdx","ambiguous","toChange","sLen","sho","ho","hole_unassigned","s2Idx","inPolygon","polyLen","inside","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","froms","tos","tmpHoles","createPath","glyph","glyphs","cpx0","cpy0","cpx1","cpy1","cpx2","cpy2","laste","outline","_cachedOutline","ha","paths","line_height","yMax","yMin","underlineThickness","char","ret","webkitAudioContext","setContext","decodeAudioData","audioBuffer","instance","eyeRight","eyeLeft","xmin","xmax","eyeSepOnProjection","ymax","removeFilter","disconnect","getFilter","setFilter","getMasterVolume","setMasterVolume","positionX","setValueAtTime","currentTime","positionY","positionZ","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","setNodeSource","audioNode","setBuffer","play","createBufferSource","onended","onEnded","pause","stop","getFilters","setFilters","setPlaybackRate","getPlaybackRate","getLoop","setLoop","getVolume","setVolume","getRefDistance","refDistance","setRefDistance","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","maxDistance","setMaxDistance","getFrequencyData","getByteFrequencyData","getAverageFrequency","accumulate","accuIndex","currentWeight","mix","originalValueOffset","saveOriginalState","getValue","restoreOriginalState","firstValidIndex","bindings","unbind","isAnimationObjectGroup","sanitizeNodeName","trackRe","supportedObjectNames","matches","results","objectName","objectIndex","propertyIndex","lastDot","searchNodeSubtree","childNode","subTreeNode","_getValue_unavailable","_setValue_unavailable","BindingType","Direct","EntireArray","ArrayElement","HasFromToArray","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","GetterByBindingType","resolvedProperty","SetterByBindingTypeAndVersioning","targetObject","dest","targetArray","sourceArray","nodeProperty","versioning","bindingType","_getValue_unbound","_setValue_unbound","nObjects","nCachedObjects","indicesByUUID","parsedPaths","nBindings","knownObject","firstActiveIndex","lastCachedObject","bindingsForPath","lastCached","lastCachedIndex","firstActiveObject","firstActive","uncache","lastObject","indicesByPath","unsubscribe_","lastBindingsIndex","lastBindings","_activateAction","_deactivateAction","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","startAt","setEffectiveWeight","getEffectiveWeight","fadeIn","_scheduleFading","fadeOut","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","startEndRatio","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","halt","startTimeScale","endTimeScale","_lendControlInterpolant","timeScaleInterpolant","getMixer","getClip","getRoot","_update","deltaTime","timeDirection","_updateWeight","timeRunning","_updateTimeScale","clipTime","_updateTime","propertyMixers","interpolantValue","loopCount","_setEndings","handle_stop","pingPong","loopDelta","pending","atStart","atEnd","weightNow","weightThen","_bindAction","prototypeAction","rootUuid","bindingsByRoot","_bindingsByRootAndName","bindingsByName","_addInactiveBinding","clipUuid","actionsForClip","_actionsByClip","knownActions","_addInactiveAction","_lendBinding","_lendAction","_takeBackBinding","_takeBackAction","_actions","_nActiveActions","_nActiveBindings","_controlInterpolants","_nActiveControlInterpolants","actions","controlInterpolants","actionsByClip","actionByRoot","_removeInactiveAction","lastInactiveAction","cacheIndex","knownActionsForClip","lastKnownAction","byClipCacheIndex","_removeInactiveBindingsForAction","_removeInactiveBinding","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","bindingByName","propBinding","lastInactiveBinding","remove_empty_map","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","clipAction","optionalRoot","clipObject","existingAction","newAction","stopAllAction","nActions","uncacheClip","actionsToRemove","uncacheRoot","uncacheAction","isInterleavedBuffer","setFromCamera","coords","intersectObjects","performance","getElapsedTime","getDelta","newTime","other","makeSafe","vec3","lastFrame","currentFrame","active","directionBackwards","mirroredLoop","autoCreateAnimations","firstAnimation","frameRanges","morph","setAnimationDirectionForward","setAnimationDirectionBackward","setAnimationFPS","setAnimationDuration","setAnimationTime","getAnimationTime","getAnimationDuration","playAnimation","stopAnimation","keyframe","objPos","objNorm","coneLength","coneWidth","boneMatrix","matrixWorldInv","hx","hy","lightPlane","targetLine","setPoint","setColor","pz","SceneUtils","createMultiMaterialObject","detach","attach","construct","initFromArray","getControlPointsArray","reparametrizeByArcLength","samplingCoef","setColors","isIntersectionBox","isIntersectionSphere","random16","flattenToArrayOffset","multiplyVector3","multiplyVector3Array","applyToBuffer","applyToVector3Array","extractPosition","getPosition","multiplyToArray","multiplyVector4","rotateAxis","crossVector","rotateByAxis","makeFrustum","isIntersectionLine","isIntersectionPlane","extrude","makeGeometry","fromAttribute","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","applyProjection","computeTangents","getChildByName","renderDepth","eulerOrder","useQuaternion","setLens","onlyShadow","shadowCameraFov","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraNear","shadowCameraFar","shadowCameraVisible","shadowDarkness","shadowMapWidth","shadowMapHeight","addIndex","addDrawCall","clearDrawCalls","computeOffsets","wrapAround","wrapRGB","metal","getCurrentRenderTarget","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","enableScissorTest","addPrePlugin","addPostPlugin","updateShadowMap","shadowMapCullFace","getData","GeometryUtils","geometry1","ImageUtils","loadTextureCube","loadCompressedTexture","loadCompressedTextureCube","CullFaceFrontBack","FrontFaceDirectionCCW","BasicShadowMap","LoopOnce","LoopPingPong","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","ZeroSlopeEnding","WrapAroundEnding","LogLuvEncoding","CubeGeometry","LineStrip","LinePieces","SpriteCanvasMaterial","isSpriteCanvasMaterial","calculateLights","_ambientLight","_directionalLights","_pointLights","lightColor","calculateLight","_lightColor","lightPosition","renderSprite","setOpacity","_canvasWidthHalf","_canvasHeightHalf","dist","_elemBox","pattern","_patterns","textureToPattern","setFillStyle","bitmap","ox","oy","save","rotate","setStrokeStyle","renderLine","beginPath","setLineCap","setLineJoin","colorStyle1","colorStyle2","grad","createLinearGradient","addColorStop","exception","stroke","setLineDash","renderFace3","_v1x","_v1y","_v2x","_v2y","_v3x","_v3y","drawTriangle","_diffuseColor","_emissiveColor","_color","_centroid","positionWorld","normalModel","strokePath","fillPath","_uvs","patternPath","_normal","vertexNormalsModel","_normalViewMatrix","_uv1x","_uv1y","_uv2x","_uv2y","_uv3x","_uv3y","fill","repeatX","repeatY","mirrorX","mirrorY","createElement","setTransform","createPattern","u0","u1","u2","idet","transform","pixels","_contextGlobalAlpha","globalAlpha","_contextGlobalCompositeOperation","globalCompositeOperation","_contextLineWidth","_contextLineCap","lineCap","_contextLineJoin","lineJoin","_contextStrokeStyle","strokeStyle","_contextFillStyle","_contextLineDash","_renderData","_elements","_v1","_v2","_v3","_projector","_canvasWidth","_canvasHeight","_viewportX","_viewportY","_viewportWidth","_viewportHeight","_clearColor","_clearAlpha","_clipBox","_clearBox","sortElements","setClearColorHex","clearRect","projectScene","RenderableSprite","RenderableLine","RenderableFace","RenderableObject","RenderableVertex","vertexNormalsLength","addObject","_object","getNextObjectInPool","_viewProjectionMatrix","pushPoint","_vector4","invW","_sprite","getNextSpriteInPool","_objectCount","_objectPoolLength","_objectPool","getNextVertexInPool","_vertexCount","_vertexPoolLength","_vertexPool","getNextFaceInPool","_faceCount","_facePoolLength","_facePool","getNextLineInPool","_lineCount","_linePoolLength","_linePool","_spriteCount","_spritePoolLength","_spritePool","painterSort","clipLine","alpha1","alpha2","bc1near","bc2near","bc1far","bc2far","_vertex","_face","_line","_modelMatrix","_boundingBox","_points3","_viewMatrix","_modelViewProjectionMatrix","_normalMatrix","_clippedVertex1PositionScreen","_clippedVertex2PositionScreen","RenderList","setObject","projectVertex","pushNormal","pushColor","pushUv","checkTriangleVisibility","checkBackfaceCulling","pushLine","pushTriangle","targetVertex","nl"],"mappings":"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","file":"library.min.js","sourcesContent":["(function(window, factory) {\n\tvar lazySizes = factory(window, window.document);\n\twindow.lazySizes = lazySizes;\n\tif(typeof module == 'object' && module.exports){\n\t\tmodule.exports = lazySizes;\n\t}\n}(window, function l(window, document) {\n\t'use strict';\n\t/*jshint eqnull:true */\n\tif(!document.getElementsByClassName){return;}\n\n\tvar lazySizesConfig;\n\n\tvar docElem = document.documentElement;\n\n\tvar Date = window.Date;\n\n\tvar supportPicture = window.HTMLPictureElement;\n\n\tvar _addEventListener = 'addEventListener';\n\n\tvar _getAttribute = 'getAttribute';\n\n\tvar addEventListener = window[_addEventListener];\n\n\tvar setTimeout = window.setTimeout;\n\n\tvar requestAnimationFrame = window.requestAnimationFrame || setTimeout;\n\n\tvar requestIdleCallback = window.requestIdleCallback;\n\n\tvar regPicture = /^picture$/i;\n\n\tvar loadEvents = ['load', 'error', 'lazyincluded', '_lazyloaded'];\n\n\tvar regClassCache = {};\n\n\tvar forEach = Array.prototype.forEach;\n\n\tvar hasClass = function(ele, cls) {\n\t\tif(!regClassCache[cls]){\n\t\t\tregClassCache[cls] = new RegExp('(\\\\s|^)'+cls+'(\\\\s|$)');\n\t\t}\n\t\treturn regClassCache[cls].test(ele[_getAttribute]('class') || '') && regClassCache[cls];\n\t};\n\n\tvar addClass = function(ele, cls) {\n\t\tif (!hasClass(ele, cls)){\n\t\t\tele.setAttribute('class', (ele[_getAttribute]('class') || '').trim() + ' ' + cls);\n\t\t}\n\t};\n\n\tvar removeClass = function(ele, cls) {\n\t\tvar reg;\n\t\tif ((reg = hasClass(ele,cls))) {\n\t\t\tele.setAttribute('class', (ele[_getAttribute]('class') || '').replace(reg, ' '));\n\t\t}\n\t};\n\n\tvar addRemoveLoadEvents = function(dom, fn, add){\n\t\tvar action = add ? _addEventListener : 'removeEventListener';\n\t\tif(add){\n\t\t\taddRemoveLoadEvents(dom, fn);\n\t\t}\n\t\tloadEvents.forEach(function(evt){\n\t\t\tdom[action](evt, fn);\n\t\t});\n\t};\n\n\tvar triggerEvent = function(elem, name, detail, noBubbles, noCancelable){\n\t\tvar event = document.createEvent('CustomEvent');\n\n\t\tevent.initCustomEvent(name, !noBubbles, !noCancelable, detail || {});\n\n\t\telem.dispatchEvent(event);\n\t\treturn event;\n\t};\n\n\tvar updatePolyfill = function (el, full){\n\t\tvar polyfill;\n\t\tif( !supportPicture && ( polyfill = (window.picturefill || lazySizesConfig.pf) ) ){\n\t\t\tpolyfill({reevaluate: true, elements: [el]});\n\t\t} else if(full && full.src){\n\t\t\tel.src = full.src;\n\t\t}\n\t};\n\n\tvar getCSS = function (elem, style){\n\t\treturn (getComputedStyle(elem, null) || {})[style];\n\t};\n\n\tvar getWidth = function(elem, parent, width){\n\t\twidth = width || elem.offsetWidth;\n\n\t\twhile(width < lazySizesConfig.minSize && parent && !elem._lazysizesWidth){\n\t\t\twidth =  parent.offsetWidth;\n\t\t\tparent = parent.parentNode;\n\t\t}\n\n\t\treturn width;\n\t};\n\n\tvar rAF = (function(){\n\t\tvar running, waiting;\n\t\tvar fns = [];\n\n\t\tvar run = function(){\n\t\t\tvar fn;\n\t\t\trunning = true;\n\t\t\twaiting = false;\n\t\t\twhile(fns.length){\n\t\t\t\tfn = fns.shift();\n\t\t\t\tfn[0].apply(fn[1], fn[2]);\n\t\t\t}\n\t\t\trunning = false;\n\t\t};\n\n\t\tvar rafBatch = function(fn){\n\t\t\tif(running){\n\t\t\t\tfn.apply(this, arguments);\n\t\t\t} else {\n\t\t\t\tfns.push([fn, this, arguments]);\n\n\t\t\t\tif(!waiting){\n\t\t\t\t\twaiting = true;\n\t\t\t\t\t(document.hidden ? setTimeout : requestAnimationFrame)(run);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\trafBatch._lsFlush = run;\n\n\t\treturn rafBatch;\n\t})();\n\n\tvar rAFIt = function(fn, simple){\n\t\treturn simple ?\n\t\t\tfunction() {\n\t\t\t\trAF(fn);\n\t\t\t} :\n\t\t\tfunction(){\n\t\t\t\tvar that = this;\n\t\t\t\tvar args = arguments;\n\t\t\t\trAF(function(){\n\t\t\t\t\tfn.apply(that, args);\n\t\t\t\t});\n\t\t\t}\n\t\t;\n\t};\n\n\tvar throttle = function(fn){\n\t\tvar running;\n\t\tvar lastTime = 0;\n\t\tvar gDelay = 125;\n\t\tvar RIC_DEFAULT_TIMEOUT = 666;\n\t\tvar rICTimeout = RIC_DEFAULT_TIMEOUT;\n\t\tvar run = function(){\n\t\t\trunning = false;\n\t\t\tlastTime = Date.now();\n\t\t\tfn();\n\t\t};\n\t\tvar idleCallback = requestIdleCallback ?\n\t\t\tfunction(){\n\t\t\t\trequestIdleCallback(run, {timeout: rICTimeout});\n\t\t\t\tif(rICTimeout !== RIC_DEFAULT_TIMEOUT){\n\t\t\t\t\trICTimeout = RIC_DEFAULT_TIMEOUT;\n\t\t\t\t}\n\t\t\t}:\n\t\t\trAFIt(function(){\n\t\t\t\tsetTimeout(run);\n\t\t\t}, true)\n\t\t;\n\n\t\treturn function(isPriority){\n\t\t\tvar delay;\n\t\t\tif((isPriority = isPriority === true)){\n\t\t\t\trICTimeout = 44;\n\t\t\t}\n\n\t\t\tif(running){\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\trunning =  true;\n\n\t\t\tdelay = gDelay - (Date.now() - lastTime);\n\n\t\t\tif(delay < 0){\n\t\t\t\tdelay = 0;\n\t\t\t}\n\n\t\t\tif(isPriority || (delay < 9 && requestIdleCallback)){\n\t\t\t\tidleCallback();\n\t\t\t} else {\n\t\t\t\tsetTimeout(idleCallback, delay);\n\t\t\t}\n\t\t};\n\t};\n\n\t//based on http://modernjavascript.blogspot.de/2013/08/building-better-debounce.html\n\tvar debounce = function(func) {\n\t\tvar timeout, timestamp;\n\t\tvar wait = 99;\n\t\tvar run = function(){\n\t\t\ttimeout = null;\n\t\t\tfunc();\n\t\t};\n\t\tvar later = function() {\n\t\t\tvar last = Date.now() - timestamp;\n\n\t\t\tif (last < wait) {\n\t\t\t\tsetTimeout(later, wait - last);\n\t\t\t} else {\n\t\t\t\t(requestIdleCallback || run)(run);\n\t\t\t}\n\t\t};\n\n\t\treturn function() {\n\t\t\ttimestamp = Date.now();\n\n\t\t\tif (!timeout) {\n\t\t\t\ttimeout = setTimeout(later, wait);\n\t\t\t}\n\t\t};\n\t};\n\n\n\tvar loader = (function(){\n\t\tvar lazyloadElems, preloadElems, isCompleted, resetPreloadingTimer, loadMode, started;\n\n\t\tvar eLvW, elvH, eLtop, eLleft, eLright, eLbottom;\n\n\t\tvar defaultExpand, preloadExpand, hFac;\n\n\t\tvar regImg = /^img$/i;\n\t\tvar regIframe = /^iframe$/i;\n\n\t\tvar supportScroll = ('onscroll' in window) && !(/glebot/.test(navigator.userAgent));\n\n\t\tvar shrinkExpand = 0;\n\t\tvar currentExpand = 0;\n\n\t\tvar isLoading = 0;\n\t\tvar lowRuns = -1;\n\n\t\tvar resetPreloading = function(e){\n\t\t\tisLoading--;\n\t\t\tif(e && e.target){\n\t\t\t\taddRemoveLoadEvents(e.target, resetPreloading);\n\t\t\t}\n\n\t\t\tif(!e || isLoading < 0 || !e.target){\n\t\t\t\tisLoading = 0;\n\t\t\t}\n\t\t};\n\n\t\tvar isNestedVisible = function(elem, elemExpand){\n\t\t\tvar outerRect;\n\t\t\tvar parent = elem;\n\t\t\tvar visible = getCSS(document.body, 'visibility') == 'hidden' || getCSS(elem, 'visibility') != 'hidden';\n\n\t\t\teLtop -= elemExpand;\n\t\t\teLbottom += elemExpand;\n\t\t\teLleft -= elemExpand;\n\t\t\teLright += elemExpand;\n\n\t\t\twhile(visible && (parent = parent.offsetParent) && parent != document.body && parent != docElem){\n\t\t\t\tvisible = ((getCSS(parent, 'opacity') || 1) > 0);\n\n\t\t\t\tif(visible && getCSS(parent, 'overflow') != 'visible'){\n\t\t\t\t\touterRect = parent.getBoundingClientRect();\n\t\t\t\t\tvisible = eLright > outerRect.left &&\n\t\t\t\t\t\teLleft < outerRect.right &&\n\t\t\t\t\t\teLbottom > outerRect.top - 1 &&\n\t\t\t\t\t\teLtop < outerRect.bottom + 1\n\t\t\t\t\t;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn visible;\n\t\t};\n\n\t\tvar checkElements = function() {\n\t\t\tvar eLlen, i, rect, autoLoadElem, loadedSomething, elemExpand, elemNegativeExpand, elemExpandVal, beforeExpandVal;\n\n\t\t\tif((loadMode = lazySizesConfig.loadMode) && isLoading < 8 && (eLlen = lazyloadElems.length)){\n\n\t\t\t\ti = 0;\n\n\t\t\t\tlowRuns++;\n\n\t\t\t\tif(preloadExpand == null){\n\t\t\t\t\tif(!('expand' in lazySizesConfig)){\n\t\t\t\t\t\tlazySizesConfig.expand = docElem.clientHeight > 500 && docElem.clientWidth > 500 ? 500 : 370;\n\t\t\t\t\t}\n\n\t\t\t\t\tdefaultExpand = lazySizesConfig.expand;\n\t\t\t\t\tpreloadExpand = defaultExpand * lazySizesConfig.expFactor;\n\t\t\t\t}\n\n\t\t\t\tif(currentExpand < preloadExpand && isLoading < 1 && lowRuns > 2 && loadMode > 2 && !document.hidden){\n\t\t\t\t\tcurrentExpand = preloadExpand;\n\t\t\t\t\tlowRuns = 0;\n\t\t\t\t} else if(loadMode > 1 && lowRuns > 1 && isLoading < 6){\n\t\t\t\t\tcurrentExpand = defaultExpand;\n\t\t\t\t} else {\n\t\t\t\t\tcurrentExpand = shrinkExpand;\n\t\t\t\t}\n\n\t\t\t\tfor(; i < eLlen; i++){\n\n\t\t\t\t\tif(!lazyloadElems[i] || lazyloadElems[i]._lazyRace){continue;}\n\n\t\t\t\t\tif(!supportScroll){unveilElement(lazyloadElems[i]);continue;}\n\n\t\t\t\t\tif(!(elemExpandVal = lazyloadElems[i][_getAttribute]('data-expand')) || !(elemExpand = elemExpandVal * 1)){\n\t\t\t\t\t\telemExpand = currentExpand;\n\t\t\t\t\t}\n\n\t\t\t\t\tif(beforeExpandVal !== elemExpand){\n\t\t\t\t\t\teLvW = innerWidth + (elemExpand * hFac);\n\t\t\t\t\t\telvH = innerHeight + elemExpand;\n\t\t\t\t\t\telemNegativeExpand = elemExpand * -1;\n\t\t\t\t\t\tbeforeExpandVal = elemExpand;\n\t\t\t\t\t}\n\n\t\t\t\t\trect = lazyloadElems[i].getBoundingClientRect();\n\n\t\t\t\t\tif ((eLbottom = rect.bottom) >= elemNegativeExpand &&\n\t\t\t\t\t\t(eLtop = rect.top) <= elvH &&\n\t\t\t\t\t\t(eLright = rect.right) >= elemNegativeExpand * hFac &&\n\t\t\t\t\t\t(eLleft = rect.left) <= eLvW &&\n\t\t\t\t\t\t(eLbottom || eLright || eLleft || eLtop) &&\n\t\t\t\t\t\t((isCompleted && isLoading < 3 && !elemExpandVal && (loadMode < 3 || lowRuns < 4)) || isNestedVisible(lazyloadElems[i], elemExpand))){\n\t\t\t\t\t\tunveilElement(lazyloadElems[i]);\n\t\t\t\t\t\tloadedSomething = true;\n\t\t\t\t\t\tif(isLoading > 9){break;}\n\t\t\t\t\t} else if(!loadedSomething && isCompleted && !autoLoadElem &&\n\t\t\t\t\t\tisLoading < 4 && lowRuns < 4 && loadMode > 2 &&\n\t\t\t\t\t\t(preloadElems[0] || lazySizesConfig.preloadAfterLoad) &&\n\t\t\t\t\t\t(preloadElems[0] || (!elemExpandVal && ((eLbottom || eLright || eLleft || eLtop) || lazyloadElems[i][_getAttribute](lazySizesConfig.sizesAttr) != 'auto')))){\n\t\t\t\t\t\tautoLoadElem = preloadElems[0] || lazyloadElems[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(autoLoadElem && !loadedSomething){\n\t\t\t\t\tunveilElement(autoLoadElem);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tvar throttledCheckElements = throttle(checkElements);\n\n\t\tvar switchLoadingClass = function(e){\n\t\t\taddClass(e.target, lazySizesConfig.loadedClass);\n\t\t\tremoveClass(e.target, lazySizesConfig.loadingClass);\n\t\t\taddRemoveLoadEvents(e.target, rafSwitchLoadingClass);\n\t\t};\n\t\tvar rafedSwitchLoadingClass = rAFIt(switchLoadingClass);\n\t\tvar rafSwitchLoadingClass = function(e){\n\t\t\trafedSwitchLoadingClass({target: e.target});\n\t\t};\n\n\t\tvar changeIframeSrc = function(elem, src){\n\t\t\ttry {\n\t\t\t\telem.contentWindow.location.replace(src);\n\t\t\t} catch(e){\n\t\t\t\telem.src = src;\n\t\t\t}\n\t\t};\n\n\t\tvar handleSources = function(source){\n\t\t\tvar customMedia, parent;\n\n\t\t\tvar sourceSrcset = source[_getAttribute](lazySizesConfig.srcsetAttr);\n\n\t\t\tif( (customMedia = lazySizesConfig.customMedia[source[_getAttribute]('data-media') || source[_getAttribute]('media')]) ){\n\t\t\t\tsource.setAttribute('media', customMedia);\n\t\t\t}\n\n\t\t\tif(sourceSrcset){\n\t\t\t\tsource.setAttribute('srcset', sourceSrcset);\n\t\t\t}\n\n\t\t\t//https://bugzilla.mozilla.org/show_bug.cgi?id=1170572\n\t\t\tif(customMedia){\n\t\t\t\tparent = source.parentNode;\n\t\t\t\tparent.insertBefore(source.cloneNode(), source);\n\t\t\t\tparent.removeChild(source);\n\t\t\t}\n\t\t};\n\n\t\tvar lazyUnveil = rAFIt(function (elem, detail, isAuto, sizes, isImg){\n\t\t\tvar src, srcset, parent, isPicture, event, firesLoad;\n\n\t\t\tif(!(event = triggerEvent(elem, 'lazybeforeunveil', detail)).defaultPrevented){\n\n\t\t\t\tif(sizes){\n\t\t\t\t\tif(isAuto){\n\t\t\t\t\t\taddClass(elem, lazySizesConfig.autosizesClass);\n\t\t\t\t\t} else {\n\t\t\t\t\t\telem.setAttribute('sizes', sizes);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tsrcset = elem[_getAttribute](lazySizesConfig.srcsetAttr);\n\t\t\t\tsrc = elem[_getAttribute](lazySizesConfig.srcAttr);\n\n\t\t\t\tif(isImg) {\n\t\t\t\t\tparent = elem.parentNode;\n\t\t\t\t\tisPicture = parent && regPicture.test(parent.nodeName || '');\n\t\t\t\t}\n\n\t\t\t\tfiresLoad = detail.firesLoad || (('src' in elem) && (srcset || src || isPicture));\n\n\t\t\t\tevent = {target: elem};\n\n\t\t\t\tif(firesLoad){\n\t\t\t\t\taddRemoveLoadEvents(elem, resetPreloading, true);\n\t\t\t\t\tclearTimeout(resetPreloadingTimer);\n\t\t\t\t\tresetPreloadingTimer = setTimeout(resetPreloading, 2500);\n\n\t\t\t\t\taddClass(elem, lazySizesConfig.loadingClass);\n\t\t\t\t\taddRemoveLoadEvents(elem, rafSwitchLoadingClass, true);\n\t\t\t\t}\n\n\t\t\t\tif(isPicture){\n\t\t\t\t\tforEach.call(parent.getElementsByTagName('source'), handleSources);\n\t\t\t\t}\n\n\t\t\t\tif(srcset){\n\t\t\t\t\telem.setAttribute('srcset', srcset);\n\t\t\t\t} else if(src && !isPicture){\n\t\t\t\t\tif(regIframe.test(elem.nodeName)){\n\t\t\t\t\t\tchangeIframeSrc(elem, src);\n\t\t\t\t\t} else {\n\t\t\t\t\t\telem.src = src;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(srcset || isPicture){\n\t\t\t\t\tupdatePolyfill(elem, {src: src});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\trAF(function(){\n\t\t\t\tif(elem._lazyRace){\n\t\t\t\t\tdelete elem._lazyRace;\n\t\t\t\t}\n\t\t\t\tremoveClass(elem, lazySizesConfig.lazyClass);\n\n\t\t\t\tif( !firesLoad || elem.complete ){\n\t\t\t\t\tif(firesLoad){\n\t\t\t\t\t\tresetPreloading(event);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tisLoading--;\n\t\t\t\t\t}\n\t\t\t\t\tswitchLoadingClass(event);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tvar unveilElement = function (elem){\n\t\t\tvar detail;\n\n\t\t\tvar isImg = regImg.test(elem.nodeName);\n\n\t\t\t//allow using sizes=\"auto\", but don't use. it's invalid. Use data-sizes=\"auto\" or a valid value for sizes instead (i.e.: sizes=\"80vw\")\n\t\t\tvar sizes = isImg && (elem[_getAttribute](lazySizesConfig.sizesAttr) || elem[_getAttribute]('sizes'));\n\t\t\tvar isAuto = sizes == 'auto';\n\n\t\t\tif( (isAuto || !isCompleted) && isImg && (elem.src || elem.srcset) && !elem.complete && !hasClass(elem, lazySizesConfig.errorClass)){return;}\n\n\t\t\tdetail = triggerEvent(elem, 'lazyunveilread').detail;\n\n\t\t\tif(isAuto){\n\t\t\t\t autoSizer.updateElem(elem, true, elem.offsetWidth);\n\t\t\t}\n\n\t\t\telem._lazyRace = true;\n\t\t\tisLoading++;\n\n\t\t\tlazyUnveil(elem, detail, isAuto, sizes, isImg);\n\t\t};\n\n\t\tvar onload = function(){\n\t\t\tif(isCompleted){return;}\n\t\t\tif(Date.now() - started < 999){\n\t\t\t\tsetTimeout(onload, 999);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar afterScroll = debounce(function(){\n\t\t\t\tlazySizesConfig.loadMode = 3;\n\t\t\t\tthrottledCheckElements();\n\t\t\t});\n\n\t\t\tisCompleted = true;\n\n\t\t\tlazySizesConfig.loadMode = 3;\n\n\t\t\tthrottledCheckElements();\n\n\t\t\taddEventListener('scroll', function(){\n\t\t\t\tif(lazySizesConfig.loadMode == 3){\n\t\t\t\t\tlazySizesConfig.loadMode = 2;\n\t\t\t\t}\n\t\t\t\tafterScroll();\n\t\t\t}, true);\n\t\t};\n\n\t\treturn {\n\t\t\t_: function(){\n\t\t\t\tstarted = Date.now();\n\n\t\t\t\tlazyloadElems = document.getElementsByClassName(lazySizesConfig.lazyClass);\n\t\t\t\tpreloadElems = document.getElementsByClassName(lazySizesConfig.lazyClass + ' ' + lazySizesConfig.preloadClass);\n\t\t\t\thFac = lazySizesConfig.hFac;\n\n\t\t\t\taddEventListener('scroll', throttledCheckElements, true);\n\n\t\t\t\taddEventListener('resize', throttledCheckElements, true);\n\n\t\t\t\tif(window.MutationObserver){\n\t\t\t\t\tnew MutationObserver( throttledCheckElements ).observe( docElem, {childList: true, subtree: true, attributes: true} );\n\t\t\t\t} else {\n\t\t\t\t\tdocElem[_addEventListener]('DOMNodeInserted', throttledCheckElements, true);\n\t\t\t\t\tdocElem[_addEventListener]('DOMAttrModified', throttledCheckElements, true);\n\t\t\t\t\tsetInterval(throttledCheckElements, 999);\n\t\t\t\t}\n\n\t\t\t\taddEventListener('hashchange', throttledCheckElements, true);\n\n\t\t\t\t//, 'fullscreenchange'\n\t\t\t\t['focus', 'mouseover', 'click', 'load', 'transitionend', 'animationend', 'webkitAnimationEnd'].forEach(function(name){\n\t\t\t\t\tdocument[_addEventListener](name, throttledCheckElements, true);\n\t\t\t\t});\n\n\t\t\t\tif((/d$|^c/.test(document.readyState))){\n\t\t\t\t\tonload();\n\t\t\t\t} else {\n\t\t\t\t\taddEventListener('load', onload);\n\t\t\t\t\tdocument[_addEventListener]('DOMContentLoaded', throttledCheckElements);\n\t\t\t\t\tsetTimeout(onload, 20000);\n\t\t\t\t}\n\n\t\t\t\tif(lazyloadElems.length){\n\t\t\t\t\tcheckElements();\n\t\t\t\t} else {\n\t\t\t\t\tthrottledCheckElements();\n\t\t\t\t}\n\t\t\t},\n\t\t\tcheckElems: throttledCheckElements,\n\t\t\tunveil: unveilElement\n\t\t};\n\t})();\n\n\n\tvar autoSizer = (function(){\n\t\tvar autosizesElems;\n\n\t\tvar sizeElement = rAFIt(function(elem, parent, event, width){\n\t\t\tvar sources, i, len;\n\t\t\telem._lazysizesWidth = width;\n\t\t\twidth += 'px';\n\n\t\t\telem.setAttribute('sizes', width);\n\n\t\t\tif(regPicture.test(parent.nodeName || '')){\n\t\t\t\tsources = parent.getElementsByTagName('source');\n\t\t\t\tfor(i = 0, len = sources.length; i < len; i++){\n\t\t\t\t\tsources[i].setAttribute('sizes', width);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(!event.detail.dataAttr){\n\t\t\t\tupdatePolyfill(elem, event.detail);\n\t\t\t}\n\t\t});\n\t\tvar getSizeElement = function (elem, dataAttr, width){\n\t\t\tvar event;\n\t\t\tvar parent = elem.parentNode;\n\n\t\t\tif(parent){\n\t\t\t\twidth = getWidth(elem, parent, width);\n\t\t\t\tevent = triggerEvent(elem, 'lazybeforesizes', {width: width, dataAttr: !!dataAttr});\n\n\t\t\t\tif(!event.defaultPrevented){\n\t\t\t\t\twidth = event.detail.width;\n\n\t\t\t\t\tif(width && width !== elem._lazysizesWidth){\n\t\t\t\t\t\tsizeElement(elem, parent, event, width);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tvar updateElementsSizes = function(){\n\t\t\tvar i;\n\t\t\tvar len = autosizesElems.length;\n\t\t\tif(len){\n\t\t\t\ti = 0;\n\n\t\t\t\tfor(; i < len; i++){\n\t\t\t\t\tgetSizeElement(autosizesElems[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tvar debouncedUpdateElementsSizes = debounce(updateElementsSizes);\n\n\t\treturn {\n\t\t\t_: function(){\n\t\t\t\tautosizesElems = document.getElementsByClassName(lazySizesConfig.autosizesClass);\n\t\t\t\taddEventListener('resize', debouncedUpdateElementsSizes);\n\t\t\t},\n\t\t\tcheckElems: debouncedUpdateElementsSizes,\n\t\t\tupdateElem: getSizeElement\n\t\t};\n\t})();\n\n\tvar init = function(){\n\t\tif(!init.i){\n\t\t\tinit.i = true;\n\t\t\tautoSizer._();\n\t\t\tloader._();\n\t\t}\n\t};\n\n\t(function(){\n\t\tvar prop;\n\n\t\tvar lazySizesDefaults = {\n\t\t\tlazyClass: 'lazyload',\n\t\t\tloadedClass: 'lazyloaded',\n\t\t\tloadingClass: 'lazyloading',\n\t\t\tpreloadClass: 'lazypreload',\n\t\t\terrorClass: 'lazyerror',\n\t\t\t//strictClass: 'lazystrict',\n\t\t\tautosizesClass: 'lazyautosizes',\n\t\t\tsrcAttr: 'data-src',\n\t\t\tsrcsetAttr: 'data-srcset',\n\t\t\tsizesAttr: 'data-sizes',\n\t\t\t//preloadAfterLoad: false,\n\t\t\tminSize: 40,\n\t\t\tcustomMedia: {},\n\t\t\tinit: true,\n\t\t\texpFactor: 1.5,\n\t\t\thFac: 0.8,\n\t\t\tloadMode: 2\n\t\t};\n\n\t\tlazySizesConfig = window.lazySizesConfig || window.lazysizesConfig || {};\n\n\t\tfor(prop in lazySizesDefaults){\n\t\t\tif(!(prop in lazySizesConfig)){\n\t\t\t\tlazySizesConfig[prop] = lazySizesDefaults[prop];\n\t\t\t}\n\t\t}\n\n\t\twindow.lazySizesConfig = lazySizesConfig;\n\n\t\tsetTimeout(function(){\n\t\t\tif(lazySizesConfig.init){\n\t\t\t\tinit();\n\t\t\t}\n\t\t});\n\t})();\n\n\treturn {\n\t\tcfg: lazySizesConfig,\n\t\tautoSizer: autoSizer,\n\t\tloader: loader,\n\t\tinit: init,\n\t\tuP: updatePolyfill,\n\t\taC: addClass,\n\t\trC: removeClass,\n\t\thC: hasClass,\n\t\tfire: triggerEvent,\n\t\tgW: getWidth,\n\t\trAF: rAF,\n\t};\n}\n));\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(factory((global.THREE = global.THREE || {})));\n}(this, (function (exports) { 'use strict';\n\n\t// Polyfills\n\n\tif ( Number.EPSILON === undefined ) {\n\n\t\tNumber.EPSILON = Math.pow( 2, - 52 );\n\n\t}\n\n\tif ( Number.isInteger === undefined ) {\n\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\n\n\t\tNumber.isInteger = function ( value ) {\n\n\t\t\treturn typeof value === 'number' && isFinite( value ) && Math.floor( value ) === value;\n\n\t\t};\n\n\t}\n\n\t//\n\n\tif ( Math.sign === undefined ) {\n\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n\n\t\tMath.sign = function ( x ) {\n\n\t\t\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;\n\n\t\t};\n\n\t}\n\n\tif ( Function.prototype.name === undefined ) {\n\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\n\n\t\tObject.defineProperty( Function.prototype, 'name', {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.toString().match( /^\\s*function\\s*([^\\(\\s]*)/ )[ 1 ];\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\tif ( Object.assign === undefined ) {\n\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n\n\t\t( function () {\n\n\t\t\tObject.assign = function ( target ) {\n\n\t\t\t\t'use strict';\n\n\t\t\t\tif ( target === undefined || target === null ) {\n\n\t\t\t\t\tthrow new TypeError( 'Cannot convert undefined or null to object' );\n\n\t\t\t\t}\n\n\t\t\t\tvar output = Object( target );\n\n\t\t\t\tfor ( var index = 1; index < arguments.length; index ++ ) {\n\n\t\t\t\t\tvar source = arguments[ index ];\n\n\t\t\t\t\tif ( source !== undefined && source !== null ) {\n\n\t\t\t\t\t\tfor ( var nextKey in source ) {\n\n\t\t\t\t\t\t\tif ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {\n\n\t\t\t\t\t\t\t\toutput[ nextKey ] = source[ nextKey ];\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn output;\n\n\t\t\t};\n\n\t\t} )();\n\n\t}\n\n\t/**\n\t * https://github.com/mrdoob/eventdispatcher.js/\n\t */\n\n\tfunction EventDispatcher() {}\n\n\tObject.assign( EventDispatcher.prototype, {\n\n\t\taddEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) this._listeners = {};\n\n\t\t\tvar listeners = this._listeners;\n\n\t\t\tif ( listeners[ type ] === undefined ) {\n\n\t\t\t\tlisteners[ type ] = [];\n\n\t\t\t}\n\n\t\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\n\n\t\t\t\tlisteners[ type ].push( listener );\n\n\t\t\t}\n\n\t\t},\n\n\t\thasEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) return false;\n\n\t\t\tvar listeners = this._listeners;\n\n\t\t\treturn listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;\n\n\t\t},\n\n\t\tremoveEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) return;\n\n\t\t\tvar listeners = this._listeners;\n\t\t\tvar listenerArray = listeners[ type ];\n\n\t\t\tif ( listenerArray !== undefined ) {\n\n\t\t\t\tvar index = listenerArray.indexOf( listener );\n\n\t\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\t\tlistenerArray.splice( index, 1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tdispatchEvent: function ( event ) {\n\n\t\t\tif ( this._listeners === undefined ) return;\n\n\t\t\tvar listeners = this._listeners;\n\t\t\tvar listenerArray = listeners[ event.type ];\n\n\t\t\tif ( listenerArray !== undefined ) {\n\n\t\t\t\tevent.target = this;\n\n\t\t\t\tvar array = listenerArray.slice( 0 );\n\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\t\tarray[ i ].call( this, event );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tvar REVISION = '86';\n\tvar MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };\n\tvar CullFaceNone = 0;\n\tvar CullFaceBack = 1;\n\tvar CullFaceFront = 2;\n\tvar CullFaceFrontBack = 3;\n\tvar FrontFaceDirectionCW = 0;\n\tvar FrontFaceDirectionCCW = 1;\n\tvar BasicShadowMap = 0;\n\tvar PCFShadowMap = 1;\n\tvar PCFSoftShadowMap = 2;\n\tvar FrontSide = 0;\n\tvar BackSide = 1;\n\tvar DoubleSide = 2;\n\tvar FlatShading = 1;\n\tvar SmoothShading = 2;\n\tvar NoColors = 0;\n\tvar FaceColors = 1;\n\tvar VertexColors = 2;\n\tvar NoBlending = 0;\n\tvar NormalBlending = 1;\n\tvar AdditiveBlending = 2;\n\tvar SubtractiveBlending = 3;\n\tvar MultiplyBlending = 4;\n\tvar CustomBlending = 5;\n\tvar AddEquation = 100;\n\tvar SubtractEquation = 101;\n\tvar ReverseSubtractEquation = 102;\n\tvar MinEquation = 103;\n\tvar MaxEquation = 104;\n\tvar ZeroFactor = 200;\n\tvar OneFactor = 201;\n\tvar SrcColorFactor = 202;\n\tvar OneMinusSrcColorFactor = 203;\n\tvar SrcAlphaFactor = 204;\n\tvar OneMinusSrcAlphaFactor = 205;\n\tvar DstAlphaFactor = 206;\n\tvar OneMinusDstAlphaFactor = 207;\n\tvar DstColorFactor = 208;\n\tvar OneMinusDstColorFactor = 209;\n\tvar SrcAlphaSaturateFactor = 210;\n\tvar NeverDepth = 0;\n\tvar AlwaysDepth = 1;\n\tvar LessDepth = 2;\n\tvar LessEqualDepth = 3;\n\tvar EqualDepth = 4;\n\tvar GreaterEqualDepth = 5;\n\tvar GreaterDepth = 6;\n\tvar NotEqualDepth = 7;\n\tvar MultiplyOperation = 0;\n\tvar MixOperation = 1;\n\tvar AddOperation = 2;\n\tvar NoToneMapping = 0;\n\tvar LinearToneMapping = 1;\n\tvar ReinhardToneMapping = 2;\n\tvar Uncharted2ToneMapping = 3;\n\tvar CineonToneMapping = 4;\n\tvar UVMapping = 300;\n\tvar CubeReflectionMapping = 301;\n\tvar CubeRefractionMapping = 302;\n\tvar EquirectangularReflectionMapping = 303;\n\tvar EquirectangularRefractionMapping = 304;\n\tvar SphericalReflectionMapping = 305;\n\tvar CubeUVReflectionMapping = 306;\n\tvar CubeUVRefractionMapping = 307;\n\tvar RepeatWrapping = 1000;\n\tvar ClampToEdgeWrapping = 1001;\n\tvar MirroredRepeatWrapping = 1002;\n\tvar NearestFilter = 1003;\n\tvar NearestMipMapNearestFilter = 1004;\n\tvar NearestMipMapLinearFilter = 1005;\n\tvar LinearFilter = 1006;\n\tvar LinearMipMapNearestFilter = 1007;\n\tvar LinearMipMapLinearFilter = 1008;\n\tvar UnsignedByteType = 1009;\n\tvar ByteType = 1010;\n\tvar ShortType = 1011;\n\tvar UnsignedShortType = 1012;\n\tvar IntType = 1013;\n\tvar UnsignedIntType = 1014;\n\tvar FloatType = 1015;\n\tvar HalfFloatType = 1016;\n\tvar UnsignedShort4444Type = 1017;\n\tvar UnsignedShort5551Type = 1018;\n\tvar UnsignedShort565Type = 1019;\n\tvar UnsignedInt248Type = 1020;\n\tvar AlphaFormat = 1021;\n\tvar RGBFormat = 1022;\n\tvar RGBAFormat = 1023;\n\tvar LuminanceFormat = 1024;\n\tvar LuminanceAlphaFormat = 1025;\n\tvar RGBEFormat = RGBAFormat;\n\tvar DepthFormat = 1026;\n\tvar DepthStencilFormat = 1027;\n\tvar RGB_S3TC_DXT1_Format = 2001;\n\tvar RGBA_S3TC_DXT1_Format = 2002;\n\tvar RGBA_S3TC_DXT3_Format = 2003;\n\tvar RGBA_S3TC_DXT5_Format = 2004;\n\tvar RGB_PVRTC_4BPPV1_Format = 2100;\n\tvar RGB_PVRTC_2BPPV1_Format = 2101;\n\tvar RGBA_PVRTC_4BPPV1_Format = 2102;\n\tvar RGBA_PVRTC_2BPPV1_Format = 2103;\n\tvar RGB_ETC1_Format = 2151;\n\tvar LoopOnce = 2200;\n\tvar LoopRepeat = 2201;\n\tvar LoopPingPong = 2202;\n\tvar InterpolateDiscrete = 2300;\n\tvar InterpolateLinear = 2301;\n\tvar InterpolateSmooth = 2302;\n\tvar ZeroCurvatureEnding = 2400;\n\tvar ZeroSlopeEnding = 2401;\n\tvar WrapAroundEnding = 2402;\n\tvar TrianglesDrawMode = 0;\n\tvar TriangleStripDrawMode = 1;\n\tvar TriangleFanDrawMode = 2;\n\tvar LinearEncoding = 3000;\n\tvar sRGBEncoding = 3001;\n\tvar GammaEncoding = 3007;\n\tvar RGBEEncoding = 3002;\n\tvar LogLuvEncoding = 3003;\n\tvar RGBM7Encoding = 3004;\n\tvar RGBM16Encoding = 3005;\n\tvar RGBDEncoding = 3006;\n\tvar BasicDepthPacking = 3200;\n\tvar RGBADepthPacking = 3201;\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _Math = {\n\n\t\tDEG2RAD: Math.PI / 180,\n\t\tRAD2DEG: 180 / Math.PI,\n\n\t\tgenerateUUID: function () {\n\n\t\t\t// http://www.broofa.com/Tools/Math.uuid.htm\n\n\t\t\tvar chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split( '' );\n\t\t\tvar uuid = new Array( 36 );\n\t\t\tvar rnd = 0, r;\n\n\t\t\treturn function generateUUID() {\n\n\t\t\t\tfor ( var i = 0; i < 36; i ++ ) {\n\n\t\t\t\t\tif ( i === 8 || i === 13 || i === 18 || i === 23 ) {\n\n\t\t\t\t\t\tuuid[ i ] = '-';\n\n\t\t\t\t\t} else if ( i === 14 ) {\n\n\t\t\t\t\t\tuuid[ i ] = '4';\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( rnd <= 0x02 ) rnd = 0x2000000 + ( Math.random() * 0x1000000 ) | 0;\n\t\t\t\t\t\tr = rnd & 0xf;\n\t\t\t\t\t\trnd = rnd >> 4;\n\t\t\t\t\t\tuuid[ i ] = chars[ ( i === 19 ) ? ( r & 0x3 ) | 0x8 : r ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn uuid.join( '' );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclamp: function ( value, min, max ) {\n\n\t\t\treturn Math.max( min, Math.min( max, value ) );\n\n\t\t},\n\n\t\t// compute euclidian modulo of m % n\n\t\t// https://en.wikipedia.org/wiki/Modulo_operation\n\n\t\teuclideanModulo: function ( n, m ) {\n\n\t\t\treturn ( ( n % m ) + m ) % m;\n\n\t\t},\n\n\t\t// Linear mapping from range <a1, a2> to range <b1, b2>\n\n\t\tmapLinear: function ( x, a1, a2, b1, b2 ) {\n\n\t\t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\n\t\t},\n\n\t\t// https://en.wikipedia.org/wiki/Linear_interpolation\n\n\t\tlerp: function ( x, y, t ) {\n\n\t\t\treturn ( 1 - t ) * x + t * y;\n\n\t\t},\n\n\t\t// http://en.wikipedia.org/wiki/Smoothstep\n\n\t\tsmoothstep: function ( x, min, max ) {\n\n\t\t\tif ( x <= min ) return 0;\n\t\t\tif ( x >= max ) return 1;\n\n\t\t\tx = ( x - min ) / ( max - min );\n\n\t\t\treturn x * x * ( 3 - 2 * x );\n\n\t\t},\n\n\t\tsmootherstep: function ( x, min, max ) {\n\n\t\t\tif ( x <= min ) return 0;\n\t\t\tif ( x >= max ) return 1;\n\n\t\t\tx = ( x - min ) / ( max - min );\n\n\t\t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\n\t\t},\n\n\t\t// Random integer from <low, high> interval\n\n\t\trandInt: function ( low, high ) {\n\n\t\t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\n\t\t},\n\n\t\t// Random float from <low, high> interval\n\n\t\trandFloat: function ( low, high ) {\n\n\t\t\treturn low + Math.random() * ( high - low );\n\n\t\t},\n\n\t\t// Random float from <-range/2, range/2> interval\n\n\t\trandFloatSpread: function ( range ) {\n\n\t\t\treturn range * ( 0.5 - Math.random() );\n\n\t\t},\n\n\t\tdegToRad: function ( degrees ) {\n\n\t\t\treturn degrees * _Math.DEG2RAD;\n\n\t\t},\n\n\t\tradToDeg: function ( radians ) {\n\n\t\t\treturn radians * _Math.RAD2DEG;\n\n\t\t},\n\n\t\tisPowerOfTwo: function ( value ) {\n\n\t\t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n\t\t},\n\n\t\tnearestPowerOfTwo: function ( value ) {\n\n\t\t\treturn Math.pow( 2, Math.round( Math.log( value ) / Math.LN2 ) );\n\n\t\t},\n\n\t\tnextPowerOfTwo: function ( value ) {\n\n\t\t\tvalue --;\n\t\t\tvalue |= value >> 1;\n\t\t\tvalue |= value >> 2;\n\t\t\tvalue |= value >> 4;\n\t\t\tvalue |= value >> 8;\n\t\t\tvalue |= value >> 16;\n\t\t\tvalue ++;\n\n\t\t\treturn value;\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author egraether / http://egraether.com/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t */\n\n\tfunction Vector2( x, y ) {\n\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\n\t}\n\n\tObject.defineProperties( Vector2.prototype, {\n\n\t\t\"width\" : {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.x;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.x = value;\n\n\t\t\t}\n\n\t\t},\n\n\t\t\"height\" : {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.y;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.y = value;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector2.prototype, {\n\n\t\tisVector2: true,\n\n\t\tset: function ( x, y ) {\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( x ) {\n\n\t\t\tthis.x = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( y ) {\n\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponent: function ( index, value ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetComponent: function ( index ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.x, this.y );\n\n\t\t},\n\n\t\tcopy: function ( v ) {\n\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledVector: function ( v, s ) {\n\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubScalar: function ( s ) {\n\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( v ) {\n\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( scalar ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivide: function ( v ) {\n\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivideScalar: function ( scalar ) {\n\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t\t},\n\n\t\tmin: function ( v ) {\n\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmax: function ( v ) {\n\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclamp: function ( min, max ) {\n\n\t\t\t// assumes min < max, componentwise\n\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampScalar: function () {\n\n\t\t\tvar min = new Vector2();\n\t\t\tvar max = new Vector2();\n\n\t\t\treturn function clampScalar( minVal, maxVal ) {\n\n\t\t\t\tmin.set( minVal, minVal );\n\t\t\t\tmax.set( maxVal, maxVal );\n\n\t\t\t\treturn this.clamp( min, max );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclampLength: function ( min, max ) {\n\n\t\t\tvar length = this.length();\n\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t\t},\n\n\t\tfloor: function () {\n\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tceil: function () {\n\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tround: function () {\n\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\troundToZero: function () {\n\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this.x * v.x + this.y * v.y;\n\n\t\t},\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this.x * this.x + this.y * this.y;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\n\t\t},\n\n\t\tlengthManhattan: function() {\n\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\treturn this.divideScalar( this.length() || 1 );\n\n\t\t},\n\n\t\tangle: function () {\n\n\t\t\t// computes the angle in radians with respect to the positive x-axis\n\n\t\t\tvar angle = Math.atan2( this.y, this.x );\n\n\t\t\tif ( angle < 0 ) angle += 2 * Math.PI;\n\n\t\t\treturn angle;\n\n\t\t},\n\n\t\tdistanceTo: function ( v ) {\n\n\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t\t},\n\n\t\tdistanceToSquared: function ( v ) {\n\n\t\t\tvar dx = this.x - v.x, dy = this.y - v.y;\n\t\t\treturn dx * dx + dy * dy;\n\n\t\t},\n\n\t\tdistanceToManhattan: function ( v ) {\n\n\t\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\n\n\t\t},\n\n\t\tsetLength: function ( length ) {\n\n\t\t\treturn this.normalize().multiplyScalar( length );\n\n\t\t},\n\n\t\tlerp: function ( v, alpha ) {\n\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t\t},\n\n\t\tequals: function ( v ) {\n\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );\n\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX( index );\n\t\t\tthis.y = attribute.getY( index );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateAround: function ( center, angle ) {\n\n\t\t\tvar c = Math.cos( angle ), s = Math.sin( angle );\n\n\t\t\tvar x = this.x - center.x;\n\t\t\tvar y = this.y - center.y;\n\n\t\t\tthis.x = x * c - y * s + center.x;\n\t\t\tthis.y = x * s + y * c + center.y;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author szimek / https://github.com/szimek/\n\t */\n\n\tvar textureId = 0;\n\n\tfunction Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\t\tObject.defineProperty( this, 'id', { value: textureId ++ } );\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.name = '';\n\n\t\tthis.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;\n\t\tthis.mipmaps = [];\n\n\t\tthis.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;\n\n\t\tthis.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;\n\t\tthis.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearMipMapLinearFilter;\n\n\t\tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\n\n\t\tthis.format = format !== undefined ? format : RGBAFormat;\n\t\tthis.type = type !== undefined ? type : UnsignedByteType;\n\n\t\tthis.offset = new Vector2( 0, 0 );\n\t\tthis.repeat = new Vector2( 1, 1 );\n\n\t\tthis.generateMipmaps = true;\n\t\tthis.premultiplyAlpha = false;\n\t\tthis.flipY = true;\n\t\tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\n\t\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n\t\t//\n\t\t// Also changing the encoding after already used by a Material will not automatically make the Material\n\t\t// update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\t\tthis.encoding = encoding !== undefined ? encoding : LinearEncoding;\n\n\t\tthis.version = 0;\n\t\tthis.onUpdate = null;\n\n\t}\n\n\tTexture.DEFAULT_IMAGE = undefined;\n\tTexture.DEFAULT_MAPPING = UVMapping;\n\n\tObject.defineProperty( Texture.prototype, \"needsUpdate\", {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) this.version ++;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Texture.prototype, EventDispatcher.prototype, {\n\n\t\tconstructor: Texture,\n\n\t\tisTexture: true,\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.name = source.name;\n\n\t\t\tthis.image = source.image;\n\t\t\tthis.mipmaps = source.mipmaps.slice( 0 );\n\n\t\t\tthis.mapping = source.mapping;\n\n\t\t\tthis.wrapS = source.wrapS;\n\t\t\tthis.wrapT = source.wrapT;\n\n\t\t\tthis.magFilter = source.magFilter;\n\t\t\tthis.minFilter = source.minFilter;\n\n\t\t\tthis.anisotropy = source.anisotropy;\n\n\t\t\tthis.format = source.format;\n\t\t\tthis.type = source.type;\n\n\t\t\tthis.offset.copy( source.offset );\n\t\t\tthis.repeat.copy( source.repeat );\n\n\t\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\t\tthis.flipY = source.flipY;\n\t\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\t\tthis.encoding = source.encoding;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tif ( meta.textures[ this.uuid ] !== undefined ) {\n\n\t\t\t\treturn meta.textures[ this.uuid ];\n\n\t\t\t}\n\n\t\t\tfunction getDataURL( image ) {\n\n\t\t\t\tvar canvas;\n\n\t\t\t\tif ( image.toDataURL !== undefined ) {\n\n\t\t\t\t\tcanvas = image;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcanvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\t\t\tcanvas.width = image.width;\n\t\t\t\t\tcanvas.height = image.height;\n\n\t\t\t\t\tcanvas.getContext( '2d' ).drawImage( image, 0, 0, image.width, image.height );\n\n\t\t\t\t}\n\n\t\t\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\n\n\t\t\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn canvas.toDataURL( 'image/png' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar output = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Texture',\n\t\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t\t},\n\n\t\t\t\tuuid: this.uuid,\n\t\t\t\tname: this.name,\n\n\t\t\t\tmapping: this.mapping,\n\n\t\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\n\t\t\t\toffset: [ this.offset.x, this.offset.y ],\n\t\t\t\twrap: [ this.wrapS, this.wrapT ],\n\n\t\t\t\tminFilter: this.minFilter,\n\t\t\t\tmagFilter: this.magFilter,\n\t\t\t\tanisotropy: this.anisotropy,\n\n\t\t\t\tflipY: this.flipY\n\t\t\t};\n\n\t\t\tif ( this.image !== undefined ) {\n\n\t\t\t\t// TODO: Move to THREE.Image\n\n\t\t\t\tvar image = this.image;\n\n\t\t\t\tif ( image.uuid === undefined ) {\n\n\t\t\t\t\timage.uuid = _Math.generateUUID(); // UGH\n\n\t\t\t\t}\n\n\t\t\t\tif ( meta.images[ image.uuid ] === undefined ) {\n\n\t\t\t\t\tmeta.images[ image.uuid ] = {\n\t\t\t\t\t\tuuid: image.uuid,\n\t\t\t\t\t\turl: getDataURL( image )\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\toutput.image = image.uuid;\n\n\t\t\t}\n\n\t\t\tmeta.textures[ this.uuid ] = output;\n\n\t\t\treturn output;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t},\n\n\t\ttransformUv: function ( uv ) {\n\n\t\t\tif ( this.mapping !== UVMapping ) return;\n\n\t\t\tuv.multiply( this.repeat );\n\t\t\tuv.add( this.offset );\n\n\t\t\tif ( uv.x < 0 || uv.x > 1 ) {\n\n\t\t\t\tswitch ( this.wrapS ) {\n\n\t\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( uv.y < 0 || uv.y > 1 ) {\n\n\t\t\t\tswitch ( this.wrapT ) {\n\n\t\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.flipY ) {\n\n\t\t\t\tuv.y = 1 - uv.y;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author egraether / http://egraether.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Vector4( x, y, z, w ) {\n\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\t\tthis.z = z || 0;\n\t\tthis.w = ( w !== undefined ) ? w : 1;\n\n\t}\n\n\tObject.assign( Vector4.prototype, {\n\n\t\tisVector4: true,\n\n\t\tset: function ( x, y, z, w ) {\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\tthis.w = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\t\t\tthis.w = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( x ) {\n\n\t\t\tthis.x = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( y ) {\n\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetZ: function ( z ) {\n\n\t\t\tthis.z = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetW: function ( w ) {\n\n\t\t\tthis.w = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponent: function ( index, value ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tcase 2: this.z = value; break;\n\t\t\t\tcase 3: this.w = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetComponent: function ( index ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tcase 2: return this.z;\n\t\t\t\tcase 3: return this.w;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\n\n\t\t},\n\n\t\tcopy: function ( v ) {\n\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\t\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\t\t\tthis.w += v.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\t\t\tthis.w += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\t\t\tthis.w = a.w + b.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledVector: function ( v, s ) {\n\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\t\t\tthis.w += v.w * s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\t\t\tthis.w -= v.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubScalar: function ( s ) {\n\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\t\t\tthis.w -= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\t\t\tthis.w = a.w - b.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( scalar ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\t\t\tthis.w *= scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z, w = this.w;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n\t\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivideScalar: function ( scalar ) {\n\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t\t},\n\n\t\tsetAxisAngleFromQuaternion: function ( q ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\n\t\t\t// q is assumed to be normalized\n\n\t\t\tthis.w = 2 * Math.acos( q.w );\n\n\t\t\tvar s = Math.sqrt( 1 - q.w * q.w );\n\n\t\t\tif ( s < 0.0001 ) {\n\n\t\t\t\t this.x = 1;\n\t\t\t\t this.y = 0;\n\t\t\t\t this.z = 0;\n\n\t\t\t} else {\n\n\t\t\t\t this.x = q.x / s;\n\t\t\t\t this.y = q.y / s;\n\t\t\t\t this.z = q.z / s;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetAxisAngleFromRotationMatrix: function ( m ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar angle, x, y, z,\t\t// variables for result\n\t\t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\n\t\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\n\t\t\t\tte = m.elements,\n\n\t\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\n\t\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\n\t\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\n\t\t\t\t// singularity found\n\t\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t\t// in leading diagonal and zero in other terms\n\n\t\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\n\t\t\t\t\t// this singularity is identity matrix so angle = 0\n\n\t\t\t\t\tthis.set( 1, 0, 0, 0 );\n\n\t\t\t\t\treturn this; // zero angle, arbitrary axis\n\n\t\t\t\t}\n\n\t\t\t\t// otherwise this singularity is angle = 180\n\n\t\t\t\tangle = Math.PI;\n\n\t\t\t\tvar xx = ( m11 + 1 ) / 2;\n\t\t\t\tvar yy = ( m22 + 1 ) / 2;\n\t\t\t\tvar zz = ( m33 + 1 ) / 2;\n\t\t\t\tvar xy = ( m12 + m21 ) / 4;\n\t\t\t\tvar xz = ( m13 + m31 ) / 4;\n\t\t\t\tvar yz = ( m23 + m32 ) / 4;\n\n\t\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\n\n\t\t\t\t\t// m11 is the largest diagonal term\n\n\t\t\t\t\tif ( xx < epsilon ) {\n\n\t\t\t\t\t\tx = 0;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tx = Math.sqrt( xx );\n\t\t\t\t\t\ty = xy / x;\n\t\t\t\t\t\tz = xz / x;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( yy > zz ) {\n\n\t\t\t\t\t// m22 is the largest diagonal term\n\n\t\t\t\t\tif ( yy < epsilon ) {\n\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0;\n\t\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ty = Math.sqrt( yy );\n\t\t\t\t\t\tx = xy / y;\n\t\t\t\t\t\tz = yz / y;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// m33 is the largest diagonal term so base result on this\n\n\t\t\t\t\tif ( zz < epsilon ) {\n\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tz = Math.sqrt( zz );\n\t\t\t\t\t\tx = xz / z;\n\t\t\t\t\t\ty = yz / z;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.set( x, y, z, angle );\n\n\t\t\t\treturn this; // return 180 deg rotation\n\n\t\t\t}\n\n\t\t\t// as we have reached here there are no singularities so we can handle normally\n\n\t\t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\n\t\t\t                   ( m13 - m31 ) * ( m13 - m31 ) +\n\t\t\t                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\n\t\t\tif ( Math.abs( s ) < 0.001 ) s = 1;\n\n\t\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\t\tthis.x = ( m32 - m23 ) / s;\n\t\t\tthis.y = ( m13 - m31 ) / s;\n\t\t\tthis.z = ( m21 - m12 ) / s;\n\t\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmin: function ( v ) {\n\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\t\t\tthis.z = Math.min( this.z, v.z );\n\t\t\tthis.w = Math.min( this.w, v.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmax: function ( v ) {\n\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\t\t\tthis.z = Math.max( this.z, v.z );\n\t\t\tthis.w = Math.max( this.w, v.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclamp: function ( min, max ) {\n\n\t\t\t// assumes min < max, componentwise\n\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\t\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampScalar: function () {\n\n\t\t\tvar min, max;\n\n\t\t\treturn function clampScalar( minVal, maxVal ) {\n\n\t\t\t\tif ( min === undefined ) {\n\n\t\t\t\t\tmin = new Vector4();\n\t\t\t\t\tmax = new Vector4();\n\n\t\t\t\t}\n\n\t\t\t\tmin.set( minVal, minVal, minVal, minVal );\n\t\t\t\tmax.set( maxVal, maxVal, maxVal, maxVal );\n\n\t\t\t\treturn this.clamp( min, max );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclampLength: function ( min, max ) {\n\n\t\t\tvar length = this.length();\n\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t\t},\n\n\t\tfloor: function () {\n\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\t\t\tthis.z = Math.floor( this.z );\n\t\t\tthis.w = Math.floor( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tceil: function () {\n\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\t\t\tthis.z = Math.ceil( this.z );\n\t\t\tthis.w = Math.ceil( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tround: function () {\n\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\t\t\tthis.z = Math.round( this.z );\n\t\t\tthis.w = Math.round( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\troundToZero: function () {\n\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\t\t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\t\t\tthis.z = - this.z;\n\t\t\tthis.w = - this.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\n\t\t},\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\n\t\t},\n\n\t\tlengthManhattan: function () {\n\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\treturn this.divideScalar( this.length() || 1 );\n\n\t\t},\n\n\t\tsetLength: function ( length ) {\n\n\t\t\treturn this.normalize().multiplyScalar( length );\n\n\t\t},\n\n\t\tlerp: function ( v, alpha ) {\n\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\t\tthis.z += ( v.z - this.z ) * alpha;\n\t\t\tthis.w += ( v.w - this.w ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t\t},\n\n\t\tequals: function ( v ) {\n\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\t\t\tthis.z = array[ offset + 2 ];\n\t\t\tthis.w = array[ offset + 3 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\t\t\tarray[ offset + 2 ] = this.z;\n\t\t\tarray[ offset + 3 ] = this.w;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );\n\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX( index );\n\t\t\tthis.y = attribute.getY( index );\n\t\t\tthis.z = attribute.getZ( index );\n\t\t\tthis.w = attribute.getW( index );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author szimek / https://github.com/szimek/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author Marius Kintel / https://github.com/kintel\n\t */\n\n\t/*\n\t In options, we can specify:\n\t * Texture parameters for an auto-generated target texture\n\t * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n\t*/\n\tfunction WebGLRenderTarget( width, height, options ) {\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\n\t\tthis.scissor = new Vector4( 0, 0, width, height );\n\t\tthis.scissorTest = false;\n\n\t\tthis.viewport = new Vector4( 0, 0, width, height );\n\n\t\toptions = options || {};\n\n\t\tif ( options.minFilter === undefined ) options.minFilter = LinearFilter;\n\n\t\tthis.texture = new Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n\n\t\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\t\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\n\t\tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\n\t}\n\n\tObject.assign( WebGLRenderTarget.prototype, EventDispatcher.prototype, {\n\n\t\tisWebGLRenderTarget: true,\n\n\t\tsetSize: function ( width, height ) {\n\n\t\t\tif ( this.width !== width || this.height !== height ) {\n\n\t\t\t\tthis.width = width;\n\t\t\t\tthis.height = height;\n\n\t\t\t\tthis.dispose();\n\n\t\t\t}\n\n\t\t\tthis.viewport.set( 0, 0, width, height );\n\t\t\tthis.scissor.set( 0, 0, width, height );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\n\t\t\tthis.viewport.copy( source.viewport );\n\n\t\t\tthis.texture = source.texture.clone();\n\n\t\t\tthis.depthBuffer = source.depthBuffer;\n\t\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\t\tthis.depthTexture = source.depthTexture;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com\n\t */\n\n\tfunction WebGLRenderTargetCube( width, height, options ) {\n\n\t\tWebGLRenderTarget.call( this, width, height, options );\n\n\t\tthis.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5\n\t\tthis.activeMipMapLevel = 0;\n\n\t}\n\n\tWebGLRenderTargetCube.prototype = Object.create( WebGLRenderTarget.prototype );\n\tWebGLRenderTargetCube.prototype.constructor = WebGLRenderTargetCube;\n\n\tWebGLRenderTargetCube.prototype.isWebGLRenderTargetCube = true;\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Quaternion( x, y, z, w ) {\n\n\t\tthis._x = x || 0;\n\t\tthis._y = y || 0;\n\t\tthis._z = z || 0;\n\t\tthis._w = ( w !== undefined ) ? w : 1;\n\n\t}\n\n\tObject.assign( Quaternion, {\n\n\t\tslerp: function ( qa, qb, qm, t ) {\n\n\t\t\treturn qm.copy( qa ).slerp( qb, t );\n\n\t\t},\n\n\t\tslerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\n\t\t\t// fuzz-free, array-based Quaternion SLERP operation\n\n\t\t\tvar x0 = src0[ srcOffset0 + 0 ],\n\t\t\t\ty0 = src0[ srcOffset0 + 1 ],\n\t\t\t\tz0 = src0[ srcOffset0 + 2 ],\n\t\t\t\tw0 = src0[ srcOffset0 + 3 ],\n\n\t\t\t\tx1 = src1[ srcOffset1 + 0 ],\n\t\t\t\ty1 = src1[ srcOffset1 + 1 ],\n\t\t\t\tz1 = src1[ srcOffset1 + 2 ],\n\t\t\t\tw1 = src1[ srcOffset1 + 3 ];\n\n\t\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\n\t\t\t\tvar s = 1 - t,\n\n\t\t\t\t\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\n\t\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n\t\t\t\t\tsqrSin = 1 - cos * cos;\n\n\t\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n\t\t\t\tif ( sqrSin > Number.EPSILON ) {\n\n\t\t\t\t\tvar sin = Math.sqrt( sqrSin ),\n\t\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\n\t\t\t\t\ts = Math.sin( s * len ) / sin;\n\t\t\t\t\tt = Math.sin( t * len ) / sin;\n\n\t\t\t\t}\n\n\t\t\t\tvar tDir = t * dir;\n\n\t\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\t\tw0 = w0 * s + w1 * tDir;\n\n\t\t\t\t// Normalize in case we just did a lerp:\n\t\t\t\tif ( s === 1 - t ) {\n\n\t\t\t\t\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\n\t\t\t\t\tx0 *= f;\n\t\t\t\t\ty0 *= f;\n\t\t\t\t\tz0 *= f;\n\t\t\t\t\tw0 *= f;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tdst[ dstOffset ] = x0;\n\t\t\tdst[ dstOffset + 1 ] = y0;\n\t\t\tdst[ dstOffset + 2 ] = z0;\n\t\t\tdst[ dstOffset + 3 ] = w0;\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( Quaternion.prototype, {\n\n\t\tx: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._x;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._x = value;\n\t\t\t\tthis.onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\ty: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._y;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._y = value;\n\t\t\t\tthis.onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\tz: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._z;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._z = value;\n\t\t\t\tthis.onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\tw: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._w;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._w = value;\n\t\t\t\tthis.onChangeCallback();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Quaternion.prototype, {\n\n\t\tset: function ( x, y, z, w ) {\n\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._w = w;\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\n\t\t},\n\n\t\tcopy: function ( quaternion ) {\n\n\t\t\tthis._x = quaternion.x;\n\t\t\tthis._y = quaternion.y;\n\t\t\tthis._z = quaternion.z;\n\t\t\tthis._w = quaternion.w;\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromEuler: function ( euler, update ) {\n\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\tvar x = euler._x, y = euler._y, z = euler._z, order = euler.order;\n\n\t\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t\t//\tcontent/SpinCalc.m\n\n\t\t\tvar cos = Math.cos;\n\t\t\tvar sin = Math.sin;\n\n\t\t\tvar c1 = cos( x / 2 );\n\t\t\tvar c2 = cos( y / 2 );\n\t\t\tvar c3 = cos( z / 2 );\n\n\t\t\tvar s1 = sin( x / 2 );\n\t\t\tvar s2 = sin( y / 2 );\n\t\t\tvar s3 = sin( z / 2 );\n\n\t\t\tif ( order === 'XYZ' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'YXZ' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'YZX' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'XZY' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t\t}\n\n\t\t\tif ( update !== false ) this.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromAxisAngle: function ( axis, angle ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n\t\t\t// assumes axis is normalized\n\n\t\t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n\t\t\tthis._x = axis.x * s;\n\t\t\tthis._y = axis.y * s;\n\t\t\tthis._z = axis.z * s;\n\t\t\tthis._w = Math.cos( halfAngle );\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromRotationMatrix: function ( m ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar te = m.elements,\n\n\t\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n\t\t\t\ttrace = m11 + m22 + m33,\n\t\t\t\ts;\n\n\t\t\tif ( trace > 0 ) {\n\n\t\t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\n\n\t\t\t\tthis._w = 0.25 / s;\n\t\t\t\tthis._x = ( m32 - m23 ) * s;\n\t\t\t\tthis._y = ( m13 - m31 ) * s;\n\t\t\t\tthis._z = ( m21 - m12 ) * s;\n\n\t\t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n\t\t\t\tthis._w = ( m32 - m23 ) / s;\n\t\t\t\tthis._x = 0.25 * s;\n\t\t\t\tthis._y = ( m12 + m21 ) / s;\n\t\t\t\tthis._z = ( m13 + m31 ) / s;\n\n\t\t\t} else if ( m22 > m33 ) {\n\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n\t\t\t\tthis._w = ( m13 - m31 ) / s;\n\t\t\t\tthis._x = ( m12 + m21 ) / s;\n\t\t\t\tthis._y = 0.25 * s;\n\t\t\t\tthis._z = ( m23 + m32 ) / s;\n\n\t\t\t} else {\n\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n\t\t\t\tthis._w = ( m21 - m12 ) / s;\n\t\t\t\tthis._x = ( m13 + m31 ) / s;\n\t\t\t\tthis._y = ( m23 + m32 ) / s;\n\t\t\t\tthis._z = 0.25 * s;\n\n\t\t\t}\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromUnitVectors: function () {\n\n\t\t\t// assumes direction vectors vFrom and vTo are normalized\n\n\t\t\tvar v1 = new Vector3();\n\t\t\tvar r;\n\n\t\t\tvar EPS = 0.000001;\n\n\t\t\treturn function setFromUnitVectors( vFrom, vTo ) {\n\n\t\t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\n\t\t\t\tr = vFrom.dot( vTo ) + 1;\n\n\t\t\t\tif ( r < EPS ) {\n\n\t\t\t\t\tr = 0;\n\n\t\t\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n\t\t\t\t\t\tv1.set( - vFrom.y, vFrom.x, 0 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tv1.set( 0, - vFrom.z, vFrom.y );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tv1.crossVectors( vFrom, vTo );\n\n\t\t\t\t}\n\n\t\t\t\tthis._x = v1.x;\n\t\t\t\tthis._y = v1.y;\n\t\t\t\tthis._z = v1.z;\n\t\t\t\tthis._w = r;\n\n\t\t\t\treturn this.normalize();\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tinverse: function () {\n\n\t\t\treturn this.conjugate().normalize();\n\n\t\t},\n\n\t\tconjugate: function () {\n\n\t\t\tthis._x *= - 1;\n\t\t\tthis._y *= - 1;\n\t\t\tthis._z *= - 1;\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n\t\t},\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\tvar l = this.length();\n\n\t\t\tif ( l === 0 ) {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = 0;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = 1;\n\n\t\t\t} else {\n\n\t\t\t\tl = 1 / l;\n\n\t\t\t\tthis._x = this._x * l;\n\t\t\t\tthis._y = this._y * l;\n\t\t\t\tthis._z = this._z * l;\n\t\t\t\tthis._w = this._w * l;\n\n\t\t\t}\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( q, p ) {\n\n\t\t\tif ( p !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\n\t\t\t\treturn this.multiplyQuaternions( q, p );\n\n\t\t\t}\n\n\t\t\treturn this.multiplyQuaternions( this, q );\n\n\t\t},\n\n\t\tpremultiply: function ( q ) {\n\n\t\t\treturn this.multiplyQuaternions( q, this );\n\n\t\t},\n\n\t\tmultiplyQuaternions: function ( a, b ) {\n\n\t\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n\t\t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t\t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n\t\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tslerp: function ( qb, t ) {\n\n\t\t\tif ( t === 0 ) return this;\n\t\t\tif ( t === 1 ) return this.copy( qb );\n\n\t\t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\n\n\t\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\t\tif ( cosHalfTheta < 0 ) {\n\n\t\t\t\tthis._w = - qb._w;\n\t\t\t\tthis._x = - qb._x;\n\t\t\t\tthis._y = - qb._y;\n\t\t\t\tthis._z = - qb._z;\n\n\t\t\t\tcosHalfTheta = - cosHalfTheta;\n\n\t\t\t} else {\n\n\t\t\t\tthis.copy( qb );\n\n\t\t\t}\n\n\t\t\tif ( cosHalfTheta >= 1.0 ) {\n\n\t\t\t\tthis._w = w;\n\t\t\t\tthis._x = x;\n\t\t\t\tthis._y = y;\n\t\t\t\tthis._z = z;\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );\n\n\t\t\tif ( Math.abs( sinHalfTheta ) < 0.001 ) {\n\n\t\t\t\tthis._w = 0.5 * ( w + this._w );\n\t\t\t\tthis._x = 0.5 * ( x + this._x );\n\t\t\t\tthis._y = 0.5 * ( y + this._y );\n\t\t\t\tthis._z = 0.5 * ( z + this._z );\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n\t\t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n\t\t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t\t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t\t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t\t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( quaternion ) {\n\n\t\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tthis._x = array[ offset ];\n\t\t\tthis._y = array[ offset + 1 ];\n\t\t\tthis._z = array[ offset + 2 ];\n\t\t\tthis._w = array[ offset + 3 ];\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tarray[ offset ] = this._x;\n\t\t\tarray[ offset + 1 ] = this._y;\n\t\t\tarray[ offset + 2 ] = this._z;\n\t\t\tarray[ offset + 3 ] = this._w;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tonChange: function ( callback ) {\n\n\t\t\tthis.onChangeCallback = callback;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tonChangeCallback: function () {}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author kile / http://kile.stravaganza.org/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author egraether / http://egraether.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Vector3( x, y, z ) {\n\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\t\tthis.z = z || 0;\n\n\t}\n\n\tObject.assign( Vector3.prototype, {\n\n\t\tisVector3: true,\n\n\t\tset: function ( x, y, z ) {\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( x ) {\n\n\t\t\tthis.x = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( y ) {\n\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetZ: function ( z ) {\n\n\t\t\tthis.z = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponent: function ( index, value ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tcase 2: this.z = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetComponent: function ( index ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tcase 2: return this.z;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.x, this.y, this.z );\n\n\t\t},\n\n\t\tcopy: function ( v ) {\n\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledVector: function ( v, s ) {\n\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubScalar: function ( s ) {\n\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\n\t\t\t\treturn this.multiplyVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\tthis.z *= v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( scalar ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x * b.x;\n\t\t\tthis.y = a.y * b.y;\n\t\t\tthis.z = a.z * b.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyEuler: function () {\n\n\t\t\tvar quaternion = new Quaternion();\n\n\t\t\treturn function applyEuler( euler ) {\n\n\t\t\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t\t}\n\n\t\t\t\treturn this.applyQuaternion( quaternion.setFromEuler( euler ) );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tapplyAxisAngle: function () {\n\n\t\t\tvar quaternion = new Quaternion();\n\n\t\t\treturn function applyAxisAngle( axis, angle ) {\n\n\t\t\t\treturn this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tapplyMatrix3: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n\t\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n\t\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\n\t\t\tvar w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );\n\n\t\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ] ) * w;\n\t\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ] ) * w;\n\t\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyQuaternion: function ( q ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\n\t\t\t// calculate quat * vector\n\n\t\t\tvar ix =  qw * x + qy * z - qz * y;\n\t\t\tvar iy =  qw * y + qz * x - qx * z;\n\t\t\tvar iz =  qw * z + qx * y - qy * x;\n\t\t\tvar iw = - qx * x - qy * y - qz * z;\n\n\t\t\t// calculate result * inverse quat\n\n\t\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n\t\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n\t\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tproject: function () {\n\n\t\t\tvar matrix = new Matrix4();\n\n\t\t\treturn function project( camera ) {\n\n\t\t\t\tmatrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );\n\t\t\t\treturn this.applyMatrix4( matrix );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tunproject: function () {\n\n\t\t\tvar matrix = new Matrix4();\n\n\t\t\treturn function unproject( camera ) {\n\n\t\t\t\tmatrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );\n\t\t\t\treturn this.applyMatrix4( matrix );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttransformDirection: function ( m ) {\n\n\t\t\t// input: THREE.Matrix4 affine matrix\n\t\t\t// vector interpreted as a direction\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z;\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z;\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\n\t\t\treturn this.normalize();\n\n\t\t},\n\n\t\tdivide: function ( v ) {\n\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\t\t\tthis.z /= v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivideScalar: function ( scalar ) {\n\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t\t},\n\n\t\tmin: function ( v ) {\n\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\t\t\tthis.z = Math.min( this.z, v.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmax: function ( v ) {\n\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\t\t\tthis.z = Math.max( this.z, v.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclamp: function ( min, max ) {\n\n\t\t\t// assumes min < max, componentwise\n\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampScalar: function () {\n\n\t\t\tvar min = new Vector3();\n\t\t\tvar max = new Vector3();\n\n\t\t\treturn function clampScalar( minVal, maxVal ) {\n\n\t\t\t\tmin.set( minVal, minVal, minVal );\n\t\t\t\tmax.set( maxVal, maxVal, maxVal );\n\n\t\t\t\treturn this.clamp( min, max );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclampLength: function ( min, max ) {\n\n\t\t\tvar length = this.length();\n\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t\t},\n\n\t\tfloor: function () {\n\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\t\t\tthis.z = Math.floor( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tceil: function () {\n\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\t\t\tthis.z = Math.ceil( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tround: function () {\n\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\t\t\tthis.z = Math.round( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\troundToZero: function () {\n\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\t\t\tthis.z = - this.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\n\t\t},\n\n\t\t// TODO lengthSquared?\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\n\t\t},\n\n\t\tlengthManhattan: function () {\n\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\treturn this.divideScalar( this.length() || 1 );\n\n\t\t},\n\n\t\tsetLength: function ( length ) {\n\n\t\t\treturn this.normalize().multiplyScalar( length );\n\n\t\t},\n\n\t\tlerp: function ( v, alpha ) {\n\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\t\tthis.z += ( v.z - this.z ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t\t},\n\n\t\tcross: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\n\t\t\t\treturn this.crossVectors( v, w );\n\n\t\t\t}\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\n\t\t\tthis.x = y * v.z - z * v.y;\n\t\t\tthis.y = z * v.x - x * v.z;\n\t\t\tthis.z = x * v.y - y * v.x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcrossVectors: function ( a, b ) {\n\n\t\t\tvar ax = a.x, ay = a.y, az = a.z;\n\t\t\tvar bx = b.x, by = b.y, bz = b.z;\n\n\t\t\tthis.x = ay * bz - az * by;\n\t\t\tthis.y = az * bx - ax * bz;\n\t\t\tthis.z = ax * by - ay * bx;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tprojectOnVector: function ( vector ) {\n\n\t\t\tvar scalar = vector.dot( this ) / vector.lengthSq();\n\n\t\t\treturn this.copy( vector ).multiplyScalar( scalar );\n\n\t\t},\n\n\t\tprojectOnPlane: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function projectOnPlane( planeNormal ) {\n\n\t\t\t\tv1.copy( this ).projectOnVector( planeNormal );\n\n\t\t\t\treturn this.sub( v1 );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\treflect: function () {\n\n\t\t\t// reflect incident vector off plane orthogonal to normal\n\t\t\t// normal is assumed to have unit length\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function reflect( normal ) {\n\n\t\t\t\treturn this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tangleTo: function ( v ) {\n\n\t\t\tvar theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );\n\n\t\t\t// clamp, to handle numerical problems\n\n\t\t\treturn Math.acos( _Math.clamp( theta, - 1, 1 ) );\n\n\t\t},\n\n\t\tdistanceTo: function ( v ) {\n\n\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t\t},\n\n\t\tdistanceToSquared: function ( v ) {\n\n\t\t\tvar dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\n\t\t\treturn dx * dx + dy * dy + dz * dz;\n\n\t\t},\n\n\t\tdistanceToManhattan: function ( v ) {\n\n\t\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\n\n\t\t},\n\n\t\tsetFromSpherical: function ( s ) {\n\n\t\t\tvar sinPhiRadius = Math.sin( s.phi ) * s.radius;\n\n\t\t\tthis.x = sinPhiRadius * Math.sin( s.theta );\n\t\t\tthis.y = Math.cos( s.phi ) * s.radius;\n\t\t\tthis.z = sinPhiRadius * Math.cos( s.theta );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCylindrical: function ( c ) {\n\n\t\t\tthis.x = c.radius * Math.sin( c.theta );\n\t\t\tthis.y = c.y;\n\t\t\tthis.z = c.radius * Math.cos( c.theta );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrixPosition: function ( m ) {\n\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 12 ];\n\t\t\tthis.y = e[ 13 ];\n\t\t\tthis.z = e[ 14 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrixScale: function ( m ) {\n\n\t\t\tvar sx = this.setFromMatrixColumn( m, 0 ).length();\n\t\t\tvar sy = this.setFromMatrixColumn( m, 1 ).length();\n\t\t\tvar sz = this.setFromMatrixColumn( m, 2 ).length();\n\n\t\t\tthis.x = sx;\n\t\t\tthis.y = sy;\n\t\t\tthis.z = sz;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrixColumn: function ( m, index ) {\n\n\t\t\treturn this.fromArray( m.elements, index * 4 );\n\n\t\t},\n\n\t\tequals: function ( v ) {\n\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\t\t\tthis.z = array[ offset + 2 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\t\t\tarray[ offset + 2 ] = this.z;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );\n\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX( index );\n\t\t\tthis.y = attribute.getY( index );\n\t\t\tthis.z = attribute.getZ( index );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author jordi_ros / http://plattsoft.com\n\t * @author D1plo1d / http://github.com/D1plo1d\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author timknip / http://www.floorplanner.com/\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Matrix4() {\n\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t];\n\n\t\tif ( arguments.length > 0 ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\n\n\t\t}\n\n\t}\n\n\tObject.assign( Matrix4.prototype, {\n\n\t\tisMatrix4: true,\n\n\t\tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n\t\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n\t\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n\t\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tidentity: function () {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, 0,\n\t\t\t\t0, 1, 0, 0,\n\t\t\t\t0, 0, 1, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new Matrix4().fromArray( this.elements );\n\n\t\t},\n\n\t\tcopy: function ( m ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];\n\t\t\tte[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];\n\t\t\tte[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];\n\t\t\tte[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyPosition: function ( m ) {\n\n\t\t\tvar te = this.elements, me = m.elements;\n\n\t\t\tte[ 12 ] = me[ 12 ];\n\t\t\tte[ 13 ] = me[ 13 ];\n\t\t\tte[ 14 ] = me[ 14 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\textractBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\t\txAxis.setFromMatrixColumn( this, 0 );\n\t\t\tyAxis.setFromMatrixColumn( this, 1 );\n\t\t\tzAxis.setFromMatrixColumn( this, 2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\t\tthis.set(\n\t\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\n\t\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\n\t\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\n\t\t\t\t0,       0,       0,       1\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\textractRotation: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function extractRotation( m ) {\n\n\t\t\t\tvar te = this.elements;\n\t\t\t\tvar me = m.elements;\n\n\t\t\t\tvar scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();\n\t\t\t\tvar scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();\n\t\t\t\tvar scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();\n\n\t\t\t\tte[ 0 ] = me[ 0 ] * scaleX;\n\t\t\t\tte[ 1 ] = me[ 1 ] * scaleX;\n\t\t\t\tte[ 2 ] = me[ 2 ] * scaleX;\n\n\t\t\t\tte[ 4 ] = me[ 4 ] * scaleY;\n\t\t\t\tte[ 5 ] = me[ 5 ] * scaleY;\n\t\t\t\tte[ 6 ] = me[ 6 ] * scaleY;\n\n\t\t\t\tte[ 8 ] = me[ 8 ] * scaleZ;\n\t\t\t\tte[ 9 ] = me[ 9 ] * scaleZ;\n\t\t\t\tte[ 10 ] = me[ 10 ] * scaleZ;\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tmakeRotationFromEuler: function ( euler ) {\n\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar x = euler.x, y = euler.y, z = euler.z;\n\t\t\tvar a = Math.cos( x ), b = Math.sin( x );\n\t\t\tvar c = Math.cos( y ), d = Math.sin( y );\n\t\t\tvar e = Math.cos( z ), f = Math.sin( z );\n\n\t\t\tif ( euler.order === 'XYZ' ) {\n\n\t\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = - c * f;\n\t\t\t\tte[ 8 ] = d;\n\n\t\t\t\tte[ 1 ] = af + be * d;\n\t\t\t\tte[ 5 ] = ae - bf * d;\n\t\t\t\tte[ 9 ] = - b * c;\n\n\t\t\t\tte[ 2 ] = bf - ae * d;\n\t\t\t\tte[ 6 ] = be + af * d;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'YXZ' ) {\n\n\t\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\t\tte[ 0 ] = ce + df * b;\n\t\t\t\tte[ 4 ] = de * b - cf;\n\t\t\t\tte[ 8 ] = a * d;\n\n\t\t\t\tte[ 1 ] = a * f;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = - b;\n\n\t\t\t\tte[ 2 ] = cf * b - de;\n\t\t\t\tte[ 6 ] = df + ce * b;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'ZXY' ) {\n\n\t\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\t\tte[ 0 ] = ce - df * b;\n\t\t\t\tte[ 4 ] = - a * f;\n\t\t\t\tte[ 8 ] = de + cf * b;\n\n\t\t\t\tte[ 1 ] = cf + de * b;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = df - ce * b;\n\n\t\t\t\tte[ 2 ] = - a * d;\n\t\t\t\tte[ 6 ] = b;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'ZYX' ) {\n\n\t\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = be * d - af;\n\t\t\t\tte[ 8 ] = ae * d + bf;\n\n\t\t\t\tte[ 1 ] = c * f;\n\t\t\t\tte[ 5 ] = bf * d + ae;\n\t\t\t\tte[ 9 ] = af * d - be;\n\n\t\t\t\tte[ 2 ] = - d;\n\t\t\t\tte[ 6 ] = b * c;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'YZX' ) {\n\n\t\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = bd - ac * f;\n\t\t\t\tte[ 8 ] = bc * f + ad;\n\n\t\t\t\tte[ 1 ] = f;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = - b * e;\n\n\t\t\t\tte[ 2 ] = - d * e;\n\t\t\t\tte[ 6 ] = ad * f + bc;\n\t\t\t\tte[ 10 ] = ac - bd * f;\n\n\t\t\t} else if ( euler.order === 'XZY' ) {\n\n\t\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = - f;\n\t\t\t\tte[ 8 ] = d * e;\n\n\t\t\t\tte[ 1 ] = ac * f + bd;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = ad * f - bc;\n\n\t\t\t\tte[ 2 ] = bc * f - ad;\n\t\t\t\tte[ 6 ] = b * e;\n\t\t\t\tte[ 10 ] = bd * f + ac;\n\n\t\t\t}\n\n\t\t\t// last column\n\t\t\tte[ 3 ] = 0;\n\t\t\tte[ 7 ] = 0;\n\t\t\tte[ 11 ] = 0;\n\n\t\t\t// bottom row\n\t\t\tte[ 12 ] = 0;\n\t\t\tte[ 13 ] = 0;\n\t\t\tte[ 14 ] = 0;\n\t\t\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationFromQuaternion: function ( q ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar x = q._x, y = q._y, z = q._z, w = q._w;\n\t\t\tvar x2 = x + x, y2 = y + y, z2 = z + z;\n\t\t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\n\t\t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\n\t\t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\n\n\t\t\tte[ 0 ] = 1 - ( yy + zz );\n\t\t\tte[ 4 ] = xy - wz;\n\t\t\tte[ 8 ] = xz + wy;\n\n\t\t\tte[ 1 ] = xy + wz;\n\t\t\tte[ 5 ] = 1 - ( xx + zz );\n\t\t\tte[ 9 ] = yz - wx;\n\n\t\t\tte[ 2 ] = xz - wy;\n\t\t\tte[ 6 ] = yz + wx;\n\t\t\tte[ 10 ] = 1 - ( xx + yy );\n\n\t\t\t// last column\n\t\t\tte[ 3 ] = 0;\n\t\t\tte[ 7 ] = 0;\n\t\t\tte[ 11 ] = 0;\n\n\t\t\t// bottom row\n\t\t\tte[ 12 ] = 0;\n\t\t\tte[ 13 ] = 0;\n\t\t\tte[ 14 ] = 0;\n\t\t\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlookAt: function () {\n\n\t\t\tvar x = new Vector3();\n\t\t\tvar y = new Vector3();\n\t\t\tvar z = new Vector3();\n\n\t\t\treturn function lookAt( eye, target, up ) {\n\n\t\t\t\tvar te = this.elements;\n\n\t\t\t\tz.subVectors( eye, target );\n\n\t\t\t\tif ( z.lengthSq() === 0 ) {\n\n\t\t\t\t\t// eye and target are in the same position\n\n\t\t\t\t\tz.z = 1;\n\n\t\t\t\t}\n\n\t\t\t\tz.normalize();\n\t\t\t\tx.crossVectors( up, z );\n\n\t\t\t\tif ( x.lengthSq() === 0 ) {\n\n\t\t\t\t\t// up and z are parallel\n\n\t\t\t\t\tif ( Math.abs( up.z ) === 1 ) {\n\n\t\t\t\t\t\tz.x += 0.0001;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tz.z += 0.0001;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tz.normalize();\n\t\t\t\t\tx.crossVectors( up, z );\n\n\t\t\t\t}\n\n\t\t\t\tx.normalize();\n\t\t\t\ty.crossVectors( z, x );\n\n\t\t\t\tte[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;\n\t\t\t\tte[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;\n\t\t\t\tte[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tmultiply: function ( m, n ) {\n\n\t\t\tif ( n !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\n\t\t\t\treturn this.multiplyMatrices( m, n );\n\n\t\t\t}\n\n\t\t\treturn this.multiplyMatrices( this, m );\n\n\t\t},\n\n\t\tpremultiply: function ( m ) {\n\n\t\t\treturn this.multiplyMatrices( m, this );\n\n\t\t},\n\n\t\tmultiplyMatrices: function ( a, b ) {\n\n\t\t\tvar ae = a.elements;\n\t\t\tvar be = b.elements;\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n\t\t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n\t\t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n\t\t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\n\t\t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n\t\t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n\t\t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n\t\t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\n\t\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n\t\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n\t\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n\t\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( s ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n\t\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n\t\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n\t\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyToBufferAttribute: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function applyToBufferAttribute( attribute ) {\n\n\t\t\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\t\t\tv1.x = attribute.getX( i );\n\t\t\t\t\tv1.y = attribute.getY( i );\n\t\t\t\t\tv1.z = attribute.getZ( i );\n\n\t\t\t\t\tv1.applyMatrix4( this );\n\n\t\t\t\t\tattribute.setXYZ( i, v1.x, v1.y, v1.z );\n\n\t\t\t\t}\n\n\t\t\t\treturn attribute;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tdeterminant: function () {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n\t\t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n\t\t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n\t\t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n\n\t\t\t//TODO: make this more efficient\n\t\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n\t\t\treturn (\n\t\t\t\tn41 * (\n\t\t\t\t\t+ n14 * n23 * n32\n\t\t\t\t\t - n13 * n24 * n32\n\t\t\t\t\t - n14 * n22 * n33\n\t\t\t\t\t + n12 * n24 * n33\n\t\t\t\t\t + n13 * n22 * n34\n\t\t\t\t\t - n12 * n23 * n34\n\t\t\t\t) +\n\t\t\t\tn42 * (\n\t\t\t\t\t+ n11 * n23 * n34\n\t\t\t\t\t - n11 * n24 * n33\n\t\t\t\t\t + n14 * n21 * n33\n\t\t\t\t\t - n13 * n21 * n34\n\t\t\t\t\t + n13 * n24 * n31\n\t\t\t\t\t - n14 * n23 * n31\n\t\t\t\t) +\n\t\t\t\tn43 * (\n\t\t\t\t\t+ n11 * n24 * n32\n\t\t\t\t\t - n11 * n22 * n34\n\t\t\t\t\t - n14 * n21 * n32\n\t\t\t\t\t + n12 * n21 * n34\n\t\t\t\t\t + n14 * n22 * n31\n\t\t\t\t\t - n12 * n24 * n31\n\t\t\t\t) +\n\t\t\t\tn44 * (\n\t\t\t\t\t- n13 * n22 * n31\n\t\t\t\t\t - n11 * n23 * n32\n\t\t\t\t\t + n11 * n22 * n33\n\t\t\t\t\t + n13 * n21 * n32\n\t\t\t\t\t - n12 * n21 * n33\n\t\t\t\t\t + n12 * n23 * n31\n\t\t\t\t)\n\n\t\t\t);\n\n\t\t},\n\n\t\ttranspose: function () {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar tmp;\n\n\t\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n\t\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n\t\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n\n\t\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n\t\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n\t\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetPosition: function ( v ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 12 ] = v.x;\n\t\t\tte[ 13 ] = v.y;\n\t\t\tte[ 14 ] = v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetInverse: function ( m, throwOnDegenerate ) {\n\n\t\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\t\tvar te = this.elements,\n\t\t\t\tme = m.elements,\n\n\t\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],\n\t\t\t\tn12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],\n\t\t\t\tn13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],\n\t\t\t\tn14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],\n\n\t\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\n\t\t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\n\t\t\tif ( det === 0 ) {\n\n\t\t\t\tvar msg = \"THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0\";\n\n\t\t\t\tif ( throwOnDegenerate === true ) {\n\n\t\t\t\t\tthrow new Error( msg );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( msg );\n\n\t\t\t\t}\n\n\t\t\t\treturn this.identity();\n\n\t\t\t}\n\n\t\t\tvar detInv = 1 / det;\n\n\t\t\tte[ 0 ] = t11 * detInv;\n\t\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\n\t\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\n\t\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\n\n\t\t\tte[ 4 ] = t12 * detInv;\n\t\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\n\t\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\n\t\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\n\n\t\t\tte[ 8 ] = t13 * detInv;\n\t\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\n\t\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\n\t\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\n\n\t\t\tte[ 12 ] = t14 * detInv;\n\t\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\n\t\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\n\t\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tscale: function ( v ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar x = v.x, y = v.y, z = v.z;\n\n\t\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n\t\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n\t\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n\t\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetMaxScaleOnAxis: function () {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n\t\t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n\t\t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n\n\t\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\n\n\t\t},\n\n\t\tmakeTranslation: function ( x, y, z ) {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, x,\n\t\t\t\t0, 1, 0, y,\n\t\t\t\t0, 0, 1, z,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationX: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0,  0, 0,\n\t\t\t\t0, c, - s, 0,\n\t\t\t\t0, s,  c, 0,\n\t\t\t\t0, 0,  0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationY: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\t\tthis.set(\n\n\t\t\t\t c, 0, s, 0,\n\t\t\t\t 0, 1, 0, 0,\n\t\t\t\t- s, 0, c, 0,\n\t\t\t\t 0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationZ: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\t\tthis.set(\n\n\t\t\t\tc, - s, 0, 0,\n\t\t\t\ts,  c, 0, 0,\n\t\t\t\t0,  0, 1, 0,\n\t\t\t\t0,  0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationAxis: function ( axis, angle ) {\n\n\t\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n\t\t\tvar c = Math.cos( angle );\n\t\t\tvar s = Math.sin( angle );\n\t\t\tvar t = 1 - c;\n\t\t\tvar x = axis.x, y = axis.y, z = axis.z;\n\t\t\tvar tx = t * x, ty = t * y;\n\n\t\t\tthis.set(\n\n\t\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n\t\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n\t\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\t return this;\n\n\t\t},\n\n\t\tmakeScale: function ( x, y, z ) {\n\n\t\t\tthis.set(\n\n\t\t\t\tx, 0, 0, 0,\n\t\t\t\t0, y, 0, 0,\n\t\t\t\t0, 0, z, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeShear: function ( x, y, z ) {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, y, z, 0,\n\t\t\t\tx, 1, z, 0,\n\t\t\t\tx, y, 1, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcompose: function ( position, quaternion, scale ) {\n\n\t\t\tthis.makeRotationFromQuaternion( quaternion );\n\t\t\tthis.scale( scale );\n\t\t\tthis.setPosition( position );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdecompose: function () {\n\n\t\t\tvar vector = new Vector3();\n\t\t\tvar matrix = new Matrix4();\n\n\t\t\treturn function decompose( position, quaternion, scale ) {\n\n\t\t\t\tvar te = this.elements;\n\n\t\t\t\tvar sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n\t\t\t\tvar sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n\t\t\t\tvar sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n\n\t\t\t\t// if determine is negative, we need to invert one scale\n\t\t\t\tvar det = this.determinant();\n\t\t\t\tif ( det < 0 ) sx = - sx;\n\n\t\t\t\tposition.x = te[ 12 ];\n\t\t\t\tposition.y = te[ 13 ];\n\t\t\t\tposition.z = te[ 14 ];\n\n\t\t\t\t// scale the rotation part\n\t\t\t\tmatrix.copy( this );\n\n\t\t\t\tvar invSX = 1 / sx;\n\t\t\t\tvar invSY = 1 / sy;\n\t\t\t\tvar invSZ = 1 / sz;\n\n\t\t\t\tmatrix.elements[ 0 ] *= invSX;\n\t\t\t\tmatrix.elements[ 1 ] *= invSX;\n\t\t\t\tmatrix.elements[ 2 ] *= invSX;\n\n\t\t\t\tmatrix.elements[ 4 ] *= invSY;\n\t\t\t\tmatrix.elements[ 5 ] *= invSY;\n\t\t\t\tmatrix.elements[ 6 ] *= invSY;\n\n\t\t\t\tmatrix.elements[ 8 ] *= invSZ;\n\t\t\t\tmatrix.elements[ 9 ] *= invSZ;\n\t\t\t\tmatrix.elements[ 10 ] *= invSZ;\n\n\t\t\t\tquaternion.setFromRotationMatrix( matrix );\n\n\t\t\t\tscale.x = sx;\n\t\t\t\tscale.y = sy;\n\t\t\t\tscale.z = sz;\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tmakePerspective: function ( left, right, top, bottom, near, far ) {\n\n\t\t\tif ( far === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );\n\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\t\t\tvar x = 2 * near / ( right - left );\n\t\t\tvar y = 2 * near / ( top - bottom );\n\n\t\t\tvar a = ( right + left ) / ( right - left );\n\t\t\tvar b = ( top + bottom ) / ( top - bottom );\n\t\t\tvar c = - ( far + near ) / ( far - near );\n\t\t\tvar d = - 2 * far * near / ( far - near );\n\n\t\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\n\t\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\n\t\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\n\t\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar w = 1.0 / ( right - left );\n\t\t\tvar h = 1.0 / ( top - bottom );\n\t\t\tvar p = 1.0 / ( far - near );\n\n\t\t\tvar x = ( right + left ) * w;\n\t\t\tvar y = ( top + bottom ) * h;\n\t\t\tvar z = ( far + near ) * p;\n\n\t\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\n\t\t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\n\t\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\n\t\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( matrix ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = matrix.elements;\n\n\t\t\tfor ( var i = 0; i < 16; i ++ ) {\n\n\t\t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tfor ( var i = 0; i < 16; i ++ ) {\n\n\t\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tvar te = this.elements;\n\n\t\t\tarray[ offset ] = te[ 0 ];\n\t\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\t\tarray[ offset + 2 ] = te[ 2 ];\n\t\t\tarray[ offset + 3 ] = te[ 3 ];\n\n\t\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\t\tarray[ offset + 5 ] = te[ 5 ];\n\t\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\t\tarray[ offset + 7 ] = te[ 7 ];\n\n\t\t\tarray[ offset + 8 ] = te[ 8 ];\n\t\t\tarray[ offset + 9 ] = te[ 9 ];\n\t\t\tarray[ offset + 10 ] = te[ 10 ];\n\t\t\tarray[ offset + 11 ] = te[ 11 ];\n\n\t\t\tarray[ offset + 12 ] = te[ 12 ];\n\t\t\tarray[ offset + 13 ] = te[ 13 ];\n\t\t\tarray[ offset + 14 ] = te[ 14 ];\n\t\t\tarray[ offset + 15 ] = te[ 15 ];\n\n\t\t\treturn array;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.image = { data: data, width: width, height: height };\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.unpackAlignment = 1;\n\n\t}\n\n\tDataTexture.prototype = Object.create( Texture.prototype );\n\tDataTexture.prototype.constructor = DataTexture;\n\n\tDataTexture.prototype.isDataTexture = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\t\timages = images !== undefined ? images : [];\n\t\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\n\t\tTexture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.flipY = false;\n\n\t}\n\n\tCubeTexture.prototype = Object.create( Texture.prototype );\n\tCubeTexture.prototype.constructor = CubeTexture;\n\n\tCubeTexture.prototype.isCubeTexture = true;\n\n\tObject.defineProperty( CubeTexture.prototype, 'images', {\n\n\t\tget: function () {\n\n\t\t\treturn this.image;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis.image = value;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author tschw\n\t *\n\t * Uniforms of a program.\n\t * Those form a tree structure with a special top-level container for the root,\n\t * which you get by calling 'new WebGLUniforms( gl, program, renderer )'.\n\t *\n\t *\n\t * Properties of inner nodes including the top-level container:\n\t *\n\t * .seq - array of nested uniforms\n\t * .map - nested uniforms by name\n\t *\n\t *\n\t * Methods of all nodes except the top-level container:\n\t *\n\t * .setValue( gl, value, [renderer] )\n\t *\n\t * \t\tuploads a uniform value(s)\n\t *  \tthe 'renderer' parameter is needed for sampler uniforms\n\t *\n\t *\n\t * Static methods of the top-level container (renderer factorizations):\n\t *\n\t * .upload( gl, seq, values, renderer )\n\t *\n\t * \t\tsets uniforms in 'seq' to 'values[id].value'\n\t *\n\t * .seqWithValue( seq, values ) : filteredSeq\n\t *\n\t * \t\tfilters 'seq' entries with corresponding entry in values\n\t *\n\t *\n\t * Methods of the top-level container (renderer factorizations):\n\t *\n\t * .setValue( gl, name, value )\n\t *\n\t * \t\tsets uniform with  name 'name' to 'value'\n\t *\n\t * .set( gl, obj, prop )\n\t *\n\t * \t\tsets uniform from object and property with same name than uniform\n\t *\n\t * .setOptional( gl, obj, prop )\n\t *\n\t * \t\tlike .set for an optional property of the object\n\t *\n\t */\n\n\tvar emptyTexture = new Texture();\n\tvar emptyCubeTexture = new CubeTexture();\n\n\t// --- Base for inner nodes (including the root) ---\n\n\tfunction UniformContainer() {\n\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\n\t}\n\n\t// --- Utilities ---\n\n\t// Array Caches (provide typed arrays for temporary by size)\n\n\tvar arrayCacheF32 = [];\n\tvar arrayCacheI32 = [];\n\n\t// Float32Array caches used for uploading Matrix uniforms\n\n\tvar mat4array = new Float32Array( 16 );\n\tvar mat3array = new Float32Array( 9 );\n\n\t// Flattening for arrays of vectors and matrices\n\n\tfunction flatten( array, nBlocks, blockSize ) {\n\n\t\tvar firstElem = array[ 0 ];\n\n\t\tif ( firstElem <= 0 || firstElem > 0 ) return array;\n\t\t// unoptimized: ! isNaN( firstElem )\n\t\t// see http://jacksondunstan.com/articles/983\n\n\t\tvar n = nBlocks * blockSize,\n\t\t\tr = arrayCacheF32[ n ];\n\n\t\tif ( r === undefined ) {\n\n\t\t\tr = new Float32Array( n );\n\t\t\tarrayCacheF32[ n ] = r;\n\n\t\t}\n\n\t\tif ( nBlocks !== 0 ) {\n\n\t\t\tfirstElem.toArray( r, 0 );\n\n\t\t\tfor ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {\n\n\t\t\t\toffset += blockSize;\n\t\t\t\tarray[ i ].toArray( r, offset );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn r;\n\n\t}\n\n\t// Texture unit allocation\n\n\tfunction allocTexUnits( renderer, n ) {\n\n\t\tvar r = arrayCacheI32[ n ];\n\n\t\tif ( r === undefined ) {\n\n\t\t\tr = new Int32Array( n );\n\t\t\tarrayCacheI32[ n ] = r;\n\n\t\t}\n\n\t\tfor ( var i = 0; i !== n; ++ i )\n\t\t\tr[ i ] = renderer.allocTextureUnit();\n\n\t\treturn r;\n\n\t}\n\n\t// --- Setters ---\n\n\t// Note: Defining these methods externally, because they come in a bunch\n\t// and this way their names minify.\n\n\t// Single scalar\n\n\tfunction setValue1f( gl, v ) { gl.uniform1f( this.addr, v ); }\n\tfunction setValue1i( gl, v ) { gl.uniform1i( this.addr, v ); }\n\n\t// Single float vector (from flat array or THREE.VectorN)\n\n\tfunction setValue2fv( gl, v ) {\n\n\t\tif ( v.x === undefined ) gl.uniform2fv( this.addr, v );\n\t\telse gl.uniform2f( this.addr, v.x, v.y );\n\n\t}\n\n\tfunction setValue3fv( gl, v ) {\n\n\t\tif ( v.x !== undefined )\n\t\t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\n\t\telse if ( v.r !== undefined )\n\t\t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\n\t\telse\n\t\t\tgl.uniform3fv( this.addr, v );\n\n\t}\n\n\tfunction setValue4fv( gl, v ) {\n\n\t\tif ( v.x === undefined ) gl.uniform4fv( this.addr, v );\n\t\telse gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\n\n\t}\n\n\t// Single matrix (from flat array or MatrixN)\n\n\tfunction setValue2fm( gl, v ) {\n\n\t\tgl.uniformMatrix2fv( this.addr, false, v.elements || v );\n\n\t}\n\n\tfunction setValue3fm( gl, v ) {\n\n\t\tif ( v.elements === undefined ) {\n\n\t\t\tgl.uniformMatrix3fv( this.addr, false, v );\n\n\t\t} else {\n\n\t\t\tmat3array.set( v.elements );\n\t\t\tgl.uniformMatrix3fv( this.addr, false, mat3array );\n\n\t\t}\n\n\t}\n\n\tfunction setValue4fm( gl, v ) {\n\n\t\tif ( v.elements === undefined ) {\n\n\t\t\tgl.uniformMatrix4fv( this.addr, false, v );\n\n\t\t} else {\n\n\t\t\tmat4array.set( v.elements );\n\t\t\tgl.uniformMatrix4fv( this.addr, false, mat4array );\n\n\t\t}\n\n\t}\n\n\t// Single texture (2D / Cube)\n\n\tfunction setValueT1( gl, v, renderer ) {\n\n\t\tvar unit = renderer.allocTextureUnit();\n\t\tgl.uniform1i( this.addr, unit );\n\t\trenderer.setTexture2D( v || emptyTexture, unit );\n\n\t}\n\n\tfunction setValueT6( gl, v, renderer ) {\n\n\t\tvar unit = renderer.allocTextureUnit();\n\t\tgl.uniform1i( this.addr, unit );\n\t\trenderer.setTextureCube( v || emptyCubeTexture, unit );\n\n\t}\n\n\t// Integer / Boolean vectors or arrays thereof (always flat arrays)\n\n\tfunction setValue2iv( gl, v ) { gl.uniform2iv( this.addr, v ); }\n\tfunction setValue3iv( gl, v ) { gl.uniform3iv( this.addr, v ); }\n\tfunction setValue4iv( gl, v ) { gl.uniform4iv( this.addr, v ); }\n\n\t// Helper to pick the right setter for the singular case\n\n\tfunction getSingularSetter( type ) {\n\n\t\tswitch ( type ) {\n\n\t\t\tcase 0x1406: return setValue1f; // FLOAT\n\t\t\tcase 0x8b50: return setValue2fv; // _VEC2\n\t\t\tcase 0x8b51: return setValue3fv; // _VEC3\n\t\t\tcase 0x8b52: return setValue4fv; // _VEC4\n\n\t\t\tcase 0x8b5a: return setValue2fm; // _MAT2\n\t\t\tcase 0x8b5b: return setValue3fm; // _MAT3\n\t\t\tcase 0x8b5c: return setValue4fm; // _MAT4\n\n\t\t\tcase 0x8b5e: case 0x8d66: return setValueT1; // SAMPLER_2D, SAMPLER_EXTERNAL_OES\n\t\t\tcase 0x8b60: return setValueT6; // SAMPLER_CUBE\n\n\t\t\tcase 0x1404: case 0x8b56: return setValue1i; // INT, BOOL\n\t\t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\n\t\t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\n\t\t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\n\n\t\t}\n\n\t}\n\n\t// Array of scalars\n\n\tfunction setValue1fv( gl, v ) { gl.uniform1fv( this.addr, v ); }\n\tfunction setValue1iv( gl, v ) { gl.uniform1iv( this.addr, v ); }\n\n\t// Array of vectors (flat or from THREE classes)\n\n\tfunction setValueV2a( gl, v ) {\n\n\t\tgl.uniform2fv( this.addr, flatten( v, this.size, 2 ) );\n\n\t}\n\n\tfunction setValueV3a( gl, v ) {\n\n\t\tgl.uniform3fv( this.addr, flatten( v, this.size, 3 ) );\n\n\t}\n\n\tfunction setValueV4a( gl, v ) {\n\n\t\tgl.uniform4fv( this.addr, flatten( v, this.size, 4 ) );\n\n\t}\n\n\t// Array of matrices (flat or from THREE clases)\n\n\tfunction setValueM2a( gl, v ) {\n\n\t\tgl.uniformMatrix2fv( this.addr, false, flatten( v, this.size, 4 ) );\n\n\t}\n\n\tfunction setValueM3a( gl, v ) {\n\n\t\tgl.uniformMatrix3fv( this.addr, false, flatten( v, this.size, 9 ) );\n\n\t}\n\n\tfunction setValueM4a( gl, v ) {\n\n\t\tgl.uniformMatrix4fv( this.addr, false, flatten( v, this.size, 16 ) );\n\n\t}\n\n\t// Array of textures (2D / Cube)\n\n\tfunction setValueT1a( gl, v, renderer ) {\n\n\t\tvar n = v.length,\n\t\t\tunits = allocTexUnits( renderer, n );\n\n\t\tgl.uniform1iv( this.addr, units );\n\n\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\trenderer.setTexture2D( v[ i ] || emptyTexture, units[ i ] );\n\n\t\t}\n\n\t}\n\n\tfunction setValueT6a( gl, v, renderer ) {\n\n\t\tvar n = v.length,\n\t\t\tunits = allocTexUnits( renderer, n );\n\n\t\tgl.uniform1iv( this.addr, units );\n\n\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\trenderer.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\n\n\t\t}\n\n\t}\n\n\t// Helper to pick the right setter for a pure (bottom-level) array\n\n\tfunction getPureArraySetter( type ) {\n\n\t\tswitch ( type ) {\n\n\t\t\tcase 0x1406: return setValue1fv; // FLOAT\n\t\t\tcase 0x8b50: return setValueV2a; // _VEC2\n\t\t\tcase 0x8b51: return setValueV3a; // _VEC3\n\t\t\tcase 0x8b52: return setValueV4a; // _VEC4\n\n\t\t\tcase 0x8b5a: return setValueM2a; // _MAT2\n\t\t\tcase 0x8b5b: return setValueM3a; // _MAT3\n\t\t\tcase 0x8b5c: return setValueM4a; // _MAT4\n\n\t\t\tcase 0x8b5e: return setValueT1a; // SAMPLER_2D\n\t\t\tcase 0x8b60: return setValueT6a; // SAMPLER_CUBE\n\n\t\t\tcase 0x1404: case 0x8b56: return setValue1iv; // INT, BOOL\n\t\t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\n\t\t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\n\t\t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\n\n\t\t}\n\n\t}\n\n\t// --- Uniform Classes ---\n\n\tfunction SingleUniform( id, activeInfo, addr ) {\n\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.setValue = getSingularSetter( activeInfo.type );\n\n\t\t// this.path = activeInfo.name; // DEBUG\n\n\t}\n\n\tfunction PureArrayUniform( id, activeInfo, addr ) {\n\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.size = activeInfo.size;\n\t\tthis.setValue = getPureArraySetter( activeInfo.type );\n\n\t\t// this.path = activeInfo.name; // DEBUG\n\n\t}\n\n\tfunction StructuredUniform( id ) {\n\n\t\tthis.id = id;\n\n\t\tUniformContainer.call( this ); // mix-in\n\n\t}\n\n\tStructuredUniform.prototype.setValue = function ( gl, value ) {\n\n\t\t// Note: Don't need an extra 'renderer' parameter, since samplers\n\t\t// are not allowed in structured uniforms.\n\n\t\tvar seq = this.seq;\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ];\n\t\t\tu.setValue( gl, value[ u.id ] );\n\n\t\t}\n\n\t};\n\n\t// --- Top-level ---\n\n\t// Parser - builds up the property tree from the path strings\n\n\tvar RePathPart = /([\\w\\d_]+)(\\])?(\\[|\\.)?/g;\n\n\t// extracts\n\t// \t- the identifier (member name or array index)\n\t//  - followed by an optional right bracket (found when array index)\n\t//  - followed by an optional left bracket or dot (type of subscript)\n\t//\n\t// Note: These portions can be read in a non-overlapping fashion and\n\t// allow straightforward parsing of the hierarchy that WebGL encodes\n\t// in the uniform names.\n\n\tfunction addUniform( container, uniformObject ) {\n\n\t\tcontainer.seq.push( uniformObject );\n\t\tcontainer.map[ uniformObject.id ] = uniformObject;\n\n\t}\n\n\tfunction parseUniform( activeInfo, addr, container ) {\n\n\t\tvar path = activeInfo.name,\n\t\t\tpathLength = path.length;\n\n\t\t// reset RegExp object, because of the early exit of a previous run\n\t\tRePathPart.lastIndex = 0;\n\n\t\tfor ( ; ; ) {\n\n\t\t\tvar match = RePathPart.exec( path ),\n\t\t\t\tmatchEnd = RePathPart.lastIndex,\n\n\t\t\t\tid = match[ 1 ],\n\t\t\t\tidIsIndex = match[ 2 ] === ']',\n\t\t\t\tsubscript = match[ 3 ];\n\n\t\t\tif ( idIsIndex ) id = id | 0; // convert to integer\n\n\t\t\tif ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {\n\n\t\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\n\t\t\t\taddUniform( container, subscript === undefined ?\n\t\t\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\n\t\t\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\n\n\t\t\t\tbreak;\n\n\t\t\t} else {\n\n\t\t\t\t// step into inner node / create it in case it doesn't exist\n\n\t\t\t\tvar map = container.map, next = map[ id ];\n\n\t\t\t\tif ( next === undefined ) {\n\n\t\t\t\t\tnext = new StructuredUniform( id );\n\t\t\t\t\taddUniform( container, next );\n\n\t\t\t\t}\n\n\t\t\t\tcontainer = next;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// Root Container\n\n\tfunction WebGLUniforms( gl, program, renderer ) {\n\n\t\tUniformContainer.call( this );\n\n\t\tthis.renderer = renderer;\n\n\t\tvar n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );\n\n\t\tfor ( var i = 0; i < n; ++ i ) {\n\n\t\t\tvar info = gl.getActiveUniform( program, i ),\n\t\t\t\tpath = info.name,\n\t\t\t\taddr = gl.getUniformLocation( program, path );\n\n\t\t\tparseUniform( info, addr, this );\n\n\t\t}\n\n\t}\n\n\tWebGLUniforms.prototype.setValue = function ( gl, name, value ) {\n\n\t\tvar u = this.map[ name ];\n\n\t\tif ( u !== undefined ) u.setValue( gl, value, this.renderer );\n\n\t};\n\n\tWebGLUniforms.prototype.setOptional = function ( gl, object, name ) {\n\n\t\tvar v = object[ name ];\n\n\t\tif ( v !== undefined ) this.setValue( gl, name, v );\n\n\t};\n\n\n\t// Static interface\n\n\tWebGLUniforms.upload = function ( gl, seq, values, renderer ) {\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ],\n\t\t\t\tv = values[ u.id ];\n\n\t\t\tif ( v.needsUpdate !== false ) {\n\n\t\t\t\t// note: always updating when .needsUpdate is undefined\n\t\t\t\tu.setValue( gl, v.value, renderer );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tWebGLUniforms.seqWithValue = function ( seq, values ) {\n\n\t\tvar r = [];\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ];\n\t\t\tif ( u.id in values ) r.push( u );\n\n\t\t}\n\n\t\treturn r;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n\t\t'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n\t\t'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n\t\t'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n\t\t'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n\t\t'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n\t\t'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n\t\t'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n\t\t'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n\t\t'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n\t\t'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n\t\t'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n\t\t'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n\t\t'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n\t\t'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n\t\t'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n\t\t'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n\t\t'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n\t\t'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n\t\t'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n\t\t'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n\t\t'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n\t\t'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n\t\t'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n\n\tfunction Color( r, g, b ) {\n\n\t\tif ( g === undefined && b === undefined ) {\n\n\t\t\t// r is THREE.Color, hex or string\n\t\t\treturn this.set( r );\n\n\t\t}\n\n\t\treturn this.setRGB( r, g, b );\n\n\t}\n\n\tObject.assign( Color.prototype, {\n\n\t\tisColor: true,\n\n\t\tr: 1, g: 1, b: 1,\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value && value.isColor ) {\n\n\t\t\t\tthis.copy( value );\n\n\t\t\t} else if ( typeof value === 'number' ) {\n\n\t\t\t\tthis.setHex( value );\n\n\t\t\t} else if ( typeof value === 'string' ) {\n\n\t\t\t\tthis.setStyle( value );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.r = scalar;\n\t\t\tthis.g = scalar;\n\t\t\tthis.b = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetHex: function ( hex ) {\n\n\t\t\thex = Math.floor( hex );\n\n\t\t\tthis.r = ( hex >> 16 & 255 ) / 255;\n\t\t\tthis.g = ( hex >> 8 & 255 ) / 255;\n\t\t\tthis.b = ( hex & 255 ) / 255;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetRGB: function ( r, g, b ) {\n\n\t\t\tthis.r = r;\n\t\t\tthis.g = g;\n\t\t\tthis.b = b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetHSL: function () {\n\n\t\t\tfunction hue2rgb( p, q, t ) {\n\n\t\t\t\tif ( t < 0 ) t += 1;\n\t\t\t\tif ( t > 1 ) t -= 1;\n\t\t\t\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\n\t\t\t\tif ( t < 1 / 2 ) return q;\n\t\t\t\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\n\t\t\t\treturn p;\n\n\t\t\t}\n\n\t\t\treturn function setHSL( h, s, l ) {\n\n\t\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\t\th = _Math.euclideanModulo( h, 1 );\n\t\t\t\ts = _Math.clamp( s, 0, 1 );\n\t\t\t\tl = _Math.clamp( l, 0, 1 );\n\n\t\t\t\tif ( s === 0 ) {\n\n\t\t\t\t\tthis.r = this.g = this.b = l;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n\t\t\t\t\tvar q = ( 2 * l ) - p;\n\n\t\t\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\n\t\t\t\t\tthis.g = hue2rgb( q, p, h );\n\t\t\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\n\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tsetStyle: function ( style ) {\n\n\t\t\tfunction handleAlpha( string ) {\n\n\t\t\t\tif ( string === undefined ) return;\n\n\t\t\t\tif ( parseFloat( string ) < 1 ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tvar m;\n\n\t\t\tif ( m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec( style ) ) {\n\n\t\t\t\t// rgb / hsl\n\n\t\t\t\tvar color;\n\t\t\t\tvar name = m[ 1 ];\n\t\t\t\tvar components = m[ 2 ];\n\n\t\t\t\tswitch ( name ) {\n\n\t\t\t\t\tcase 'rgb':\n\t\t\t\t\tcase 'rgba':\n\n\t\t\t\t\t\tif ( color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\n\t\t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\n\t\t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\n\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\n\t\t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\n\t\t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\n\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'hsl':\n\t\t\t\t\tcase 'hsla':\n\n\t\t\t\t\t\tif ( color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t\t\t\t\t\t\tvar h = parseFloat( color[ 1 ] ) / 360;\n\t\t\t\t\t\t\tvar s = parseInt( color[ 2 ], 10 ) / 100;\n\t\t\t\t\t\t\tvar l = parseInt( color[ 3 ], 10 ) / 100;\n\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\t\treturn this.setHSL( h, s, l );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t} else if ( m = /^\\#([A-Fa-f0-9]+)$/.exec( style ) ) {\n\n\t\t\t\t// hex color\n\n\t\t\t\tvar hex = m[ 1 ];\n\t\t\t\tvar size = hex.length;\n\n\t\t\t\tif ( size === 3 ) {\n\n\t\t\t\t\t// #ff0\n\t\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\n\t\t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t} else if ( size === 6 ) {\n\n\t\t\t\t\t// #ff0000\n\t\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\n\t\t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( style && style.length > 0 ) {\n\n\t\t\t\t// color keywords\n\t\t\t\tvar hex = ColorKeywords[ style ];\n\n\t\t\t\tif ( hex !== undefined ) {\n\n\t\t\t\t\t// red\n\t\t\t\t\tthis.setHex( hex );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// unknown color\n\t\t\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.r, this.g, this.b );\n\n\t\t},\n\n\t\tcopy: function ( color ) {\n\n\t\t\tthis.r = color.r;\n\t\t\tthis.g = color.g;\n\t\t\tthis.b = color.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyGammaToLinear: function ( color, gammaFactor ) {\n\n\t\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\n\t\t\tthis.r = Math.pow( color.r, gammaFactor );\n\t\t\tthis.g = Math.pow( color.g, gammaFactor );\n\t\t\tthis.b = Math.pow( color.b, gammaFactor );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyLinearToGamma: function ( color, gammaFactor ) {\n\n\t\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\n\t\t\tvar safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\n\n\t\t\tthis.r = Math.pow( color.r, safeInverse );\n\t\t\tthis.g = Math.pow( color.g, safeInverse );\n\t\t\tthis.b = Math.pow( color.b, safeInverse );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertGammaToLinear: function () {\n\n\t\t\tvar r = this.r, g = this.g, b = this.b;\n\n\t\t\tthis.r = r * r;\n\t\t\tthis.g = g * g;\n\t\t\tthis.b = b * b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertLinearToGamma: function () {\n\n\t\t\tthis.r = Math.sqrt( this.r );\n\t\t\tthis.g = Math.sqrt( this.g );\n\t\t\tthis.b = Math.sqrt( this.b );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetHex: function () {\n\n\t\t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\n\n\t\t},\n\n\t\tgetHexString: function () {\n\n\t\t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\n\n\t\t},\n\n\t\tgetHSL: function ( optionalTarget ) {\n\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\n\t\t\tvar hsl = optionalTarget || { h: 0, s: 0, l: 0 };\n\n\t\t\tvar r = this.r, g = this.g, b = this.b;\n\n\t\t\tvar max = Math.max( r, g, b );\n\t\t\tvar min = Math.min( r, g, b );\n\n\t\t\tvar hue, saturation;\n\t\t\tvar lightness = ( min + max ) / 2.0;\n\n\t\t\tif ( min === max ) {\n\n\t\t\t\thue = 0;\n\t\t\t\tsaturation = 0;\n\n\t\t\t} else {\n\n\t\t\t\tvar delta = max - min;\n\n\t\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\n\t\t\t\tswitch ( max ) {\n\n\t\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n\t\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\n\t\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\n\n\t\t\t\t}\n\n\t\t\t\thue /= 6;\n\n\t\t\t}\n\n\t\t\thsl.h = hue;\n\t\t\thsl.s = saturation;\n\t\t\thsl.l = lightness;\n\n\t\t\treturn hsl;\n\n\t\t},\n\n\t\tgetStyle: function () {\n\n\t\t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\n\n\t\t},\n\n\t\toffsetHSL: function ( h, s, l ) {\n\n\t\t\tvar hsl = this.getHSL();\n\n\t\t\thsl.h += h; hsl.s += s; hsl.l += l;\n\n\t\t\tthis.setHSL( hsl.h, hsl.s, hsl.l );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( color ) {\n\n\t\t\tthis.r += color.r;\n\t\t\tthis.g += color.g;\n\t\t\tthis.b += color.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddColors: function ( color1, color2 ) {\n\n\t\t\tthis.r = color1.r + color2.r;\n\t\t\tthis.g = color1.g + color2.g;\n\t\t\tthis.b = color1.b + color2.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.r += s;\n\t\t\tthis.g += s;\n\t\t\tthis.b += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function( color ) {\n\n\t\t\tthis.r = Math.max( 0, this.r - color.r );\n\t\t\tthis.g = Math.max( 0, this.g - color.g );\n\t\t\tthis.b = Math.max( 0, this.b - color.b );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( color ) {\n\n\t\t\tthis.r *= color.r;\n\t\t\tthis.g *= color.g;\n\t\t\tthis.b *= color.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( s ) {\n\n\t\t\tthis.r *= s;\n\t\t\tthis.g *= s;\n\t\t\tthis.b *= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerp: function ( color, alpha ) {\n\n\t\t\tthis.r += ( color.r - this.r ) * alpha;\n\t\t\tthis.g += ( color.g - this.g ) * alpha;\n\t\t\tthis.b += ( color.b - this.b ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( c ) {\n\n\t\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tthis.r = array[ offset ];\n\t\t\tthis.g = array[ offset + 1 ];\n\t\t\tthis.b = array[ offset + 2 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tarray[ offset ] = this.r;\n\t\t\tarray[ offset + 1 ] = this.g;\n\t\t\tarray[ offset + 2 ] = this.b;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\treturn this.getHex();\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * Uniforms library for shared webgl shaders\n\t */\n\n\tvar UniformsLib = {\n\n\t\tcommon: {\n\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\t\topacity: { value: 1.0 },\n\n\t\t\tmap: { value: null },\n\t\t\toffsetRepeat: { value: new Vector4( 0, 0, 1, 1 ) },\n\n\t\t\tspecularMap: { value: null },\n\t\t\talphaMap: { value: null },\n\n\t\t\tenvMap: { value: null },\n\t\t\tflipEnvMap: { value: - 1 },\n\t\t\treflectivity: { value: 1.0 },\n\t\t\trefractionRatio: { value: 0.98 }\n\n\t\t},\n\n\t\taomap: {\n\n\t\t\taoMap: { value: null },\n\t\t\taoMapIntensity: { value: 1 }\n\n\t\t},\n\n\t\tlightmap: {\n\n\t\t\tlightMap: { value: null },\n\t\t\tlightMapIntensity: { value: 1 }\n\n\t\t},\n\n\t\temissivemap: {\n\n\t\t\temissiveMap: { value: null }\n\n\t\t},\n\n\t\tbumpmap: {\n\n\t\t\tbumpMap: { value: null },\n\t\t\tbumpScale: { value: 1 }\n\n\t\t},\n\n\t\tnormalmap: {\n\n\t\t\tnormalMap: { value: null },\n\t\t\tnormalScale: { value: new Vector2( 1, 1 ) }\n\n\t\t},\n\n\t\tdisplacementmap: {\n\n\t\t\tdisplacementMap: { value: null },\n\t\t\tdisplacementScale: { value: 1 },\n\t\t\tdisplacementBias: { value: 0 }\n\n\t\t},\n\n\t\troughnessmap: {\n\n\t\t\troughnessMap: { value: null }\n\n\t\t},\n\n\t\tmetalnessmap: {\n\n\t\t\tmetalnessMap: { value: null }\n\n\t\t},\n\n\t\tgradientmap: {\n\n\t\t\tgradientMap: { value: null }\n\n\t\t},\n\n\t\tfog: {\n\n\t\t\tfogDensity: { value: 0.00025 },\n\t\t\tfogNear: { value: 1 },\n\t\t\tfogFar: { value: 2000 },\n\t\t\tfogColor: { value: new Color( 0xffffff ) }\n\n\t\t},\n\n\t\tlights: {\n\n\t\t\tambientLightColor: { value: [] },\n\n\t\t\tdirectionalLights: { value: [], properties: {\n\t\t\t\tdirection: {},\n\t\t\t\tcolor: {},\n\n\t\t\t\tshadow: {},\n\t\t\t\tshadowBias: {},\n\t\t\t\tshadowRadius: {},\n\t\t\t\tshadowMapSize: {}\n\t\t\t} },\n\n\t\t\tdirectionalShadowMap: { value: [] },\n\t\t\tdirectionalShadowMatrix: { value: [] },\n\n\t\t\tspotLights: { value: [], properties: {\n\t\t\t\tcolor: {},\n\t\t\t\tposition: {},\n\t\t\t\tdirection: {},\n\t\t\t\tdistance: {},\n\t\t\t\tconeCos: {},\n\t\t\t\tpenumbraCos: {},\n\t\t\t\tdecay: {},\n\n\t\t\t\tshadow: {},\n\t\t\t\tshadowBias: {},\n\t\t\t\tshadowRadius: {},\n\t\t\t\tshadowMapSize: {}\n\t\t\t} },\n\n\t\t\tspotShadowMap: { value: [] },\n\t\t\tspotShadowMatrix: { value: [] },\n\n\t\t\tpointLights: { value: [], properties: {\n\t\t\t\tcolor: {},\n\t\t\t\tposition: {},\n\t\t\t\tdecay: {},\n\t\t\t\tdistance: {},\n\n\t\t\t\tshadow: {},\n\t\t\t\tshadowBias: {},\n\t\t\t\tshadowRadius: {},\n\t\t\t\tshadowMapSize: {}\n\t\t\t} },\n\n\t\t\tpointShadowMap: { value: [] },\n\t\t\tpointShadowMatrix: { value: [] },\n\n\t\t\themisphereLights: { value: [], properties: {\n\t\t\t\tdirection: {},\n\t\t\t\tskyColor: {},\n\t\t\t\tgroundColor: {}\n\t\t\t} },\n\n\t\t\t// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\n\t\t\trectAreaLights: { value: [], properties: {\n\t\t\t\tcolor: {},\n\t\t\t\tposition: {},\n\t\t\t\twidth: {},\n\t\t\t\theight: {}\n\t\t\t} }\n\n\t\t},\n\n\t\tpoints: {\n\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\t\topacity: { value: 1.0 },\n\t\t\tsize: { value: 1.0 },\n\t\t\tscale: { value: 1.0 },\n\t\t\tmap: { value: null },\n\t\t\toffsetRepeat: { value: new Vector4( 0, 0, 1, 1 ) }\n\n\t\t}\n\n\t};\n\n\t/**\n\t * Uniform Utilities\n\t */\n\n\tvar UniformsUtils = {\n\n\t\tmerge: function ( uniforms ) {\n\n\t\t\tvar merged = {};\n\n\t\t\tfor ( var u = 0; u < uniforms.length; u ++ ) {\n\n\t\t\t\tvar tmp = this.clone( uniforms[ u ] );\n\n\t\t\t\tfor ( var p in tmp ) {\n\n\t\t\t\t\tmerged[ p ] = tmp[ p ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn merged;\n\n\t\t},\n\n\t\tclone: function ( uniforms_src ) {\n\n\t\t\tvar uniforms_dst = {};\n\n\t\t\tfor ( var u in uniforms_src ) {\n\n\t\t\t\tuniforms_dst[ u ] = {};\n\n\t\t\t\tfor ( var p in uniforms_src[ u ] ) {\n\n\t\t\t\t\tvar parameter_src = uniforms_src[ u ][ p ];\n\n\t\t\t\t\tif ( parameter_src && ( parameter_src.isColor ||\n\t\t\t\t\t\tparameter_src.isMatrix3 || parameter_src.isMatrix4 ||\n\t\t\t\t\t\tparameter_src.isVector2 || parameter_src.isVector3 || parameter_src.isVector4 ||\n\t\t\t\t\t\tparameter_src.isTexture ) ) {\n\n\t\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.clone();\n\n\t\t\t\t\t} else if ( Array.isArray( parameter_src ) ) {\n\n\t\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.slice();\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn uniforms_dst;\n\n\t\t}\n\n\t};\n\n\tvar alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\\n\";\n\n\tvar alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\\n\";\n\n\tvar alphatest_fragment = \"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\\n\";\n\n\tvar aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\\n\";\n\n\tvar aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\n\tvar begin_vertex = \"\\nvec3 transformed = vec3( position );\\n\";\n\n\tvar beginnormal_vertex = \"\\nvec3 objectNormal = vec3( normal );\\n\";\n\n\tvar bsdfs = \"float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\\tif( decayExponent > 0.0 ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\t\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\t\\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t\\treturn distanceFalloff * maxDistanceCutoffFactor;\\n#else\\n\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n#endif\\n\\t}\\n\\treturn 1.0;\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE  = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\\n\\tfloat theta = acos( dot( N, V ) );\\n\\tvec2 uv = vec2(\\n\\t\\tsqrt( saturate( roughness ) ),\\n\\t\\tsaturate( theta / ( 0.5 * PI ) ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.86267 + (0.49788 + 0.01436 * y ) * y;\\n\\tfloat b = 3.45068 + (4.18814 + y) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = (x > 0.0) ? v : 0.5 * inversesqrt( 1.0 - x * x ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transpose( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tvec3 result = vec3( LTC_ClippedSphereFormFactor( vectorFormFactor ) );\\n\\treturn result;\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\\n\\treturn specularColor * AB.x + AB.y;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n\";\n\n\tvar bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 );\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\\n\";\n\n\tvar clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; ++ i ) {\\n\\t\\tvec4 plane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t\\t\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; ++ i ) {\\n\\t\\t\\tvec4 plane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\tif ( clipped ) discard;\\n\\t\\n\\t#endif\\n#endif\\n\";\n\n\tvar clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\t\\tvarying vec3 vViewPosition;\\n\\t#endif\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\\n\";\n\n\tvar clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n\";\n\n\tvar clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n\";\n\n\tvar color_fragment = \"#ifdef USE_COLOR\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\n\tvar color_pars_fragment = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\\n\";\n\n\tvar color_pars_vertex = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_vertex = \"#ifdef USE_COLOR\\n\\tvColor.xyz = color.xyz;\\n#endif\";\n\n\tvar common = \"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define PI_HALF 1.5707963267949\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\nmat3 transpose( const in mat3 v ) {\\n\\tmat3 tmp;\\n\\ttmp[0] = vec3(v[0].x, v[1].x, v[2].x);\\n\\ttmp[1] = vec3(v[0].y, v[1].y, v[2].y);\\n\\ttmp[2] = vec3(v[0].z, v[1].z, v[2].z);\\n\\treturn tmp;\\n}\\n\";\n\n\tvar cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_textureSize (1024.0)\\nint getFaceFromDirection(vec3 direction) {\\n\\tvec3 absDirection = abs(direction);\\n\\tint face = -1;\\n\\tif( absDirection.x > absDirection.z ) {\\n\\t\\tif(absDirection.x > absDirection.y )\\n\\t\\t\\tface = direction.x > 0.0 ? 0 : 3;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\telse {\\n\\t\\tif(absDirection.z > absDirection.y )\\n\\t\\t\\tface = direction.z > 0.0 ? 2 : 5;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\treturn face;\\n}\\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\n\\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\n\\tfloat dxRoughness = dFdx(roughness);\\n\\tfloat dyRoughness = dFdy(roughness);\\n\\tvec3 dx = dFdx( vec * scale * dxRoughness );\\n\\tvec3 dy = dFdy( vec * scale * dyRoughness );\\n\\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\\n\\td = clamp(d, 1.0, cubeUV_rangeClamp);\\n\\tfloat mipLevel = 0.5 * log2(d);\\n\\treturn vec2(floor(mipLevel), fract(mipLevel));\\n}\\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\n\\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\n\\tfloat a = 16.0 * cubeUV_rcpTextureSize;\\n\\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\n\\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\n\\tfloat powScale = exp2_packed.x * exp2_packed.y;\\n\\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\n\\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\n\\tbool bRes = mipLevel == 0.0;\\n\\tscale =  bRes && (scale < a) ? a : scale;\\n\\tvec3 r;\\n\\tvec2 offset;\\n\\tint face = getFaceFromDirection(direction);\\n\\tfloat rcpPowScale = 1.0 / powScale;\\n\\tif( face == 0) {\\n\\t\\tr = vec3(direction.x, -direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 1) {\\n\\t\\tr = vec3(direction.y, direction.x, direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 2) {\\n\\t\\tr = vec3(direction.z, direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 3) {\\n\\t\\tr = vec3(direction.x, direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\telse if( face == 4) {\\n\\t\\tr = vec3(direction.y, direction.x, -direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\telse {\\n\\t\\tr = vec3(direction.z, -direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\tr = normalize(r);\\n\\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\\n\\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\n\\tvec2 base = offset + vec2( texelOffset );\\n\\treturn base + s * ( scale - 2.0 * texelOffset );\\n}\\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\\n\\tfloat roughnessVal = roughness* cubeUV_maxLods3;\\n\\tfloat r1 = floor(roughnessVal);\\n\\tfloat r2 = r1 + 1.0;\\n\\tfloat t = fract(roughnessVal);\\n\\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\n\\tfloat s = mipInfo.y;\\n\\tfloat level0 = mipInfo.x;\\n\\tfloat level1 = level0 + 1.0;\\n\\tlevel1 = level1 > 5.0 ? 5.0 : level1;\\n\\tlevel0 += min( floor( s + 0.5 ), 5.0 );\\n\\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\n\\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\n\\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\n\\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\n\\tvec4 result = mix(color10, color20, t);\\n\\treturn vec4(result.rgb, 1.0);\\n}\\n#endif\\n\";\n\n\tvar defaultnormal_vertex = \"vec3 transformedNormal = normalMatrix * objectNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n\";\n\n\tvar displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\\n\";\n\n\tvar displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\\n#endif\\n\";\n\n\tvar emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\\n\";\n\n\tvar emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\\n\";\n\n\tvar encodings_fragment = \"  gl_FragColor = linearToOutputTexel( gl_FragColor );\\n\";\n\n\tvar encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.xyz * value.w * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\\n\\tfloat M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM            = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\\n\\tfloat D      = max( maxRange / maxRGB, 1.0 );\\n\\tD            = min( floor( D ) / 255.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n\\tvec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\\n\\tXp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract(Le);\\n\\tvResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\\n\\treturn vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\\n\\treturn vec4( max(vRGB, 0.0), 1.0 );\\n}\\n\";\n\n\tvar envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\tvec2 sampleUV;\\n\\t\\tsampleUV.y = asin( flipNormal * reflectVec.y ) * RECIPROCAL_PI + 0.5;\\n\\t\\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\tvec4 envColor = texture2D( envMap, sampleUV );\\n\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\\n\\t\\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\\n\";\n\n\tvar envmap_pars_fragment = \"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\\n\\tuniform float reflectivity;\\n\\tuniform float envMapIntensity;\\n#endif\\n#ifdef USE_ENVMAP\\n\\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\tuniform float flipEnvMap;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\\n\";\n\n\tvar envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\\n\";\n\n\tvar envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\n\";\n\n\tvar fog_vertex = \"\\n#ifdef USE_FOG\\nfogDepth = -mvPosition.z;\\n#endif\";\n\n\tvar fog_pars_vertex = \"#ifdef USE_FOG\\n  varying float fogDepth;\\n#endif\\n\";\n\n\tvar fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\\n\";\n\n\tvar fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float fogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\\n\";\n\n\tvar gradientmap_pars_fragment = \"#ifdef TOON\\n\\tuniform sampler2D gradientMap;\\n\\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\t\\tfloat dotNL = dot( normal, lightDirection );\\n\\t\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t\\t#ifdef USE_GRADIENTMAP\\n\\t\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t\\t#else\\n\\t\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\n\n\tvar lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n#endif\\n\";\n\n\tvar lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\n\tvar lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\n\n\tvar lights_pars = \"uniform vec3 ambientLightColor;\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tdirectLight.color = pointLight.color;\\n\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( angleCos > spotLight.coneCos ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltcMat;\\tuniform sampler2D ltcMag;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\\n\\t\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\t\\tvec2 sampleUV;\\n\\t\\t\\tsampleUV.y = saturate( reflectVec.y * 0.5 + 0.5 );\\n\\t\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\\n\";\n\n\tvar lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\\n\";\n\n\tvar lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tvec3\\tspecularColor;\\n\\tfloat\\tspecularShininess;\\n\\tfloat\\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t#ifdef TOON\\n\\t\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\t#else\\n\\t\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\t\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#endif\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\\n\";\n\n\tvar lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\n#ifdef STANDARD\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n\\tmaterial.clearCoat = saturate( clearCoat );\\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\\n#endif\\n\";\n\n\tvar lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tfloat\\tspecularRoughness;\\n\\tvec3\\tspecularColor;\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoat;\\n\\t\\tfloat clearCoatRoughness;\\n\\t#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.specularRoughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos - halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos + halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos + halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos - halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tfloat norm = texture2D( ltcMag, uv ).a;\\n\\t\\tvec4 t = texture2D( ltcMat, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3(   1,   0, t.y ),\\n\\t\\t\\tvec3(   0, t.z,   0 ),\\n\\t\\t\\tvec3( t.w,   0, t.x )\\n\\t\\t);\\n\\t\\treflectedLight.directSpecular += lightColor * material.specularColor * norm * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\\n\\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t#ifndef STANDARD\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\tfloat dotNL = dotNV;\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\\n\";\n\n\tvar lights_template = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = normalize( vViewPosition );\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\\n\\t#endif\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\\n\\t#ifndef STANDARD\\n\\t\\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\\n\\t#else\\n\\t\\tvec3 clearCoatRadiance = vec3( 0.0 );\\n\\t#endif\\n\\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\\n#endif\\n\";\n\n\tvar logdepthbuf_fragment = \"#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\\n\\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\\n#endif\";\n\n\tvar logdepthbuf_pars_fragment = \"#ifdef USE_LOGDEPTHBUF\\n\\tuniform float logDepthBufFC;\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#endif\\n#endif\\n\";\n\n\tvar logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#endif\\n\\tuniform float logDepthBufFC;\\n#endif\";\n\n\tvar logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t#else\\n\\t\\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\\n\\t#endif\\n#endif\\n\";\n\n\tvar map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\\n\";\n\n\tvar map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n\";\n\n\tvar map_particle_fragment = \"#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n\";\n\n\tvar map_particle_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform vec4 offsetRepeat;\\n\\tuniform sampler2D map;\\n#endif\\n\";\n\n\tvar metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\\n\";\n\n\tvar metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\n\tvar morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\\n#endif\\n\";\n\n\tvar morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\t#ifndef USE_MORPHNORMALS\\n\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";\n\n\tvar morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\\n\\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\\n\\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\\n\\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\\n\\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\\n\\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\\n\\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\\n\";\n\n\tvar normal_flip = \"#ifdef DOUBLE_SIDED\\n\\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n#else\\n\\tfloat flipNormal = 1.0;\\n#endif\\n\";\n\n\tvar normal_fragment = \"#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal ) * flipNormal;\\n#endif\\n#ifdef USE_NORMALMAP\\n\\tnormal = perturbNormal2Arb( -vViewPosition, normal );\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\\n\";\n\n\tvar normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\\n\\t\\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\\n\\t\\tvec3 N = normalize( surf_norm );\\n\\t\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t\\tmapN.xy = normalScale * mapN.xy;\\n\\t\\tmat3 tsn = mat3( S, T, N );\\n\\t\\treturn normalize( tsn * mapN );\\n\\t}\\n#endif\\n\";\n\n\tvar packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 1.0 - 2.0 * rgb.xyz;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\\n\";\n\n\tvar premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\\n\";\n\n\tvar project_vertex = \"vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\\ngl_Position = projectionMatrix * mvPosition;\\n\";\n\n\tvar dithering_fragment = \"#if defined( DITHERING )\\n  gl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\\n\";\n\n\tvar dithering_pars_fragment = \"#if defined( DITHERING )\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\\n\";\n\n\tvar roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\\n\";\n\n\tvar roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\n\tvar shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\n\\t\\tconst vec2 offset = vec2( 0.0, 1.0 );\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / size;\\n\\t\\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\\n\\t\\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\n\\t\\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\n\\t\\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\n\\t\\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\n\\t\\tvec2 f = fract( uv * size + 0.5 );\\n\\t\\tfloat a = mix( lb, lt, f.y );\\n\\t\\tfloat b = mix( rb, rt, f.y );\\n\\t\\tfloat c = mix( a, b, f.x );\\n\\t\\treturn c;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\n\n\tvar shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n#endif\\n\";\n\n\tvar shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n#endif\\n\";\n\n\tvar shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\tDirectionalLight directionalLight;\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\tSpotLight spotLight;\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\tPointLight pointLight;\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\\n\";\n\n\tvar skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\n\tvar skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\\n\";\n\n\tvar skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\\n\";\n\n\tvar skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n#endif\\n\";\n\n\tvar specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\n\tvar specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\n\tvar tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\\n\";\n\n\tvar tonemapping_pars_fragment = \"#define saturate(a) clamp( a, 0.0, 1.0 )\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\n\";\n\n\tvar uv_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n#endif\";\n\n\tvar uv_pars_vertex = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n\\tuniform vec4 offsetRepeat;\\n#endif\\n\";\n\n\tvar uv_vertex = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\\n#endif\";\n\n\tvar uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n\n\tvar uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n#endif\";\n\n\tvar uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = uv2;\\n#endif\";\n\n\tvar worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( PHYSICAL ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\\n\\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\\n#endif\\n\";\n\n\tvar cube_frag = \"uniform samplerCube tCube;\\nuniform float tFlip;\\nuniform float opacity;\\nvarying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\\n\\tgl_FragColor.a *= opacity;\\n}\\n\";\n\n\tvar cube_vert = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\\n\";\n\n\tvar depth_frag = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\n\\t#endif\\n}\\n\";\n\n\tvar depth_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";\n\n\tvar distanceRGBA_frag = \"uniform vec3 lightPos;\\nvarying vec4 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tgl_FragColor = packDepthToRGBA( length( vWorldPosition.xyz - lightPos.xyz ) / 1000.0 );\\n}\\n\";\n\n\tvar distanceRGBA_vert = \"varying vec4 vWorldPosition;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <skinbase_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition;\\n}\\n\";\n\n\tvar equirect_frag = \"uniform sampler2D tEquirect;\\nuniform float tFlip;\\nvarying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldPosition );\\n\\tvec2 sampleUV;\\n\\tsampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\\n\\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n}\\n\";\n\n\tvar equirect_vert = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\\n\";\n\n\tvar linedashed_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n\tvar linedashed_vert = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\tvLineDistance = scale * lineDistance;\\n\\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\n\tvar meshbasic_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <normal_flip>\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n\tvar meshbasic_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\n\tvar meshlambert_frag = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <normal_flip>\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\\n\";\n\n\tvar meshlambert_vert = \"#define LAMBERT\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\n\tvar meshphong_frag = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_flip>\\n\\t#include <normal_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_template>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\\n\";\n\n\tvar meshphong_vert = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\n\tvar meshphysical_frag = \"#define PHYSICAL\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifndef STANDARD\\n\\tuniform float clearCoat;\\n\\tuniform float clearCoatRoughness;\\n#endif\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <lights_pars>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_flip>\\n\\t#include <normal_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_template>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\\n\";\n\n\tvar meshphysical_vert = \"#define PHYSICAL\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\n\tvar normal_frag = \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\nvoid main() {\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_flip>\\n\\t#include <normal_fragment>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}\\n\";\n\n\tvar normal_vert = \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\\n\";\n\n\tvar points_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n\tvar points_vert = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tgl_PointSize = size * ( scale / - mvPosition.z );\\n\\t#else\\n\\t\\tgl_PointSize = size;\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\n\tvar shadow_frag = \"uniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( 0.0, 0.0, 0.0, opacity * ( 1.0 - getShadowMask() ) );\\n}\\n\";\n\n\tvar shadow_vert = \"#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\n\tvar ShaderChunk = {\n\t\talphamap_fragment: alphamap_fragment,\n\t\talphamap_pars_fragment: alphamap_pars_fragment,\n\t\talphatest_fragment: alphatest_fragment,\n\t\taomap_fragment: aomap_fragment,\n\t\taomap_pars_fragment: aomap_pars_fragment,\n\t\tbegin_vertex: begin_vertex,\n\t\tbeginnormal_vertex: beginnormal_vertex,\n\t\tbsdfs: bsdfs,\n\t\tbumpmap_pars_fragment: bumpmap_pars_fragment,\n\t\tclipping_planes_fragment: clipping_planes_fragment,\n\t\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n\t\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n\t\tclipping_planes_vertex: clipping_planes_vertex,\n\t\tcolor_fragment: color_fragment,\n\t\tcolor_pars_fragment: color_pars_fragment,\n\t\tcolor_pars_vertex: color_pars_vertex,\n\t\tcolor_vertex: color_vertex,\n\t\tcommon: common,\n\t\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n\t\tdefaultnormal_vertex: defaultnormal_vertex,\n\t\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n\t\tdisplacementmap_vertex: displacementmap_vertex,\n\t\temissivemap_fragment: emissivemap_fragment,\n\t\temissivemap_pars_fragment: emissivemap_pars_fragment,\n\t\tencodings_fragment: encodings_fragment,\n\t\tencodings_pars_fragment: encodings_pars_fragment,\n\t\tenvmap_fragment: envmap_fragment,\n\t\tenvmap_pars_fragment: envmap_pars_fragment,\n\t\tenvmap_pars_vertex: envmap_pars_vertex,\n\t\tenvmap_vertex: envmap_vertex,\n\t\tfog_vertex: fog_vertex,\n\t\tfog_pars_vertex: fog_pars_vertex,\n\t\tfog_fragment: fog_fragment,\n\t\tfog_pars_fragment: fog_pars_fragment,\n\t\tgradientmap_pars_fragment: gradientmap_pars_fragment,\n\t\tlightmap_fragment: lightmap_fragment,\n\t\tlightmap_pars_fragment: lightmap_pars_fragment,\n\t\tlights_lambert_vertex: lights_lambert_vertex,\n\t\tlights_pars: lights_pars,\n\t\tlights_phong_fragment: lights_phong_fragment,\n\t\tlights_phong_pars_fragment: lights_phong_pars_fragment,\n\t\tlights_physical_fragment: lights_physical_fragment,\n\t\tlights_physical_pars_fragment: lights_physical_pars_fragment,\n\t\tlights_template: lights_template,\n\t\tlogdepthbuf_fragment: logdepthbuf_fragment,\n\t\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n\t\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n\t\tlogdepthbuf_vertex: logdepthbuf_vertex,\n\t\tmap_fragment: map_fragment,\n\t\tmap_pars_fragment: map_pars_fragment,\n\t\tmap_particle_fragment: map_particle_fragment,\n\t\tmap_particle_pars_fragment: map_particle_pars_fragment,\n\t\tmetalnessmap_fragment: metalnessmap_fragment,\n\t\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n\t\tmorphnormal_vertex: morphnormal_vertex,\n\t\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n\t\tmorphtarget_vertex: morphtarget_vertex,\n\t\tnormal_flip: normal_flip,\n\t\tnormal_fragment: normal_fragment,\n\t\tnormalmap_pars_fragment: normalmap_pars_fragment,\n\t\tpacking: packing,\n\t\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n\t\tproject_vertex: project_vertex,\n\t\tdithering_fragment: dithering_fragment,\n\t\tdithering_pars_fragment: dithering_pars_fragment,\n\t\troughnessmap_fragment: roughnessmap_fragment,\n\t\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n\t\tshadowmap_pars_fragment: shadowmap_pars_fragment,\n\t\tshadowmap_pars_vertex: shadowmap_pars_vertex,\n\t\tshadowmap_vertex: shadowmap_vertex,\n\t\tshadowmask_pars_fragment: shadowmask_pars_fragment,\n\t\tskinbase_vertex: skinbase_vertex,\n\t\tskinning_pars_vertex: skinning_pars_vertex,\n\t\tskinning_vertex: skinning_vertex,\n\t\tskinnormal_vertex: skinnormal_vertex,\n\t\tspecularmap_fragment: specularmap_fragment,\n\t\tspecularmap_pars_fragment: specularmap_pars_fragment,\n\t\ttonemapping_fragment: tonemapping_fragment,\n\t\ttonemapping_pars_fragment: tonemapping_pars_fragment,\n\t\tuv_pars_fragment: uv_pars_fragment,\n\t\tuv_pars_vertex: uv_pars_vertex,\n\t\tuv_vertex: uv_vertex,\n\t\tuv2_pars_fragment: uv2_pars_fragment,\n\t\tuv2_pars_vertex: uv2_pars_vertex,\n\t\tuv2_vertex: uv2_vertex,\n\t\tworldpos_vertex: worldpos_vertex,\n\n\t\tcube_frag: cube_frag,\n\t\tcube_vert: cube_vert,\n\t\tdepth_frag: depth_frag,\n\t\tdepth_vert: depth_vert,\n\t\tdistanceRGBA_frag: distanceRGBA_frag,\n\t\tdistanceRGBA_vert: distanceRGBA_vert,\n\t\tequirect_frag: equirect_frag,\n\t\tequirect_vert: equirect_vert,\n\t\tlinedashed_frag: linedashed_frag,\n\t\tlinedashed_vert: linedashed_vert,\n\t\tmeshbasic_frag: meshbasic_frag,\n\t\tmeshbasic_vert: meshbasic_vert,\n\t\tmeshlambert_frag: meshlambert_frag,\n\t\tmeshlambert_vert: meshlambert_vert,\n\t\tmeshphong_frag: meshphong_frag,\n\t\tmeshphong_vert: meshphong_vert,\n\t\tmeshphysical_frag: meshphysical_frag,\n\t\tmeshphysical_vert: meshphysical_vert,\n\t\tnormal_frag: normal_frag,\n\t\tnormal_vert: normal_vert,\n\t\tpoints_frag: points_frag,\n\t\tpoints_vert: points_vert,\n\t\tshadow_frag: shadow_frag,\n\t\tshadow_vert: shadow_vert\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t */\n\n\tvar ShaderLib = {\n\n\t\tbasic: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.fog\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshbasic_vert,\n\t\t\tfragmentShader: ShaderChunk.meshbasic_frag\n\n\t\t},\n\n\t\tlambert: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshlambert_vert,\n\t\t\tfragmentShader: ShaderChunk.meshlambert_frag\n\n\t\t},\n\n\t\tphong: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\tUniformsLib.gradientmap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\t\tspecular: { value: new Color( 0x111111 ) },\n\t\t\t\t\tshininess: { value: 30 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshphong_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphong_frag\n\n\t\t},\n\n\t\tstandard: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\tUniformsLib.roughnessmap,\n\t\t\t\tUniformsLib.metalnessmap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\t\troughness: { value: 0.5 },\n\t\t\t\t\tmetalness: { value: 0.5 },\n\t\t\t\t\tenvMapIntensity: { value: 1 } // temporary\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\n\t\t},\n\n\t\tpoints: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.points,\n\t\t\t\tUniformsLib.fog\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.points_vert,\n\t\t\tfragmentShader: ShaderChunk.points_frag\n\n\t\t},\n\n\t\tdashed: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\t{\n\t\t\t\t\tscale: { value: 1 },\n\t\t\t\t\tdashSize: { value: 1 },\n\t\t\t\t\ttotalSize: { value: 2 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.linedashed_vert,\n\t\t\tfragmentShader: ShaderChunk.linedashed_frag\n\n\t\t},\n\n\t\tdepth: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.displacementmap\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.depth_vert,\n\t\t\tfragmentShader: ShaderChunk.depth_frag\n\n\t\t},\n\n\t\tnormal: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\t{\n\t\t\t\t\topacity: { value: 1.0 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.normal_vert,\n\t\t\tfragmentShader: ShaderChunk.normal_frag\n\n\t\t},\n\n\t\t/* -------------------------------------------------------------------------\n\t\t//\tCube map shader\n\t\t ------------------------------------------------------------------------- */\n\n\t\tcube: {\n\n\t\t\tuniforms: {\n\t\t\t\ttCube: { value: null },\n\t\t\t\ttFlip: { value: - 1 },\n\t\t\t\topacity: { value: 1.0 }\n\t\t\t},\n\n\t\t\tvertexShader: ShaderChunk.cube_vert,\n\t\t\tfragmentShader: ShaderChunk.cube_frag\n\n\t\t},\n\n\t\t/* -------------------------------------------------------------------------\n\t\t//\tCube map shader\n\t\t ------------------------------------------------------------------------- */\n\n\t\tequirect: {\n\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: { value: null },\n\t\t\t\ttFlip: { value: - 1 }\n\t\t\t},\n\n\t\t\tvertexShader: ShaderChunk.equirect_vert,\n\t\t\tfragmentShader: ShaderChunk.equirect_frag\n\n\t\t},\n\n\t\tdistanceRGBA: {\n\n\t\t\tuniforms: {\n\t\t\t\tlightPos: { value: new Vector3() }\n\t\t\t},\n\n\t\t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n\t\t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\n\t\t}\n\n\t};\n\n\tShaderLib.physical = {\n\n\t\tuniforms: UniformsUtils.merge( [\n\t\t\tShaderLib.standard.uniforms,\n\t\t\t{\n\t\t\t\tclearCoat: { value: 0 },\n\t\t\t\tclearCoatRoughness: { value: 0 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\n\t};\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Box2( min, max ) {\n\n\t\tthis.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );\n\t\tthis.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );\n\n\t}\n\n\tObject.assign( Box2.prototype, {\n\n\t\tset: function ( min, max ) {\n\n\t\t\tthis.min.copy( min );\n\t\t\tthis.max.copy( max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCenterAndSize: function () {\n\n\t\t\tvar v1 = new Vector2();\n\n\t\t\treturn function setFromCenterAndSize( center, size ) {\n\n\t\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n\t\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\t\tthis.max.copy( center ).add( halfSize );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( box ) {\n\n\t\t\tthis.min.copy( box.min );\n\t\t\tthis.max.copy( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeEmpty: function () {\n\n\t\t\tthis.min.x = this.min.y = + Infinity;\n\t\t\tthis.max.x = this.max.y = - Infinity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tisEmpty: function () {\n\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\n\t\t},\n\n\t\tgetCenter: function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector2();\n\t\t\treturn this.isEmpty() ? result.set( 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t\t},\n\n\t\tgetSize: function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector2();\n\t\t\treturn this.isEmpty() ? result.set( 0, 0 ) : result.subVectors( this.max, this.min );\n\n\t\t},\n\n\t\texpandByPoint: function ( point ) {\n\n\t\t\tthis.min.min( point );\n\t\t\tthis.max.max( point );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByVector: function ( vector ) {\n\n\t\t\tthis.min.sub( vector );\n\t\t\tthis.max.add( vector );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByScalar: function ( scalar ) {\n\n\t\t\tthis.min.addScalar( - scalar );\n\t\t\tthis.max.addScalar( scalar );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\t\tpoint.y < this.min.y || point.y > this.max.y ? false : true;\n\n\t\t},\n\n\t\tcontainsBox: function ( box ) {\n\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y;\n\n\t\t},\n\n\t\tgetParameter: function ( point, optionalTarget ) {\n\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\n\t\t\tvar result = optionalTarget || new Vector2();\n\n\t\t\treturn result.set(\n\t\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\n\t\t\t);\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\t// using 4 splitting planes to rule out intersections\n\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ? false : true;\n\n\t\t},\n\n\t\tclampPoint: function ( point, optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector2();\n\t\t\treturn result.copy( point ).clamp( this.min, this.max );\n\n\t\t},\n\n\t\tdistanceToPoint: function () {\n\n\t\t\tvar v1 = new Vector2();\n\n\t\t\treturn function distanceToPoint( point ) {\n\n\t\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n\t\t\t\treturn clampedPoint.sub( point ).length();\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tintersect: function ( box ) {\n\n\t\t\tthis.min.max( box.min );\n\t\t\tthis.max.min( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tunion: function ( box ) {\n\n\t\t\tthis.min.min( box.min );\n\t\t\tthis.max.max( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.min.add( offset );\n\t\t\tthis.max.add( offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( box ) {\n\n\t\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction LensFlarePlugin( renderer, flares ) {\n\n\t\tvar gl = renderer.context;\n\t\tvar state = renderer.state;\n\n\t\tvar vertexBuffer, elementBuffer;\n\t\tvar shader, program, attributes, uniforms;\n\n\t\tvar tempTexture, occlusionTexture;\n\n\t\tfunction init() {\n\n\t\t\tvar vertices = new Float32Array( [\n\t\t\t\t- 1, - 1,  0, 0,\n\t\t\t\t 1, - 1,  1, 0,\n\t\t\t\t 1,  1,  1, 1,\n\t\t\t\t- 1,  1,  0, 1\n\t\t\t] );\n\n\t\t\tvar faces = new Uint16Array( [\n\t\t\t\t0, 1, 2,\n\t\t\t\t0, 2, 3\n\t\t\t] );\n\n\t\t\t// buffers\n\n\t\t\tvertexBuffer     = gl.createBuffer();\n\t\t\telementBuffer    = gl.createBuffer();\n\n\t\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\n\n\t\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\t\t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\n\n\t\t\t// textures\n\n\t\t\ttempTexture      = gl.createTexture();\n\t\t\tocclusionTexture = gl.createTexture();\n\n\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t\t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null );\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\n\t\t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\n\t\t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null );\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\n\t\t\tshader = {\n\n\t\t\t\tvertexShader: [\n\n\t\t\t\t\t\"uniform lowp int renderType;\",\n\n\t\t\t\t\t\"uniform vec3 screenPosition;\",\n\t\t\t\t\t\"uniform vec2 scale;\",\n\t\t\t\t\t\"uniform float rotation;\",\n\n\t\t\t\t\t\"uniform sampler2D occlusionMap;\",\n\n\t\t\t\t\t\"attribute vec2 position;\",\n\t\t\t\t\t\"attribute vec2 uv;\",\n\n\t\t\t\t\t\"varying vec2 vUV;\",\n\t\t\t\t\t\"varying float vVisibility;\",\n\n\t\t\t\t\t\"void main() {\",\n\n\t\t\t\t\t\t\"vUV = uv;\",\n\n\t\t\t\t\t\t\"vec2 pos = position;\",\n\n\t\t\t\t\t\t\"if ( renderType == 2 ) {\",\n\n\t\t\t\t\t\t\t\"vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\",\n\n\t\t\t\t\t\t\t\"vVisibility =        visibility.r / 9.0;\",\n\t\t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.g / 9.0;\",\n\t\t\t\t\t\t\t\"vVisibility *=       visibility.b / 9.0;\",\n\t\t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.a / 9.0;\",\n\n\t\t\t\t\t\t\t\"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\",\n\t\t\t\t\t\t\t\"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\",\n\n\t\t\t\t\t\t\"}\",\n\n\t\t\t\t\t\t\"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\",\n\n\t\t\t\t\t\"}\"\n\n\t\t\t\t].join( \"\\n\" ),\n\n\t\t\t\tfragmentShader: [\n\n\t\t\t\t\t\"uniform lowp int renderType;\",\n\n\t\t\t\t\t\"uniform sampler2D map;\",\n\t\t\t\t\t\"uniform float opacity;\",\n\t\t\t\t\t\"uniform vec3 color;\",\n\n\t\t\t\t\t\"varying vec2 vUV;\",\n\t\t\t\t\t\"varying float vVisibility;\",\n\n\t\t\t\t\t\"void main() {\",\n\n\t\t\t\t\t\t// pink square\n\n\t\t\t\t\t\t\"if ( renderType == 0 ) {\",\n\n\t\t\t\t\t\t\t\"gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\",\n\n\t\t\t\t\t\t// restore\n\n\t\t\t\t\t\t\"} else if ( renderType == 1 ) {\",\n\n\t\t\t\t\t\t\t\"gl_FragColor = texture2D( map, vUV );\",\n\n\t\t\t\t\t\t// flare\n\n\t\t\t\t\t\t\"} else {\",\n\n\t\t\t\t\t\t\t\"vec4 texture = texture2D( map, vUV );\",\n\t\t\t\t\t\t\t\"texture.a *= opacity * vVisibility;\",\n\t\t\t\t\t\t\t\"gl_FragColor = texture;\",\n\t\t\t\t\t\t\t\"gl_FragColor.rgb *= color;\",\n\n\t\t\t\t\t\t\"}\",\n\n\t\t\t\t\t\"}\"\n\n\t\t\t\t].join( \"\\n\" )\n\n\t\t\t};\n\n\t\t\tprogram = createProgram( shader );\n\n\t\t\tattributes = {\n\t\t\t\tvertex: gl.getAttribLocation ( program, \"position\" ),\n\t\t\t\tuv:     gl.getAttribLocation ( program, \"uv\" )\n\t\t\t};\n\n\t\t\tuniforms = {\n\t\t\t\trenderType:     gl.getUniformLocation( program, \"renderType\" ),\n\t\t\t\tmap:            gl.getUniformLocation( program, \"map\" ),\n\t\t\t\tocclusionMap:   gl.getUniformLocation( program, \"occlusionMap\" ),\n\t\t\t\topacity:        gl.getUniformLocation( program, \"opacity\" ),\n\t\t\t\tcolor:          gl.getUniformLocation( program, \"color\" ),\n\t\t\t\tscale:          gl.getUniformLocation( program, \"scale\" ),\n\t\t\t\trotation:       gl.getUniformLocation( program, \"rotation\" ),\n\t\t\t\tscreenPosition: gl.getUniformLocation( program, \"screenPosition\" )\n\t\t\t};\n\n\t\t}\n\n\t\t/*\n\t\t * Render lens flares\n\t\t * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,\n\t\t *         reads these back and calculates occlusion.\n\t\t */\n\n\t\tthis.render = function ( scene, camera, viewport ) {\n\n\t\t\tif ( flares.length === 0 ) return;\n\n\t\t\tvar tempPosition = new Vector3();\n\n\t\t\tvar invAspect = viewport.w / viewport.z,\n\t\t\t\thalfViewportWidth = viewport.z * 0.5,\n\t\t\t\thalfViewportHeight = viewport.w * 0.5;\n\n\t\t\tvar size = 16 / viewport.w,\n\t\t\t\tscale = new Vector2( size * invAspect, size );\n\n\t\t\tvar screenPosition = new Vector3( 1, 1, 0 ),\n\t\t\t\tscreenPositionPixels = new Vector2( 1, 1 );\n\n\t\t\tvar validArea = new Box2();\n\n\t\t\tvalidArea.min.set( viewport.x, viewport.y );\n\t\t\tvalidArea.max.set( viewport.x + ( viewport.z - 16 ), viewport.y + ( viewport.w - 16 ) );\n\n\t\t\tif ( program === undefined ) {\n\n\t\t\t\tinit();\n\n\t\t\t}\n\n\t\t\tgl.useProgram( program );\n\n\t\t\tstate.initAttributes();\n\t\t\tstate.enableAttribute( attributes.vertex );\n\t\t\tstate.enableAttribute( attributes.uv );\n\t\t\tstate.disableUnusedAttributes();\n\n\t\t\t// loop through all lens flares to update their occlusion and positions\n\t\t\t// setup gl and common used attribs/uniforms\n\n\t\t\tgl.uniform1i( uniforms.occlusionMap, 0 );\n\t\t\tgl.uniform1i( uniforms.map, 1 );\n\n\t\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\t\tgl.vertexAttribPointer( attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0 );\n\t\t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\n\n\t\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\n\t\t\tstate.disable( gl.CULL_FACE );\n\t\t\tstate.buffers.depth.setMask( false );\n\n\t\t\tfor ( var i = 0, l = flares.length; i < l; i ++ ) {\n\n\t\t\t\tsize = 16 / viewport.w;\n\t\t\t\tscale.set( size * invAspect, size );\n\n\t\t\t\t// calc object screen position\n\n\t\t\t\tvar flare = flares[ i ];\n\n\t\t\t\ttempPosition.set( flare.matrixWorld.elements[ 12 ], flare.matrixWorld.elements[ 13 ], flare.matrixWorld.elements[ 14 ] );\n\n\t\t\t\ttempPosition.applyMatrix4( camera.matrixWorldInverse );\n\t\t\t\ttempPosition.applyMatrix4( camera.projectionMatrix );\n\n\t\t\t\t// setup arrays for gl programs\n\n\t\t\t\tscreenPosition.copy( tempPosition );\n\n\t\t\t\t// horizontal and vertical coordinate of the lower left corner of the pixels to copy\n\n\t\t\t\tscreenPositionPixels.x = viewport.x + ( screenPosition.x * halfViewportWidth ) + halfViewportWidth - 8;\n\t\t\t\tscreenPositionPixels.y = viewport.y + ( screenPosition.y * halfViewportHeight ) + halfViewportHeight - 8;\n\n\t\t\t\t// screen cull\n\n\t\t\t\tif ( validArea.containsPoint( screenPositionPixels ) === true ) {\n\n\t\t\t\t\t// save current RGB to temp texture\n\n\t\t\t\t\tstate.activeTexture( gl.TEXTURE0 );\n\t\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, null );\n\t\t\t\t\tstate.activeTexture( gl.TEXTURE1 );\n\t\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t\t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGB, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );\n\n\n\t\t\t\t\t// render pink quad\n\n\t\t\t\t\tgl.uniform1i( uniforms.renderType, 0 );\n\t\t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\n\t\t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\n\n\t\t\t\t\tstate.disable( gl.BLEND );\n\t\t\t\t\tstate.enable( gl.DEPTH_TEST );\n\n\t\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\n\t\t\t\t\t// copy result to occlusionMap\n\n\t\t\t\t\tstate.activeTexture( gl.TEXTURE0 );\n\t\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\n\t\t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGBA, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );\n\n\n\t\t\t\t\t// restore graphics\n\n\t\t\t\t\tgl.uniform1i( uniforms.renderType, 1 );\n\t\t\t\t\tstate.disable( gl.DEPTH_TEST );\n\n\t\t\t\t\tstate.activeTexture( gl.TEXTURE1 );\n\t\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\n\t\t\t\t\t// update object positions\n\n\t\t\t\t\tflare.positionScreen.copy( screenPosition );\n\n\t\t\t\t\tif ( flare.customUpdateCallback ) {\n\n\t\t\t\t\t\tflare.customUpdateCallback( flare );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tflare.updateLensFlares();\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// render flares\n\n\t\t\t\t\tgl.uniform1i( uniforms.renderType, 2 );\n\t\t\t\t\tstate.enable( gl.BLEND );\n\n\t\t\t\t\tfor ( var j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar sprite = flare.lensFlares[ j ];\n\n\t\t\t\t\t\tif ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {\n\n\t\t\t\t\t\t\tscreenPosition.x = sprite.x;\n\t\t\t\t\t\t\tscreenPosition.y = sprite.y;\n\t\t\t\t\t\t\tscreenPosition.z = sprite.z;\n\n\t\t\t\t\t\t\tsize = sprite.size * sprite.scale / viewport.w;\n\n\t\t\t\t\t\t\tscale.x = size * invAspect;\n\t\t\t\t\t\t\tscale.y = size;\n\n\t\t\t\t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\n\t\t\t\t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\n\t\t\t\t\t\t\tgl.uniform1f( uniforms.rotation, sprite.rotation );\n\n\t\t\t\t\t\t\tgl.uniform1f( uniforms.opacity, sprite.opacity );\n\t\t\t\t\t\t\tgl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );\n\n\t\t\t\t\t\t\tstate.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );\n\t\t\t\t\t\t\trenderer.setTexture2D( sprite.texture, 1 );\n\n\t\t\t\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// restore gl\n\n\t\t\tstate.enable( gl.CULL_FACE );\n\t\t\tstate.enable( gl.DEPTH_TEST );\n\t\t\tstate.buffers.depth.setMask( true );\n\n\t\t\trenderer.resetGLState();\n\n\t\t};\n\n\t\tfunction createProgram( shader ) {\n\n\t\t\tvar program = gl.createProgram();\n\n\t\t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\n\t\t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\n\n\t\t\tvar prefix = \"precision \" + renderer.getPrecision() + \" float;\\n\";\n\n\t\t\tgl.shaderSource( fragmentShader, prefix + shader.fragmentShader );\n\t\t\tgl.shaderSource( vertexShader, prefix + shader.vertexShader );\n\n\t\t\tgl.compileShader( fragmentShader );\n\t\t\tgl.compileShader( vertexShader );\n\n\t\t\tgl.attachShader( program, fragmentShader );\n\t\t\tgl.attachShader( program, vertexShader );\n\n\t\t\tgl.linkProgram( program );\n\n\t\t\treturn program;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction SpritePlugin( renderer, sprites ) {\n\n\t\tvar gl = renderer.context;\n\t\tvar state = renderer.state;\n\n\t\tvar vertexBuffer, elementBuffer;\n\t\tvar program, attributes, uniforms;\n\n\t\tvar texture;\n\n\t\t// decompose matrixWorld\n\n\t\tvar spritePosition = new Vector3();\n\t\tvar spriteRotation = new Quaternion();\n\t\tvar spriteScale = new Vector3();\n\n\t\tfunction init() {\n\n\t\t\tvar vertices = new Float32Array( [\n\t\t\t\t- 0.5, - 0.5,  0, 0,\n\t\t\t\t  0.5, - 0.5,  1, 0,\n\t\t\t\t  0.5,   0.5,  1, 1,\n\t\t\t\t- 0.5,   0.5,  0, 1\n\t\t\t] );\n\n\t\t\tvar faces = new Uint16Array( [\n\t\t\t\t0, 1, 2,\n\t\t\t\t0, 2, 3\n\t\t\t] );\n\n\t\t\tvertexBuffer  = gl.createBuffer();\n\t\t\telementBuffer = gl.createBuffer();\n\n\t\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\n\n\t\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\t\t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\n\n\t\t\tprogram = createProgram();\n\n\t\t\tattributes = {\n\t\t\t\tposition:\t\t\tgl.getAttribLocation ( program, 'position' ),\n\t\t\t\tuv:\t\t\t\t\tgl.getAttribLocation ( program, 'uv' )\n\t\t\t};\n\n\t\t\tuniforms = {\n\t\t\t\tuvOffset:\t\t\tgl.getUniformLocation( program, 'uvOffset' ),\n\t\t\t\tuvScale:\t\t\tgl.getUniformLocation( program, 'uvScale' ),\n\n\t\t\t\trotation:\t\t\tgl.getUniformLocation( program, 'rotation' ),\n\t\t\t\tscale:\t\t\t\tgl.getUniformLocation( program, 'scale' ),\n\n\t\t\t\tcolor:\t\t\t\tgl.getUniformLocation( program, 'color' ),\n\t\t\t\tmap:\t\t\t\tgl.getUniformLocation( program, 'map' ),\n\t\t\t\topacity:\t\t\tgl.getUniformLocation( program, 'opacity' ),\n\n\t\t\t\tmodelViewMatrix: \tgl.getUniformLocation( program, 'modelViewMatrix' ),\n\t\t\t\tprojectionMatrix:\tgl.getUniformLocation( program, 'projectionMatrix' ),\n\n\t\t\t\tfogType:\t\t\tgl.getUniformLocation( program, 'fogType' ),\n\t\t\t\tfogDensity:\t\t\tgl.getUniformLocation( program, 'fogDensity' ),\n\t\t\t\tfogNear:\t\t\tgl.getUniformLocation( program, 'fogNear' ),\n\t\t\t\tfogFar:\t\t\t\tgl.getUniformLocation( program, 'fogFar' ),\n\t\t\t\tfogColor:\t\t\tgl.getUniformLocation( program, 'fogColor' ),\n\n\t\t\t\talphaTest:\t\t\tgl.getUniformLocation( program, 'alphaTest' )\n\t\t\t};\n\n\t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\tcanvas.width = 8;\n\t\t\tcanvas.height = 8;\n\n\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\tcontext.fillStyle = 'white';\n\t\t\tcontext.fillRect( 0, 0, 8, 8 );\n\n\t\t\ttexture = new Texture( canvas );\n\t\t\ttexture.needsUpdate = true;\n\n\t\t}\n\n\t\tthis.render = function ( scene, camera ) {\n\n\t\t\tif ( sprites.length === 0 ) return;\n\n\t\t\t// setup gl\n\n\t\t\tif ( program === undefined ) {\n\n\t\t\t\tinit();\n\n\t\t\t}\n\n\t\t\tgl.useProgram( program );\n\n\t\t\tstate.initAttributes();\n\t\t\tstate.enableAttribute( attributes.position );\n\t\t\tstate.enableAttribute( attributes.uv );\n\t\t\tstate.disableUnusedAttributes();\n\n\t\t\tstate.disable( gl.CULL_FACE );\n\t\t\tstate.enable( gl.BLEND );\n\n\t\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\t\tgl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );\n\t\t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\n\n\t\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\n\t\t\tgl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );\n\n\t\t\tstate.activeTexture( gl.TEXTURE0 );\n\t\t\tgl.uniform1i( uniforms.map, 0 );\n\n\t\t\tvar oldFogType = 0;\n\t\t\tvar sceneFogType = 0;\n\t\t\tvar fog = scene.fog;\n\n\t\t\tif ( fog ) {\n\n\t\t\t\tgl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );\n\n\t\t\t\tif ( fog.isFog ) {\n\n\t\t\t\t\tgl.uniform1f( uniforms.fogNear, fog.near );\n\t\t\t\t\tgl.uniform1f( uniforms.fogFar, fog.far );\n\n\t\t\t\t\tgl.uniform1i( uniforms.fogType, 1 );\n\t\t\t\t\toldFogType = 1;\n\t\t\t\t\tsceneFogType = 1;\n\n\t\t\t\t} else if ( fog.isFogExp2 ) {\n\n\t\t\t\t\tgl.uniform1f( uniforms.fogDensity, fog.density );\n\n\t\t\t\t\tgl.uniform1i( uniforms.fogType, 2 );\n\t\t\t\t\toldFogType = 2;\n\t\t\t\t\tsceneFogType = 2;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tgl.uniform1i( uniforms.fogType, 0 );\n\t\t\t\toldFogType = 0;\n\t\t\t\tsceneFogType = 0;\n\n\t\t\t}\n\n\n\t\t\t// update positions and sort\n\n\t\t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\n\n\t\t\t\tvar sprite = sprites[ i ];\n\n\t\t\t\tsprite.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );\n\t\t\t\tsprite.z = - sprite.modelViewMatrix.elements[ 14 ];\n\n\t\t\t}\n\n\t\t\tsprites.sort( painterSortStable );\n\n\t\t\t// render all sprites\n\n\t\t\tvar scale = [];\n\n\t\t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\n\n\t\t\t\tvar sprite = sprites[ i ];\n\t\t\t\tvar material = sprite.material;\n\n\t\t\t\tif ( material.visible === false ) continue;\n\n\t\t\t\tsprite.onBeforeRender( renderer, scene, camera, undefined, material, undefined );\n\n\t\t\t\tgl.uniform1f( uniforms.alphaTest, material.alphaTest );\n\t\t\t\tgl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements );\n\n\t\t\t\tsprite.matrixWorld.decompose( spritePosition, spriteRotation, spriteScale );\n\n\t\t\t\tscale[ 0 ] = spriteScale.x;\n\t\t\t\tscale[ 1 ] = spriteScale.y;\n\n\t\t\t\tvar fogType = 0;\n\n\t\t\t\tif ( scene.fog && material.fog ) {\n\n\t\t\t\t\tfogType = sceneFogType;\n\n\t\t\t\t}\n\n\t\t\t\tif ( oldFogType !== fogType ) {\n\n\t\t\t\t\tgl.uniform1i( uniforms.fogType, fogType );\n\t\t\t\t\toldFogType = fogType;\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.map !== null ) {\n\n\t\t\t\t\tgl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );\n\t\t\t\t\tgl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.uniform2f( uniforms.uvOffset, 0, 0 );\n\t\t\t\t\tgl.uniform2f( uniforms.uvScale, 1, 1 );\n\n\t\t\t\t}\n\n\t\t\t\tgl.uniform1f( uniforms.opacity, material.opacity );\n\t\t\t\tgl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );\n\n\t\t\t\tgl.uniform1f( uniforms.rotation, material.rotation );\n\t\t\t\tgl.uniform2fv( uniforms.scale, scale );\n\n\t\t\t\tstate.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );\n\t\t\t\tstate.buffers.depth.setTest( material.depthTest );\n\t\t\t\tstate.buffers.depth.setMask( material.depthWrite );\n\n\t\t\t\tif ( material.map ) {\n\n\t\t\t\t\trenderer.setTexture2D( material.map, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderer.setTexture2D( texture, 0 );\n\n\t\t\t\t}\n\n\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\t\t\t\tsprite.onAfterRender( renderer, scene, camera, undefined, material, undefined );\n\n\t\t\t}\n\n\t\t\t// restore gl\n\n\t\t\tstate.enable( gl.CULL_FACE );\n\n\t\t\trenderer.resetGLState();\n\n\t\t};\n\n\t\tfunction createProgram() {\n\n\t\t\tvar program = gl.createProgram();\n\n\t\t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\n\t\t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\n\n\t\t\tgl.shaderSource( vertexShader, [\n\n\t\t\t\t'precision ' + renderer.getPrecision() + ' float;',\n\n\t\t\t\t'#define SHADER_NAME ' + 'SpriteMaterial',\n\n\t\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t\t'uniform float rotation;',\n\t\t\t\t'uniform vec2 scale;',\n\t\t\t\t'uniform vec2 uvOffset;',\n\t\t\t\t'uniform vec2 uvScale;',\n\n\t\t\t\t'attribute vec2 position;',\n\t\t\t\t'attribute vec2 uv;',\n\n\t\t\t\t'varying vec2 vUV;',\n\n\t\t\t\t'void main() {',\n\n\t\t\t\t\t'vUV = uvOffset + uv * uvScale;',\n\n\t\t\t\t\t'vec2 alignedPosition = position * scale;',\n\n\t\t\t\t\t'vec2 rotatedPosition;',\n\t\t\t\t\t'rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',\n\t\t\t\t\t'rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',\n\n\t\t\t\t\t'vec4 finalPosition;',\n\n\t\t\t\t\t'finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',\n\t\t\t\t\t'finalPosition.xy += rotatedPosition;',\n\t\t\t\t\t'finalPosition = projectionMatrix * finalPosition;',\n\n\t\t\t\t\t'gl_Position = finalPosition;',\n\n\t\t\t\t'}'\n\n\t\t\t].join( '\\n' ) );\n\n\t\t\tgl.shaderSource( fragmentShader, [\n\n\t\t\t\t'precision ' + renderer.getPrecision() + ' float;',\n\n\t\t\t\t'#define SHADER_NAME ' + 'SpriteMaterial',\n\n\t\t\t\t'uniform vec3 color;',\n\t\t\t\t'uniform sampler2D map;',\n\t\t\t\t'uniform float opacity;',\n\n\t\t\t\t'uniform int fogType;',\n\t\t\t\t'uniform vec3 fogColor;',\n\t\t\t\t'uniform float fogDensity;',\n\t\t\t\t'uniform float fogNear;',\n\t\t\t\t'uniform float fogFar;',\n\t\t\t\t'uniform float alphaTest;',\n\n\t\t\t\t'varying vec2 vUV;',\n\n\t\t\t\t'void main() {',\n\n\t\t\t\t\t'vec4 texture = texture2D( map, vUV );',\n\n\t\t\t\t\t'if ( texture.a < alphaTest ) discard;',\n\n\t\t\t\t\t'gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',\n\n\t\t\t\t\t'if ( fogType > 0 ) {',\n\n\t\t\t\t\t\t'float depth = gl_FragCoord.z / gl_FragCoord.w;',\n\t\t\t\t\t\t'float fogFactor = 0.0;',\n\n\t\t\t\t\t\t'if ( fogType == 1 ) {',\n\n\t\t\t\t\t\t\t'fogFactor = smoothstep( fogNear, fogFar, depth );',\n\n\t\t\t\t\t\t'} else {',\n\n\t\t\t\t\t\t\t'const float LOG2 = 1.442695;',\n\t\t\t\t\t\t\t'fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );',\n\t\t\t\t\t\t\t'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',\n\n\t\t\t\t\t\t'}',\n\n\t\t\t\t\t\t'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );',\n\n\t\t\t\t\t'}',\n\n\t\t\t\t'}'\n\n\t\t\t].join( '\\n' ) );\n\n\t\t\tgl.compileShader( vertexShader );\n\t\t\tgl.compileShader( fragmentShader );\n\n\t\t\tgl.attachShader( program, vertexShader );\n\t\t\tgl.attachShader( program, fragmentShader );\n\n\t\t\tgl.linkProgram( program );\n\n\t\t\treturn program;\n\n\t\t}\n\n\t\tfunction painterSortStable( a, b ) {\n\n\t\t\tif ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t\t} else if ( a.z !== b.z ) {\n\n\t\t\t\treturn b.z - a.z;\n\n\t\t\t} else {\n\n\t\t\t\treturn b.id - a.id;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tvar materialId = 0;\n\n\tfunction Material() {\n\n\t\tObject.defineProperty( this, 'id', { value: materialId ++ } );\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Material';\n\n\t\tthis.fog = true;\n\t\tthis.lights = true;\n\n\t\tthis.blending = NormalBlending;\n\t\tthis.side = FrontSide;\n\t\tthis.shading = SmoothShading; // THREE.FlatShading, THREE.SmoothShading\n\t\tthis.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors\n\n\t\tthis.opacity = 1;\n\t\tthis.transparent = false;\n\n\t\tthis.blendSrc = SrcAlphaFactor;\n\t\tthis.blendDst = OneMinusSrcAlphaFactor;\n\t\tthis.blendEquation = AddEquation;\n\t\tthis.blendSrcAlpha = null;\n\t\tthis.blendDstAlpha = null;\n\t\tthis.blendEquationAlpha = null;\n\n\t\tthis.depthFunc = LessEqualDepth;\n\t\tthis.depthTest = true;\n\t\tthis.depthWrite = true;\n\n\t\tthis.clippingPlanes = null;\n\t\tthis.clipIntersection = false;\n\t\tthis.clipShadows = false;\n\n\t\tthis.colorWrite = true;\n\n\t\tthis.precision = null; // override the renderer's default precision for this material\n\n\t\tthis.polygonOffset = false;\n\t\tthis.polygonOffsetFactor = 0;\n\t\tthis.polygonOffsetUnits = 0;\n\n\t\tthis.dithering = false;\n\n\t\tthis.alphaTest = 0;\n\t\tthis.premultipliedAlpha = false;\n\n\t\tthis.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer\n\n\t\tthis.visible = true;\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tObject.assign( Material.prototype, EventDispatcher.prototype, {\n\n\t\tisMaterial: true,\n\n\t\tonBeforeCompile: function () {},\n\n\t\tsetValues: function ( values ) {\n\n\t\t\tif ( values === undefined ) return;\n\n\t\t\tfor ( var key in values ) {\n\n\t\t\t\tvar newValue = values[ key ];\n\n\t\t\t\tif ( newValue === undefined ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.Material: '\" + key + \"' parameter is undefined.\" );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tvar currentValue = this[ key ];\n\n\t\t\t\tif ( currentValue === undefined ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\" );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tif ( currentValue && currentValue.isColor ) {\n\n\t\t\t\t\tcurrentValue.set( newValue );\n\n\t\t\t\t} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {\n\n\t\t\t\t\tcurrentValue.copy( newValue );\n\n\t\t\t\t} else if ( key === 'overdraw' ) {\n\n\t\t\t\t\t// ensure overdraw is backwards-compatible with legacy boolean type\n\t\t\t\t\tthis[ key ] = Number( newValue );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis[ key ] = newValue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar isRoot = meta === undefined;\n\n\t\t\tif ( isRoot ) {\n\n\t\t\t\tmeta = {\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {}\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Material',\n\t\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard Material serialization\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\n\t\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\t\tif ( this.color && this.color.isColor ) data.color = this.color.getHex();\n\n\t\t\tif ( this.roughness !== undefined ) data.roughness = this.roughness;\n\t\t\tif ( this.metalness !== undefined ) data.metalness = this.metalness;\n\n\t\t\tif ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();\n\t\t\tif ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();\n\t\t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\n\t\t\tif ( this.clearCoat !== undefined ) data.clearCoat = this.clearCoat;\n\t\t\tif ( this.clearCoatRoughness !== undefined ) data.clearCoatRoughness = this.clearCoatRoughness;\n\n\t\t\tif ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;\n\t\t\tif ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\n\t\t\tif ( this.lightMap && this.lightMap.isTexture ) data.lightMap = this.lightMap.toJSON( meta ).uuid;\n\t\t\tif ( this.bumpMap && this.bumpMap.isTexture ) {\n\n\t\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n\t\t\t\tdata.bumpScale = this.bumpScale;\n\n\t\t\t}\n\t\t\tif ( this.normalMap && this.normalMap.isTexture ) {\n\n\t\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n\t\t\t\tdata.normalScale = this.normalScale.toArray();\n\n\t\t\t}\n\t\t\tif ( this.displacementMap && this.displacementMap.isTexture ) {\n\n\t\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n\t\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\t\tdata.displacementBias = this.displacementBias;\n\n\t\t\t}\n\t\t\tif ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\n\t\t\tif ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\n\n\t\t\tif ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\n\t\t\tif ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\n\n\t\t\tif ( this.envMap && this.envMap.isTexture ) {\n\n\t\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n\t\t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\n\n\t\t\t}\n\n\t\t\tif ( this.gradientMap && this.gradientMap.isTexture ) {\n\n\t\t\t\tdata.gradientMap = this.gradientMap.toJSON( meta ).uuid;\n\n\t\t\t}\n\n\t\t\tif ( this.size !== undefined ) data.size = this.size;\n\t\t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\n\n\t\t\tif ( this.blending !== NormalBlending ) data.blending = this.blending;\n\t\t\tif ( this.shading !== SmoothShading ) data.shading = this.shading;\n\t\t\tif ( this.side !== FrontSide ) data.side = this.side;\n\t\t\tif ( this.vertexColors !== NoColors ) data.vertexColors = this.vertexColors;\n\n\t\t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\n\t\t\tif ( this.transparent === true ) data.transparent = this.transparent;\n\n\t\t\tdata.depthFunc = this.depthFunc;\n\t\t\tdata.depthTest = this.depthTest;\n\t\t\tdata.depthWrite = this.depthWrite;\n\n\t\t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\n\t\t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;\n\t\t\tif ( this.wireframe === true ) data.wireframe = this.wireframe;\n\t\t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\n\t\t\tif ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;\n\t\t\tif ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;\n\n\t\t\tdata.skinning = this.skinning;\n\t\t\tdata.morphTargets = this.morphTargets;\n\n\t\t\tdata.dithering = this.dithering;\n\n\t\t\t// TODO: Copied from Object3D.toJSON\n\n\t\t\tfunction extractFromCache( cache ) {\n\n\t\t\t\tvar values = [];\n\n\t\t\t\tfor ( var key in cache ) {\n\n\t\t\t\t\tvar data = cache[ key ];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push( data );\n\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\n\t\t\t}\n\n\t\t\tif ( isRoot ) {\n\n\t\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\t\tvar images = extractFromCache( meta.images );\n\n\t\t\t\tif ( textures.length > 0 ) data.textures = textures;\n\t\t\t\tif ( images.length > 0 ) data.images = images;\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.name = source.name;\n\n\t\t\tthis.fog = source.fog;\n\t\t\tthis.lights = source.lights;\n\n\t\t\tthis.blending = source.blending;\n\t\t\tthis.side = source.side;\n\t\t\tthis.shading = source.shading;\n\t\t\tthis.vertexColors = source.vertexColors;\n\n\t\t\tthis.opacity = source.opacity;\n\t\t\tthis.transparent = source.transparent;\n\n\t\t\tthis.blendSrc = source.blendSrc;\n\t\t\tthis.blendDst = source.blendDst;\n\t\t\tthis.blendEquation = source.blendEquation;\n\t\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\n\t\t\tthis.depthFunc = source.depthFunc;\n\t\t\tthis.depthTest = source.depthTest;\n\t\t\tthis.depthWrite = source.depthWrite;\n\n\t\t\tthis.colorWrite = source.colorWrite;\n\n\t\t\tthis.precision = source.precision;\n\n\t\t\tthis.polygonOffset = source.polygonOffset;\n\t\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\n\t\t\tthis.dithering = source.dithering;\n\n\t\t\tthis.alphaTest = source.alphaTest;\n\n\t\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\n\t\t\tthis.overdraw = source.overdraw;\n\n\t\t\tthis.visible = source.visible;\n\t\t\tthis.clipShadows = source.clipShadows;\n\t\t\tthis.clipIntersection = source.clipIntersection;\n\n\t\t\tvar srcPlanes = source.clippingPlanes,\n\t\t\t\tdstPlanes = null;\n\n\t\t\tif ( srcPlanes !== null ) {\n\n\t\t\t\tvar n = srcPlanes.length;\n\t\t\t\tdstPlanes = new Array( n );\n\n\t\t\t\tfor ( var i = 0; i !== n; ++ i )\n\t\t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\n\n\t\t\t}\n\n\t\t\tthis.clippingPlanes = dstPlanes;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  defines: { \"label\" : \"value\" },\n\t *  uniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n\t *\n\t *  fragmentShader: <string>,\n\t *  vertexShader: <string>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  lights: <bool>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction ShaderMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'ShaderMaterial';\n\n\t\tthis.defines = {};\n\t\tthis.uniforms = {};\n\n\t\tthis.vertexShader = 'void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}';\n\t\tthis.fragmentShader = 'void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}';\n\n\t\tthis.linewidth = 1;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false; // set to use scene fog\n\t\tthis.lights = false; // set to use scene lights\n\t\tthis.clipping = false; // set to use user-defined clipping planes\n\n\t\tthis.skinning = false; // set to use skinning attribute streams\n\t\tthis.morphTargets = false; // set to use morph targets\n\t\tthis.morphNormals = false; // set to use morph normals\n\n\t\tthis.extensions = {\n\t\t\tderivatives: false, // set to use derivatives\n\t\t\tfragDepth: false, // set to use fragment depth values\n\t\t\tdrawBuffers: false, // set to use draw buffers\n\t\t\tshaderTextureLOD: false // set to use shader texture LOD\n\t\t};\n\n\t\t// When rendered geometry doesn't include these attributes but the material does,\n\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\t\tthis.defaultAttributeValues = {\n\t\t\t'color': [ 1, 1, 1 ],\n\t\t\t'uv': [ 0, 0 ],\n\t\t\t'uv2': [ 0, 0 ]\n\t\t};\n\n\t\tthis.index0AttributeName = undefined;\n\n\t\tif ( parameters !== undefined ) {\n\n\t\t\tif ( parameters.attributes !== undefined ) {\n\n\t\t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\n\n\t\t\t}\n\n\t\t\tthis.setValues( parameters );\n\n\t\t}\n\n\t}\n\n\tShaderMaterial.prototype = Object.create( Material.prototype );\n\tShaderMaterial.prototype.constructor = ShaderMaterial;\n\n\tShaderMaterial.prototype.isShaderMaterial = true;\n\n\tShaderMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.fragmentShader = source.fragmentShader;\n\t\tthis.vertexShader = source.vertexShader;\n\n\t\tthis.uniforms = UniformsUtils.clone( source.uniforms );\n\n\t\tthis.defines = source.defines;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.lights = source.lights;\n\t\tthis.clipping = source.clipping;\n\n\t\tthis.skinning = source.skinning;\n\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\tthis.extensions = source.extensions;\n\n\t\treturn this;\n\n\t};\n\n\tShaderMaterial.prototype.toJSON = function ( meta ) {\n\n\t\tvar data = Material.prototype.toJSON.call( this, meta );\n\n\t\tdata.uniforms = this.uniforms;\n\t\tdata.vertexShader = this.vertexShader;\n\t\tdata.fragmentShader = this.fragmentShader;\n\n\t\treturn data;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author bhouston / https://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>\n\t * }\n\t */\n\n\tfunction MeshDepthMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshDepthMaterial';\n\n\t\tthis.depthPacking = BasicDepthPacking;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false;\n\t\tthis.lights = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshDepthMaterial.prototype = Object.create( Material.prototype );\n\tMeshDepthMaterial.prototype.constructor = MeshDepthMaterial;\n\n\tMeshDepthMaterial.prototype.isMeshDepthMaterial = true;\n\n\tMeshDepthMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.depthPacking = source.depthPacking;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Box3( min, max ) {\n\n\t\tthis.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );\n\t\tthis.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );\n\n\t}\n\n\tObject.assign( Box3.prototype, {\n\n\t\tisBox3: true,\n\n\t\tset: function ( min, max ) {\n\n\t\t\tthis.min.copy( min );\n\t\t\tthis.max.copy( max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromArray: function ( array ) {\n\n\t\t\tvar minX = + Infinity;\n\t\t\tvar minY = + Infinity;\n\t\t\tvar minZ = + Infinity;\n\n\t\t\tvar maxX = - Infinity;\n\t\t\tvar maxY = - Infinity;\n\t\t\tvar maxZ = - Infinity;\n\n\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\tvar x = array[ i ];\n\t\t\t\tvar y = array[ i + 1 ];\n\t\t\t\tvar z = array[ i + 2 ];\n\n\t\t\t\tif ( x < minX ) minX = x;\n\t\t\t\tif ( y < minY ) minY = y;\n\t\t\t\tif ( z < minZ ) minZ = z;\n\n\t\t\t\tif ( x > maxX ) maxX = x;\n\t\t\t\tif ( y > maxY ) maxY = y;\n\t\t\t\tif ( z > maxZ ) maxZ = z;\n\n\t\t\t}\n\n\t\t\tthis.min.set( minX, minY, minZ );\n\t\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromBufferAttribute: function ( attribute ) {\n\n\t\t\tvar minX = + Infinity;\n\t\t\tvar minY = + Infinity;\n\t\t\tvar minZ = + Infinity;\n\n\t\t\tvar maxX = - Infinity;\n\t\t\tvar maxY = - Infinity;\n\t\t\tvar maxZ = - Infinity;\n\n\t\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\t\tvar x = attribute.getX( i );\n\t\t\t\tvar y = attribute.getY( i );\n\t\t\t\tvar z = attribute.getZ( i );\n\n\t\t\t\tif ( x < minX ) minX = x;\n\t\t\t\tif ( y < minY ) minY = y;\n\t\t\t\tif ( z < minZ ) minZ = z;\n\n\t\t\t\tif ( x > maxX ) maxX = x;\n\t\t\t\tif ( y > maxY ) maxY = y;\n\t\t\t\tif ( z > maxZ ) maxZ = z;\n\n\t\t\t}\n\n\t\t\tthis.min.set( minX, minY, minZ );\n\t\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCenterAndSize: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function setFromCenterAndSize( center, size ) {\n\n\t\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n\n\t\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\t\tthis.max.copy( center ).add( halfSize );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tsetFromObject: function ( object ) {\n\n\t\t\tthis.makeEmpty();\n\n\t\t\treturn this.expandByObject( object );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( box ) {\n\n\t\t\tthis.min.copy( box.min );\n\t\t\tthis.max.copy( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeEmpty: function () {\n\n\t\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n\t\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tisEmpty: function () {\n\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n\t\t},\n\n\t\tgetCenter: function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\t\t\treturn this.isEmpty() ? result.set( 0, 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t\t},\n\n\t\tgetSize: function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\t\t\treturn this.isEmpty() ? result.set( 0, 0, 0 ) : result.subVectors( this.max, this.min );\n\n\t\t},\n\n\t\texpandByPoint: function ( point ) {\n\n\t\t\tthis.min.min( point );\n\t\t\tthis.max.max( point );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByVector: function ( vector ) {\n\n\t\t\tthis.min.sub( vector );\n\t\t\tthis.max.add( vector );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByScalar: function ( scalar ) {\n\n\t\t\tthis.min.addScalar( - scalar );\n\t\t\tthis.max.addScalar( scalar );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByObject: function () {\n\n\t\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t\t// accounting for both the object's, and children's, world transforms\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function expandByObject( object ) {\n\n\t\t\t\tvar scope = this;\n\n\t\t\t\tobject.updateMatrixWorld( true );\n\n\t\t\t\tobject.traverse( function ( node ) {\n\n\t\t\t\t\tvar i, l;\n\n\t\t\t\t\tvar geometry = node.geometry;\n\n\t\t\t\t\tif ( geometry !== undefined ) {\n\n\t\t\t\t\t\tif ( geometry.isGeometry ) {\n\n\t\t\t\t\t\t\tvar vertices = geometry.vertices;\n\n\t\t\t\t\t\t\tfor ( i = 0, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\t\tv1.copy( vertices[ i ] );\n\t\t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\n\n\t\t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else if ( geometry.isBufferGeometry ) {\n\n\t\t\t\t\t\t\tvar attribute = geometry.attributes.position;\n\n\t\t\t\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\t\t\t\tfor ( i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\t\t\t\t\t\t\tv1.fromBufferAttribute( attribute, i ).applyMatrix4( node.matrixWorld );\n\n\t\t\t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\t\tpoint.y < this.min.y || point.y > this.max.y ||\n\t\t\t\tpoint.z < this.min.z || point.z > this.max.z ? false : true;\n\n\t\t},\n\n\t\tcontainsBox: function ( box ) {\n\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y &&\n\t\t\t\tthis.min.z <= box.min.z && box.max.z <= this.max.z;\n\n\t\t},\n\n\t\tgetParameter: function ( point, optionalTarget ) {\n\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\treturn result.set(\n\t\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t\t\t);\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\t// using 6 splitting planes to rule out intersections.\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ||\n\t\t\t\tbox.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n\n\t\t},\n\n\t\tintersectsSphere: ( function () {\n\n\t\t\tvar closestPoint = new Vector3();\n\n\t\t\treturn function intersectsSphere( sphere ) {\n\n\t\t\t\t// Find the point on the AABB closest to the sphere center.\n\t\t\t\tthis.clampPoint( sphere.center, closestPoint );\n\n\t\t\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n\t\t\t\treturn closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t\t\t};\n\n\t\t} )(),\n\n\t\tintersectsPlane: function ( plane ) {\n\n\t\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\n\t\t\tvar min, max;\n\n\t\t\tif ( plane.normal.x > 0 ) {\n\n\t\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\t\tmax = plane.normal.x * this.max.x;\n\n\t\t\t} else {\n\n\t\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\t\tmax = plane.normal.x * this.min.x;\n\n\t\t\t}\n\n\t\t\tif ( plane.normal.y > 0 ) {\n\n\t\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\t\tmax += plane.normal.y * this.max.y;\n\n\t\t\t} else {\n\n\t\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\t\tmax += plane.normal.y * this.min.y;\n\n\t\t\t}\n\n\t\t\tif ( plane.normal.z > 0 ) {\n\n\t\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\t\tmax += plane.normal.z * this.max.z;\n\n\t\t\t} else {\n\n\t\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\t\tmax += plane.normal.z * this.min.z;\n\n\t\t\t}\n\n\t\t\treturn ( min <= plane.constant && max >= plane.constant );\n\n\t\t},\n\n\t\tclampPoint: function ( point, optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\t\t\treturn result.copy( point ).clamp( this.min, this.max );\n\n\t\t},\n\n\t\tdistanceToPoint: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function distanceToPoint( point ) {\n\n\t\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n\t\t\t\treturn clampedPoint.sub( point ).length();\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tgetBoundingSphere: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function getBoundingSphere( optionalTarget ) {\n\n\t\t\t\tvar result = optionalTarget || new Sphere();\n\n\t\t\t\tthis.getCenter( result.center );\n\n\t\t\t\tresult.radius = this.getSize( v1 ).length() * 0.5;\n\n\t\t\t\treturn result;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tintersect: function ( box ) {\n\n\t\t\tthis.min.max( box.min );\n\t\t\tthis.max.min( box.max );\n\n\t\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\t\t\tif( this.isEmpty() ) this.makeEmpty();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tunion: function ( box ) {\n\n\t\t\tthis.min.min( box.min );\n\t\t\tthis.max.max( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix4: function () {\n\n\t\t\tvar points = [\n\t\t\t\tnew Vector3(),\n\t\t\t\tnew Vector3(),\n\t\t\t\tnew Vector3(),\n\t\t\t\tnew Vector3(),\n\t\t\t\tnew Vector3(),\n\t\t\t\tnew Vector3(),\n\t\t\t\tnew Vector3(),\n\t\t\t\tnew Vector3()\n\t\t\t];\n\n\t\t\treturn function applyMatrix4( matrix ) {\n\n\t\t\t\t// transform of empty box is an empty box.\n\t\t\t\tif( this.isEmpty() ) return this;\n\n\t\t\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t\t\t\tpoints[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t\t\t\tpoints[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t\t\t\tpoints[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t\t\t\tpoints[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t\t\t\tpoints[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t\t\t\tpoints[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t\t\t\tpoints[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t\t\t\tpoints[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );\t// 111\n\n\t\t\t\tthis.setFromPoints( points );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.min.add( offset );\n\t\t\tthis.max.add( offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( box ) {\n\n\t\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Sphere( center, radius ) {\n\n\t\tthis.center = ( center !== undefined ) ? center : new Vector3();\n\t\tthis.radius = ( radius !== undefined ) ? radius : 0;\n\n\t}\n\n\tObject.assign( Sphere.prototype, {\n\n\t\tset: function ( center, radius ) {\n\n\t\t\tthis.center.copy( center );\n\t\t\tthis.radius = radius;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function () {\n\n\t\t\tvar box = new Box3();\n\n\t\t\treturn function setFromPoints( points, optionalCenter ) {\n\n\t\t\t\tvar center = this.center;\n\n\t\t\t\tif ( optionalCenter !== undefined ) {\n\n\t\t\t\t\tcenter.copy( optionalCenter );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbox.setFromPoints( points ).getCenter( center );\n\n\t\t\t\t}\n\n\t\t\t\tvar maxRadiusSq = 0;\n\n\t\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( sphere ) {\n\n\t\t\tthis.center.copy( sphere.center );\n\t\t\tthis.radius = sphere.radius;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tempty: function () {\n\n\t\t\treturn ( this.radius <= 0 );\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\treturn ( point.distanceTo( this.center ) - this.radius );\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\tvar radiusSum = this.radius + sphere.radius;\n\n\t\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn box.intersectsSphere( this );\n\n\t\t},\n\n\t\tintersectsPlane: function ( plane ) {\n\n\t\t\t// We use the following equation to compute the signed distance from\n\t\t\t// the center of the sphere to the plane.\n\t\t\t//\n\t\t\t// distance = q * n - d\n\t\t\t//\n\t\t\t// If this distance is greater than the radius of the sphere,\n\t\t\t// then there is no intersection.\n\n\t\t\treturn Math.abs( this.center.dot( plane.normal ) - plane.constant ) <= this.radius;\n\n\t\t},\n\n\t\tclampPoint: function ( point, optionalTarget ) {\n\n\t\t\tvar deltaLengthSq = this.center.distanceToSquared( point );\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\tresult.copy( point );\n\n\t\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\t\tresult.sub( this.center ).normalize();\n\t\t\t\tresult.multiplyScalar( this.radius ).add( this.center );\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\tgetBoundingBox: function ( optionalTarget ) {\n\n\t\t\tvar box = optionalTarget || new Box3();\n\n\t\t\tbox.set( this.center, this.center );\n\t\t\tbox.expandByScalar( this.radius );\n\n\t\t\treturn box;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tthis.center.applyMatrix4( matrix );\n\t\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.center.add( offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( sphere ) {\n\n\t\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t * @author tschw\n\t */\n\n\tfunction Matrix3() {\n\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\n\t\t];\n\n\t\tif ( arguments.length > 0 ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\n\n\t\t}\n\n\t}\n\n\tObject.assign( Matrix3.prototype, {\n\n\t\tisMatrix3: true,\n\n\t\tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\n\t\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\n\t\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tidentity: function () {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0,\n\t\t\t\t0, 1, 0,\n\t\t\t\t0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().fromArray( this.elements );\n\n\t\t},\n\n\t\tcopy: function ( m ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];\n\t\t\tte[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];\n\t\t\tte[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrix4: function ( m ) {\n\n\t\t\tvar me = m.elements;\n\n\t\t\tthis.set(\n\n\t\t\t\tme[ 0 ], me[ 4 ], me[  8 ],\n\t\t\t\tme[ 1 ], me[ 5 ], me[  9 ],\n\t\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyToBufferAttribute: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function applyToBufferAttribute( attribute ) {\n\n\t\t\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\t\t\tv1.x = attribute.getX( i );\n\t\t\t\t\tv1.y = attribute.getY( i );\n\t\t\t\t\tv1.z = attribute.getZ( i );\n\n\t\t\t\t\tv1.applyMatrix3( this );\n\n\t\t\t\t\tattribute.setXYZ( i, v1.x, v1.y, v1.z );\n\n\t\t\t\t}\n\n\t\t\t\treturn attribute;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tmultiply: function ( m ) {\n\n\t\t\treturn this.multiplyMatrices( this, m );\n\n\t\t},\n\n\t\tpremultiply: function ( m ) {\n\n\t\t\treturn this.multiplyMatrices( m, this );\n\n\t\t},\n\n\t\tmultiplyMatrices: function ( a, b ) {\n\n\t\t\tvar ae = a.elements;\n\t\t\tvar be = b.elements;\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];\n\t\t\tvar a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];\n\t\t\tvar a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];\n\n\t\t\tvar b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];\n\t\t\tvar b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];\n\t\t\tvar b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];\n\n\t\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;\n\t\t\tte[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;\n\t\t\tte[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;\n\n\t\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;\n\t\t\tte[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;\n\t\t\tte[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;\n\n\t\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;\n\t\t\tte[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;\n\t\t\tte[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( s ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\n\t\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\n\t\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdeterminant: function () {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\n\t\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\n\t\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\n\n\t\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\n\t\t},\n\n\t\tgetInverse: function ( matrix, throwOnDegenerate ) {\n\n\t\t\tif ( matrix && matrix.isMatrix4 ) {\n\n\t\t\t\tconsole.error( \"THREE.Matrix3.getInverse no longer takes a Matrix4 argument.\" );\n\n\t\t\t}\n\n\t\t\tvar me = matrix.elements,\n\t\t\t\tte = this.elements,\n\n\t\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],\n\t\t\t\tn12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],\n\t\t\t\tn13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],\n\n\t\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\t\tt13 = n23 * n12 - n22 * n13,\n\n\t\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\n\t\t\tif ( det === 0 ) {\n\n\t\t\t\tvar msg = \"THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0\";\n\n\t\t\t\tif ( throwOnDegenerate === true ) {\n\n\t\t\t\t\tthrow new Error( msg );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( msg );\n\n\t\t\t\t}\n\n\t\t\t\treturn this.identity();\n\n\t\t\t}\n\n\t\t\tvar detInv = 1 / det;\n\n\t\t\tte[ 0 ] = t11 * detInv;\n\t\t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\n\t\t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\n\n\t\t\tte[ 3 ] = t12 * detInv;\n\t\t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\n\t\t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\n\n\t\t\tte[ 6 ] = t13 * detInv;\n\t\t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\n\t\t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranspose: function () {\n\n\t\t\tvar tmp, m = this.elements;\n\n\t\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\n\t\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\n\t\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetNormalMatrix: function ( matrix4 ) {\n\n\t\t\treturn this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();\n\n\t\t},\n\n\t\ttransposeIntoArray: function ( r ) {\n\n\t\t\tvar m = this.elements;\n\n\t\t\tr[ 0 ] = m[ 0 ];\n\t\t\tr[ 1 ] = m[ 3 ];\n\t\t\tr[ 2 ] = m[ 6 ];\n\t\t\tr[ 3 ] = m[ 1 ];\n\t\t\tr[ 4 ] = m[ 4 ];\n\t\t\tr[ 5 ] = m[ 7 ];\n\t\t\tr[ 6 ] = m[ 2 ];\n\t\t\tr[ 7 ] = m[ 5 ];\n\t\t\tr[ 8 ] = m[ 8 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( matrix ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = matrix.elements;\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tvar te = this.elements;\n\n\t\t\tarray[ offset ] = te[ 0 ];\n\t\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\t\tarray[ offset + 2 ] = te[ 2 ];\n\n\t\t\tarray[ offset + 3 ] = te[ 3 ];\n\t\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\t\tarray[ offset + 5 ] = te[ 5 ];\n\n\t\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\t\tarray[ offset + 7 ] = te[ 7 ];\n\t\t\tarray[ offset + 8 ] = te[ 8 ];\n\n\t\t\treturn array;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Plane( normal, constant ) {\n\n\t\tthis.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );\n\t\tthis.constant = ( constant !== undefined ) ? constant : 0;\n\n\t}\n\n\tObject.assign( Plane.prototype, {\n\n\t\tset: function ( normal, constant ) {\n\n\t\t\tthis.normal.copy( normal );\n\t\t\tthis.constant = constant;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponents: function ( x, y, z, w ) {\n\n\t\t\tthis.normal.set( x, y, z );\n\t\t\tthis.constant = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\n\n\t\t\tthis.normal.copy( normal );\n\t\t\tthis.constant = - point.dot( this.normal );\t// must be this.normal, not normal, as this.normal is normalized\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCoplanarPoints: function () {\n\n\t\t\tvar v1 = new Vector3();\n\t\t\tvar v2 = new Vector3();\n\n\t\t\treturn function setFromCoplanarPoints( a, b, c ) {\n\n\t\t\t\tvar normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();\n\n\t\t\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\t\t\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( plane ) {\n\n\t\t\tthis.normal.copy( plane.normal );\n\t\t\tthis.constant = plane.constant;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\n\t\t\tvar inverseNormalLength = 1.0 / this.normal.length();\n\t\t\tthis.normal.multiplyScalar( inverseNormalLength );\n\t\t\tthis.constant *= inverseNormalLength;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.constant *= - 1;\n\t\t\tthis.normal.negate();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\treturn this.normal.dot( point ) + this.constant;\n\n\t\t},\n\n\t\tdistanceToSphere: function ( sphere ) {\n\n\t\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\n\t\t},\n\n\t\tprojectPoint: function ( point, optionalTarget ) {\n\n\t\t\treturn this.orthoPoint( point, optionalTarget ).sub( point ).negate();\n\n\t\t},\n\n\t\torthoPoint: function ( point, optionalTarget ) {\n\n\t\t\tvar perpendicularMagnitude = this.distanceToPoint( point );\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\t\t\treturn result.copy( this.normal ).multiplyScalar( perpendicularMagnitude );\n\n\t\t},\n\n\t\tintersectLine: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function intersectLine( line, optionalTarget ) {\n\n\t\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\t\tvar direction = line.delta( v1 );\n\n\t\t\t\tvar denominator = this.normal.dot( direction );\n\n\t\t\t\tif ( denominator === 0 ) {\n\n\t\t\t\t\t// line is coplanar, return origin\n\t\t\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\n\n\t\t\t\t\t\treturn result.copy( line.start );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Unsure if this is the correct method to handle this case.\n\t\t\t\t\treturn undefined;\n\n\t\t\t\t}\n\n\t\t\t\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\n\t\t\t\tif ( t < 0 || t > 1 ) {\n\n\t\t\t\t\treturn undefined;\n\n\t\t\t\t}\n\n\t\t\t\treturn result.copy( direction ).multiplyScalar( t ).add( line.start );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tintersectsLine: function ( line ) {\n\n\t\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\n\t\t\tvar startSign = this.distanceToPoint( line.start );\n\t\t\tvar endSign = this.distanceToPoint( line.end );\n\n\t\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn box.intersectsPlane( this );\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\treturn sphere.intersectsPlane( this );\n\n\t\t},\n\n\t\tcoplanarPoint: function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\t\t\treturn result.copy( this.normal ).multiplyScalar( - this.constant );\n\n\t\t},\n\n\t\tapplyMatrix4: function () {\n\n\t\t\tvar v1 = new Vector3();\n\t\t\tvar m1 = new Matrix3();\n\n\t\t\treturn function applyMatrix4( matrix, optionalNormalMatrix ) {\n\n\t\t\t\tvar referencePoint = this.coplanarPoint( v1 ).applyMatrix4( matrix );\n\n\t\t\t\t// transform normal based on theory here:\n\t\t\t\t// http://www.songho.ca/opengl/gl_normaltransform.html\n\t\t\t\tvar normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );\n\t\t\t\tvar normal = this.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t// recalculate constant (like in setFromNormalAndCoplanarPoint)\n\t\t\t\tthis.constant = - referencePoint.dot( normal );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.constant = this.constant - offset.dot( this.normal );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( plane ) {\n\n\t\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Frustum( p0, p1, p2, p3, p4, p5 ) {\n\n\t\tthis.planes = [\n\n\t\t\t( p0 !== undefined ) ? p0 : new Plane(),\n\t\t\t( p1 !== undefined ) ? p1 : new Plane(),\n\t\t\t( p2 !== undefined ) ? p2 : new Plane(),\n\t\t\t( p3 !== undefined ) ? p3 : new Plane(),\n\t\t\t( p4 !== undefined ) ? p4 : new Plane(),\n\t\t\t( p5 !== undefined ) ? p5 : new Plane()\n\n\t\t];\n\n\t}\n\n\tObject.assign( Frustum.prototype, {\n\n\t\tset: function ( p0, p1, p2, p3, p4, p5 ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tplanes[ 0 ].copy( p0 );\n\t\t\tplanes[ 1 ].copy( p1 );\n\t\t\tplanes[ 2 ].copy( p2 );\n\t\t\tplanes[ 3 ].copy( p3 );\n\t\t\tplanes[ 4 ].copy( p4 );\n\t\t\tplanes[ 5 ].copy( p5 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( frustum ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrix: function ( m ) {\n\n\t\t\tvar planes = this.planes;\n\t\t\tvar me = m.elements;\n\t\t\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n\t\t\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n\t\t\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n\t\t\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\n\t\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n\t\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n\t\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n\t\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n\t\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n\t\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tintersectsObject: function () {\n\n\t\t\tvar sphere = new Sphere();\n\n\t\t\treturn function intersectsObject( object ) {\n\n\t\t\t\tvar geometry = object.geometry;\n\n\t\t\t\tif ( geometry.boundingSphere === null )\n\t\t\t\t\tgeometry.computeBoundingSphere();\n\n\t\t\t\tsphere.copy( geometry.boundingSphere )\n\t\t\t\t\t.applyMatrix4( object.matrixWorld );\n\n\t\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tintersectsSprite: function () {\n\n\t\t\tvar sphere = new Sphere();\n\n\t\t\treturn function intersectsSprite( sprite ) {\n\n\t\t\t\tsphere.center.set( 0, 0, 0 );\n\t\t\t\tsphere.radius = 0.7071067811865476;\n\t\t\t\tsphere.applyMatrix4( sprite.matrixWorld );\n\n\t\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\tvar planes = this.planes;\n\t\t\tvar center = sphere.center;\n\t\t\tvar negRadius = - sphere.radius;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tvar distance = planes[ i ].distanceToPoint( center );\n\n\t\t\t\tif ( distance < negRadius ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tintersectsBox: function () {\n\n\t\t\tvar p1 = new Vector3(),\n\t\t\t\tp2 = new Vector3();\n\n\t\t\treturn function intersectsBox( box ) {\n\n\t\t\t\tvar planes = this.planes;\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tvar plane = planes[ i ];\n\n\t\t\t\t\tp1.x = plane.normal.x > 0 ? box.min.x : box.max.x;\n\t\t\t\t\tp2.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t\t\tp1.y = plane.normal.y > 0 ? box.min.y : box.max.y;\n\t\t\t\t\tp2.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t\t\tp1.z = plane.normal.z > 0 ? box.min.z : box.max.z;\n\t\t\t\t\tp2.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\t\t\tvar d1 = plane.distanceToPoint( p1 );\n\t\t\t\t\tvar d2 = plane.distanceToPoint( p2 );\n\n\t\t\t\t\t// if both outside plane, no intersection\n\n\t\t\t\t\tif ( d1 < 0 && d2 < 0 ) {\n\n\t\t\t\t\t\treturn false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLShadowMap( _renderer, _lights, _objects, capabilities ) {\n\n\t\tvar _gl = _renderer.context,\n\t\t\t_state = _renderer.state,\n\t\t\t_frustum = new Frustum(),\n\t\t\t_projScreenMatrix = new Matrix4(),\n\n\t\t\t_lightShadows = _lights.shadows,\n\n\t\t\t_shadowMapSize = new Vector2(),\n\t\t\t_maxShadowMapSize = new Vector2( capabilities.maxTextureSize, capabilities.maxTextureSize ),\n\n\t\t\t_lookTarget = new Vector3(),\n\t\t\t_lightPositionWorld = new Vector3(),\n\n\t\t\t_MorphingFlag = 1,\n\t\t\t_SkinningFlag = 2,\n\n\t\t\t_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,\n\n\t\t\t_depthMaterials = new Array( _NumberOfMaterialVariants ),\n\t\t\t_distanceMaterials = new Array( _NumberOfMaterialVariants ),\n\n\t\t\t_materialCache = {};\n\n\t\tvar cubeDirections = [\n\t\t\tnew Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),\n\t\t\tnew Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )\n\t\t];\n\n\t\tvar cubeUps = [\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\tnew Vector3( 0, 0, - 1 )\n\t\t];\n\n\t\tvar cube2DViewPorts = [\n\t\t\tnew Vector4(), new Vector4(), new Vector4(),\n\t\t\tnew Vector4(), new Vector4(), new Vector4()\n\t\t];\n\n\t\t// init\n\n\t\tvar depthMaterialTemplate = new MeshDepthMaterial();\n\t\tdepthMaterialTemplate.depthPacking = RGBADepthPacking;\n\t\tdepthMaterialTemplate.clipping = true;\n\n\t\tvar distanceShader = ShaderLib[ \"distanceRGBA\" ];\n\t\tvar distanceUniforms = UniformsUtils.clone( distanceShader.uniforms );\n\n\t\tfor ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {\n\n\t\t\tvar useMorphing = ( i & _MorphingFlag ) !== 0;\n\t\t\tvar useSkinning = ( i & _SkinningFlag ) !== 0;\n\n\t\t\tvar depthMaterial = depthMaterialTemplate.clone();\n\t\t\tdepthMaterial.morphTargets = useMorphing;\n\t\t\tdepthMaterial.skinning = useSkinning;\n\n\t\t\t_depthMaterials[ i ] = depthMaterial;\n\n\t\t\tvar distanceMaterial = new ShaderMaterial( {\n\t\t\t\tdefines: {\n\t\t\t\t\t'USE_SHADOWMAP': ''\n\t\t\t\t},\n\t\t\t\tuniforms: distanceUniforms,\n\t\t\t\tvertexShader: distanceShader.vertexShader,\n\t\t\t\tfragmentShader: distanceShader.fragmentShader,\n\t\t\t\tmorphTargets: useMorphing,\n\t\t\t\tskinning: useSkinning,\n\t\t\t\tclipping: true\n\t\t\t} );\n\n\t\t\t_distanceMaterials[ i ] = distanceMaterial;\n\n\t\t}\n\n\t\t//\n\n\t\tvar scope = this;\n\n\t\tthis.enabled = false;\n\n\t\tthis.autoUpdate = true;\n\t\tthis.needsUpdate = false;\n\n\t\tthis.type = PCFShadowMap;\n\n\t\tthis.renderReverseSided = true;\n\t\tthis.renderSingleSided = true;\n\n\t\tthis.render = function ( scene, camera ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\t\t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) return;\n\n\t\t\tif ( _lightShadows.length === 0 ) return;\n\n\t\t\t// Set GL state for depth map.\n\t\t\t_state.disable( _gl.BLEND );\n\t\t\t_state.buffers.color.setClear( 1, 1, 1, 1 );\n\t\t\t_state.buffers.depth.setTest( true );\n\t\t\t_state.setScissorTest( false );\n\n\t\t\t// render depth map\n\n\t\t\tvar faceCount;\n\n\t\t\tfor ( var i = 0, il = _lightShadows.length; i < il; i ++ ) {\n\n\t\t\t\tvar light = _lightShadows[ i ];\n\t\t\t\tvar shadow = light.shadow;\n\t\t\t\tvar isPointLight = light && light.isPointLight;\n\n\t\t\t\tif ( shadow === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tvar shadowCamera = shadow.camera;\n\n\t\t\t\t_shadowMapSize.copy( shadow.mapSize );\n\t\t\t\t_shadowMapSize.min( _maxShadowMapSize );\n\n\t\t\t\tif ( isPointLight ) {\n\n\t\t\t\t\tvar vpWidth = _shadowMapSize.x;\n\t\t\t\t\tvar vpHeight = _shadowMapSize.y;\n\n\t\t\t\t\t// These viewports map a cube-map onto a 2D texture with the\n\t\t\t\t\t// following orientation:\n\t\t\t\t\t//\n\t\t\t\t\t//  xzXZ\n\t\t\t\t\t//   y Y\n\t\t\t\t\t//\n\t\t\t\t\t// X - Positive x direction\n\t\t\t\t\t// x - Negative x direction\n\t\t\t\t\t// Y - Positive y direction\n\t\t\t\t\t// y - Negative y direction\n\t\t\t\t\t// Z - Positive z direction\n\t\t\t\t\t// z - Negative z direction\n\n\t\t\t\t\t// positive X\n\t\t\t\t\tcube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );\n\t\t\t\t\t// negative X\n\t\t\t\t\tcube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );\n\t\t\t\t\t// positive Z\n\t\t\t\t\tcube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );\n\t\t\t\t\t// negative Z\n\t\t\t\t\tcube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );\n\t\t\t\t\t// positive Y\n\t\t\t\t\tcube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );\n\t\t\t\t\t// negative Y\n\t\t\t\t\tcube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );\n\n\t\t\t\t\t_shadowMapSize.x *= 4.0;\n\t\t\t\t\t_shadowMapSize.y *= 2.0;\n\n\t\t\t\t}\n\n\t\t\t\tif ( shadow.map === null ) {\n\n\t\t\t\t\tvar pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };\n\n\t\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\t\t\t\t\tshadow.map.texture.name = light.name + \".shadowMap\";\n\n\t\t\t\t\tshadowCamera.updateProjectionMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tif ( shadow.isSpotLightShadow ) {\n\n\t\t\t\t\tshadow.update( light );\n\n\t\t\t\t}\n\n\t\t\t\tvar shadowMap = shadow.map;\n\t\t\t\tvar shadowMatrix = shadow.matrix;\n\n\t\t\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tshadowCamera.position.copy( _lightPositionWorld );\n\n\t\t\t\tif ( isPointLight ) {\n\n\t\t\t\t\tfaceCount = 6;\n\n\t\t\t\t\t// for point lights we set the shadow matrix to be a translation-only matrix\n\t\t\t\t\t// equal to inverse of the light's position\n\n\t\t\t\t\tshadowMatrix.makeTranslation( - _lightPositionWorld.x, - _lightPositionWorld.y, - _lightPositionWorld.z );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfaceCount = 1;\n\n\t\t\t\t\t_lookTarget.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\t\t\t\t\tshadowCamera.updateMatrixWorld();\n\n\t\t\t\t\t// compute shadow matrix\n\n\t\t\t\t\tshadowMatrix.set(\n\t\t\t\t\t\t0.5, 0.0, 0.0, 0.5,\n\t\t\t\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t\t\t\t0.0, 0.0, 0.0, 1.0\n\t\t\t\t\t);\n\n\t\t\t\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\n\t\t\t\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\n\n\t\t\t\t}\n\n\t\t\t\t_renderer.setRenderTarget( shadowMap );\n\t\t\t\t_renderer.clear();\n\n\t\t\t\t// render shadow map for each cube face (if omni-directional) or\n\t\t\t\t// run a single pass if not\n\n\t\t\t\tfor ( var face = 0; face < faceCount; face ++ ) {\n\n\t\t\t\t\tif ( isPointLight ) {\n\n\t\t\t\t\t\t_lookTarget.copy( shadowCamera.position );\n\t\t\t\t\t\t_lookTarget.add( cubeDirections[ face ] );\n\t\t\t\t\t\tshadowCamera.up.copy( cubeUps[ face ] );\n\t\t\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\t\t\t\t\t\tshadowCamera.updateMatrixWorld();\n\n\t\t\t\t\t\tvar vpDimensions = cube2DViewPorts[ face ];\n\t\t\t\t\t\t_state.viewport( vpDimensions );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// update camera matrices and frustum\n\n\t\t\t\t\t_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n\t\t\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\n\n\t\t\t\t\t// set object matrices & frustum culling\n\n\t\t\t\t\trenderObject( scene, camera, shadowCamera, isPointLight );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Restore GL state.\n\t\t\tvar clearColor = _renderer.getClearColor();\n\t\t\tvar clearAlpha = _renderer.getClearAlpha();\n\t\t\t_renderer.setClearColor( clearColor, clearAlpha );\n\n\t\t\tscope.needsUpdate = false;\n\n\t\t};\n\n\t\tfunction getDepthMaterial( object, material, isPointLight, lightPositionWorld ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tvar result = null;\n\n\t\t\tvar materialVariants = _depthMaterials;\n\t\t\tvar customMaterial = object.customDepthMaterial;\n\n\t\t\tif ( isPointLight ) {\n\n\t\t\t\tmaterialVariants = _distanceMaterials;\n\t\t\t\tcustomMaterial = object.customDistanceMaterial;\n\n\t\t\t}\n\n\t\t\tif ( ! customMaterial ) {\n\n\t\t\t\tvar useMorphing = false;\n\n\t\t\t\tif ( material.morphTargets ) {\n\n\t\t\t\t\tif ( geometry && geometry.isBufferGeometry ) {\n\n\t\t\t\t\t\tuseMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\n\n\t\t\t\t\t} else if ( geometry && geometry.isGeometry ) {\n\n\t\t\t\t\t\tuseMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( object.isSkinnedMesh && material.skinning === false ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object );\n\n\t\t\t\t}\n\n\t\t\t\tvar useSkinning = object.isSkinnedMesh && material.skinning;\n\n\t\t\t\tvar variantIndex = 0;\n\n\t\t\t\tif ( useMorphing ) variantIndex |= _MorphingFlag;\n\t\t\t\tif ( useSkinning ) variantIndex |= _SkinningFlag;\n\n\t\t\t\tresult = materialVariants[ variantIndex ];\n\n\t\t\t} else {\n\n\t\t\t\tresult = customMaterial;\n\n\t\t\t}\n\n\t\t\tif ( _renderer.localClippingEnabled &&\n\t\t\t\t\tmaterial.clipShadows === true &&\n\t\t\t\t\tmaterial.clippingPlanes.length !== 0 ) {\n\n\t\t\t\t// in this case we need a unique material instance reflecting the\n\t\t\t\t// appropriate state\n\n\t\t\t\tvar keyA = result.uuid, keyB = material.uuid;\n\n\t\t\t\tvar materialsForVariant = _materialCache[ keyA ];\n\n\t\t\t\tif ( materialsForVariant === undefined ) {\n\n\t\t\t\t\tmaterialsForVariant = {};\n\t\t\t\t\t_materialCache[ keyA ] = materialsForVariant;\n\n\t\t\t\t}\n\n\t\t\t\tvar cachedMaterial = materialsForVariant[ keyB ];\n\n\t\t\t\tif ( cachedMaterial === undefined ) {\n\n\t\t\t\t\tcachedMaterial = result.clone();\n\t\t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\n\n\t\t\t\t}\n\n\t\t\t\tresult = cachedMaterial;\n\n\t\t\t}\n\n\t\t\tresult.visible = material.visible;\n\t\t\tresult.wireframe = material.wireframe;\n\n\t\t\tvar side = material.side;\n\n\t\t\tif ( scope.renderSingleSided && side == DoubleSide ) {\n\n\t\t\t\tside = FrontSide;\n\n\t\t\t}\n\n\t\t\tif ( scope.renderReverseSided ) {\n\n\t\t\t\tif ( side === FrontSide ) side = BackSide;\n\t\t\t\telse if ( side === BackSide ) side = FrontSide;\n\n\t\t\t}\n\n\t\t\tresult.side = side;\n\n\t\t\tresult.clipShadows = material.clipShadows;\n\t\t\tresult.clippingPlanes = material.clippingPlanes;\n\n\t\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t\t\tresult.linewidth = material.linewidth;\n\n\t\t\tif ( isPointLight && result.uniforms.lightPos !== undefined ) {\n\n\t\t\t\tresult.uniforms.lightPos.value.copy( lightPositionWorld );\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t\tfunction renderObject( object, camera, shadowCamera, isPointLight ) {\n\n\t\t\tif ( object.visible === false ) return;\n\n\t\t\tvar visible = object.layers.test( camera.layers );\n\n\t\t\tif ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {\n\n\t\t\t\tif ( object.castShadow && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {\n\n\t\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\n\n\t\t\t\t\tvar geometry = _objects.update( object );\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\t\tfor ( var k = 0, kl = groups.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\t\tvar group = groups[ k ];\n\t\t\t\t\t\t\tvar groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld );\n\t\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld );\n\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\trenderObject( children[ i ], camera, shadowCamera, isPointLight );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLAttributes( gl ) {\n\n\t\tvar buffers = {};\n\n\t\tfunction createBuffer( attribute, bufferType ) {\n\n\t\t\tvar array = attribute.array;\n\t\t\tvar usage = attribute.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n\n\t\t\tvar buffer = gl.createBuffer();\n\n\t\t\tgl.bindBuffer( bufferType, buffer );\n\t\t\tgl.bufferData( bufferType, array, usage );\n\n\t\t\tattribute.onUploadCallback();\n\n\t\t\tvar type = gl.FLOAT;\n\n\t\t\tif ( array instanceof Float32Array ) {\n\n\t\t\t\ttype = gl.FLOAT;\n\n\t\t\t} else if ( array instanceof Float64Array ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.' );\n\n\t\t\t} else if ( array instanceof Uint16Array ) {\n\n\t\t\t\ttype = gl.UNSIGNED_SHORT;\n\n\t\t\t} else if ( array instanceof Int16Array ) {\n\n\t\t\t\ttype = gl.SHORT;\n\n\t\t\t} else if ( array instanceof Uint32Array ) {\n\n\t\t\t\ttype = gl.UNSIGNED_INT;\n\n\t\t\t} else if ( array instanceof Int32Array ) {\n\n\t\t\t\ttype = gl.INT;\n\n\t\t\t} else if ( array instanceof Int8Array ) {\n\n\t\t\t\ttype = gl.BYTE;\n\n\t\t\t} else if ( array instanceof Uint8Array ) {\n\n\t\t\t\ttype = gl.UNSIGNED_BYTE;\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tbuffer: buffer,\n\t\t\t\ttype: type,\n\t\t\t\tbytesPerElement: array.BYTES_PER_ELEMENT,\n\t\t\t\tversion: attribute.version\n\t\t\t};\n\n\t\t}\n\n\t\tfunction updateBuffer( buffer, attribute, bufferType ) {\n\n\t\t\tvar array = attribute.array;\n\t\t\tvar updateRange = attribute.updateRange;\n\n\t\t\tgl.bindBuffer( bufferType, buffer );\n\n\t\t\tif ( attribute.dynamic === false ) {\n\n\t\t\t\tgl.bufferData( bufferType, array, gl.STATIC_DRAW );\n\n\t\t\t} else if ( updateRange.count === - 1 ) {\n\n\t\t\t\t// Not using update ranges\n\n\t\t\t\tgl.bufferSubData( bufferType, 0, array );\n\n\t\t\t} else if ( updateRange.count === 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );\n\n\t\t\t} else {\n\n\t\t\t\tgl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\n\t\t\t\t\tarray.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );\n\n\t\t\t\tupdateRange.count = -1; // reset range\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction get( attribute ) {\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\t\treturn buffers[ attribute.uuid ];\n\n\t\t}\n\n\t\tfunction remove( attribute ) {\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\t\t\t\n\t\t\tvar data = buffers[ attribute.uuid ];\n\n\t\t\tif ( data ) {\n\n\t\t\t\tgl.deleteBuffer( data.buffer );\n\n\t\t\t\tdelete buffers[ attribute.uuid ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction update( attribute, bufferType ) {\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\t\tvar data = buffers[ attribute.uuid ];\n\n\t\t\tif ( data === undefined ) {\n\n\t\t\t\tbuffers[ attribute.uuid ] = createBuffer( attribute, bufferType );\n\n\t\t\t} else if ( data.version < attribute.version ) {\n\n\t\t\t\tupdateBuffer( data.buffer, attribute, bufferType );\n\n\t\t\t\tdata.version = attribute.version;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Euler( x, y, z, order ) {\n\n\t\tthis._x = x || 0;\n\t\tthis._y = y || 0;\n\t\tthis._z = z || 0;\n\t\tthis._order = order || Euler.DefaultOrder;\n\n\t}\n\n\tEuler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\n\n\tEuler.DefaultOrder = 'XYZ';\n\n\tObject.defineProperties( Euler.prototype, {\n\n\t\tx: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._x;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._x = value;\n\t\t\t\tthis.onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\ty: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._y;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._y = value;\n\t\t\t\tthis.onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\tz: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._z;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._z = value;\n\t\t\t\tthis.onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\torder: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._order;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._order = value;\n\t\t\t\tthis.onChangeCallback();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Euler.prototype, {\n\n\t\tisEuler: true,\n\n\t\tset: function ( x, y, z, order ) {\n\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._order = order || this._order;\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\n\n\t\t},\n\n\t\tcopy: function ( euler ) {\n\n\t\t\tthis._x = euler._x;\n\t\t\tthis._y = euler._y;\n\t\t\tthis._z = euler._z;\n\t\t\tthis._order = euler._order;\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromRotationMatrix: function ( m, order, update ) {\n\n\t\t\tvar clamp = _Math.clamp;\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar te = m.elements;\n\t\t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n\t\t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n\t\t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\t\torder = order || this._order;\n\n\t\t\tif ( order === 'XYZ' ) {\n\n\t\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m13 ) < 0.99999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'YXZ' ) {\n\n\t\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m23 ) < 0.99999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m32 ) < 0.99999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = 0;\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m31 ) < 0.99999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'YZX' ) {\n\n\t\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m21 ) < 0.99999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m22 );\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'XZY' ) {\n\n\t\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m12 ) < 0.99999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._y = Math.atan2( m13, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._y = 0;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );\n\n\t\t\t}\n\n\t\t\tthis._order = order;\n\n\t\t\tif ( update !== false ) this.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromQuaternion: function () {\n\n\t\t\tvar matrix = new Matrix4();\n\n\t\t\treturn function setFromQuaternion( q, order, update ) {\n\n\t\t\t\tmatrix.makeRotationFromQuaternion( q );\n\n\t\t\t\treturn this.setFromRotationMatrix( matrix, order, update );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tsetFromVector3: function ( v, order ) {\n\n\t\t\treturn this.set( v.x, v.y, v.z, order || this._order );\n\n\t\t},\n\n\t\treorder: function () {\n\n\t\t\t// WARNING: this discards revolution information -bhouston\n\n\t\t\tvar q = new Quaternion();\n\n\t\t\treturn function reorder( newOrder ) {\n\n\t\t\t\tq.setFromEuler( this );\n\n\t\t\t\treturn this.setFromQuaternion( q, newOrder );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tequals: function ( euler ) {\n\n\t\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\n\t\t},\n\n\t\tfromArray: function ( array ) {\n\n\t\t\tthis._x = array[ 0 ];\n\t\t\tthis._y = array[ 1 ];\n\t\t\tthis._z = array[ 2 ];\n\t\t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tarray[ offset ] = this._x;\n\t\t\tarray[ offset + 1 ] = this._y;\n\t\t\tarray[ offset + 2 ] = this._z;\n\t\t\tarray[ offset + 3 ] = this._order;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\ttoVector3: function ( optionalResult ) {\n\n\t\t\tif ( optionalResult ) {\n\n\t\t\t\treturn optionalResult.set( this._x, this._y, this._z );\n\n\t\t\t} else {\n\n\t\t\t\treturn new Vector3( this._x, this._y, this._z );\n\n\t\t\t}\n\n\t\t},\n\n\t\tonChange: function ( callback ) {\n\n\t\t\tthis.onChangeCallback = callback;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tonChangeCallback: function () {}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Layers() {\n\n\t\tthis.mask = 1 | 0;\n\n\t}\n\n\tObject.assign( Layers.prototype, {\n\n\t\tset: function ( channel ) {\n\n\t\t\tthis.mask = 1 << channel | 0;\n\n\t\t},\n\n\t\tenable: function ( channel ) {\n\n\t\t\tthis.mask |= 1 << channel | 0;\n\n\t\t},\n\n\t\ttoggle: function ( channel ) {\n\n\t\t\tthis.mask ^= 1 << channel | 0;\n\n\t\t},\n\n\t\tdisable: function ( channel ) {\n\n\t\t\tthis.mask &= ~ ( 1 << channel | 0 );\n\n\t\t},\n\n\t\ttest: function ( layers ) {\n\n\t\t\treturn ( this.mask & layers.mask ) !== 0;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author elephantatwork / www.elephantatwork.ch\n\t */\n\n\tvar object3DId = 0;\n\n\tfunction Object3D() {\n\n\t\tObject.defineProperty( this, 'id', { value: object3DId ++ } );\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Object3D';\n\n\t\tthis.parent = null;\n\t\tthis.children = [];\n\n\t\tthis.up = Object3D.DefaultUp.clone();\n\n\t\tvar position = new Vector3();\n\t\tvar rotation = new Euler();\n\t\tvar quaternion = new Quaternion();\n\t\tvar scale = new Vector3( 1, 1, 1 );\n\n\t\tfunction onRotationChange() {\n\n\t\t\tquaternion.setFromEuler( rotation, false );\n\n\t\t}\n\n\t\tfunction onQuaternionChange() {\n\n\t\t\trotation.setFromQuaternion( quaternion, undefined, false );\n\n\t\t}\n\n\t\trotation.onChange( onRotationChange );\n\t\tquaternion.onChange( onQuaternionChange );\n\n\t\tObject.defineProperties( this, {\n\t\t\tposition: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: position\n\t\t\t},\n\t\t\trotation: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: rotation\n\t\t\t},\n\t\t\tquaternion: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: quaternion\n\t\t\t},\n\t\t\tscale: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: scale\n\t\t\t},\n\t\t\tmodelViewMatrix: {\n\t\t\t\tvalue: new Matrix4()\n\t\t\t},\n\t\t\tnormalMatrix: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t} );\n\n\t\tthis.matrix = new Matrix4();\n\t\tthis.matrixWorld = new Matrix4();\n\n\t\tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\tthis.layers = new Layers();\n\t\tthis.visible = true;\n\n\t\tthis.castShadow = false;\n\t\tthis.receiveShadow = false;\n\n\t\tthis.frustumCulled = true;\n\t\tthis.renderOrder = 0;\n\n\t\tthis.userData = {};\n\t}\n\n\tObject3D.DefaultUp = new Vector3( 0, 1, 0 );\n\tObject3D.DefaultMatrixAutoUpdate = true;\n\n\tObject.assign( Object3D.prototype, EventDispatcher.prototype, {\n\n\t\tisObject3D: true,\n\n\t\tonBeforeRender: function () {},\n\t\tonAfterRender: function () {},\n\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tthis.matrix.multiplyMatrices( matrix, this.matrix );\n\n\t\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\n\t\t},\n\n\t\tapplyQuaternion: function ( q ) {\n\n\t\t\tthis.quaternion.premultiply( q );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetRotationFromAxisAngle: function ( axis, angle ) {\n\n\t\t\t// assumes axis is normalized\n\n\t\t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\n\t\t},\n\n\t\tsetRotationFromEuler: function ( euler ) {\n\n\t\t\tthis.quaternion.setFromEuler( euler, true );\n\n\t\t},\n\n\t\tsetRotationFromMatrix: function ( m ) {\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tthis.quaternion.setFromRotationMatrix( m );\n\n\t\t},\n\n\t\tsetRotationFromQuaternion: function ( q ) {\n\n\t\t\t// assumes q is normalized\n\n\t\t\tthis.quaternion.copy( q );\n\n\t\t},\n\n\t\trotateOnAxis: function () {\n\n\t\t\t// rotate object on axis in object space\n\t\t\t// axis is assumed to be normalized\n\n\t\t\tvar q1 = new Quaternion();\n\n\t\t\treturn function rotateOnAxis( axis, angle ) {\n\n\t\t\t\tq1.setFromAxisAngle( axis, angle );\n\n\t\t\t\tthis.quaternion.multiply( q1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateX: function () {\n\n\t\t\tvar v1 = new Vector3( 1, 0, 0 );\n\n\t\t\treturn function rotateX( angle ) {\n\n\t\t\t\treturn this.rotateOnAxis( v1, angle );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateY: function () {\n\n\t\t\tvar v1 = new Vector3( 0, 1, 0 );\n\n\t\t\treturn function rotateY( angle ) {\n\n\t\t\t\treturn this.rotateOnAxis( v1, angle );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateZ: function () {\n\n\t\t\tvar v1 = new Vector3( 0, 0, 1 );\n\n\t\t\treturn function rotateZ( angle ) {\n\n\t\t\t\treturn this.rotateOnAxis( v1, angle );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslateOnAxis: function () {\n\n\t\t\t// translate object by distance along axis in object space\n\t\t\t// axis is assumed to be normalized\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function translateOnAxis( axis, distance ) {\n\n\t\t\t\tv1.copy( axis ).applyQuaternion( this.quaternion );\n\n\t\t\t\tthis.position.add( v1.multiplyScalar( distance ) );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslateX: function () {\n\n\t\t\tvar v1 = new Vector3( 1, 0, 0 );\n\n\t\t\treturn function translateX( distance ) {\n\n\t\t\t\treturn this.translateOnAxis( v1, distance );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslateY: function () {\n\n\t\t\tvar v1 = new Vector3( 0, 1, 0 );\n\n\t\t\treturn function translateY( distance ) {\n\n\t\t\t\treturn this.translateOnAxis( v1, distance );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslateZ: function () {\n\n\t\t\tvar v1 = new Vector3( 0, 0, 1 );\n\n\t\t\treturn function translateZ( distance ) {\n\n\t\t\t\treturn this.translateOnAxis( v1, distance );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tlocalToWorld: function ( vector ) {\n\n\t\t\treturn vector.applyMatrix4( this.matrixWorld );\n\n\t\t},\n\n\t\tworldToLocal: function () {\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function worldToLocal( vector ) {\n\n\t\t\t\treturn vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tlookAt: function () {\n\n\t\t\t// This method does not support objects with rotated and/or translated parent(s)\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function lookAt( vector ) {\n\n\t\t\t\tif ( this.isCamera ) {\n\n\t\t\t\t\tm1.lookAt( this.position, vector, this.up );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tm1.lookAt( vector, this.position, this.up );\n\n\t\t\t\t}\n\n\t\t\t\tthis.quaternion.setFromRotationMatrix( m1 );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tadd: function ( object ) {\n\n\t\t\tif ( arguments.length > 1 ) {\n\n\t\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\t\tthis.add( arguments[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tif ( object === this ) {\n\n\t\t\t\tconsole.error( \"THREE.Object3D.add: object can't be added as a child of itself.\", object );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tif ( ( object && object.isObject3D ) ) {\n\n\t\t\t\tif ( object.parent !== null ) {\n\n\t\t\t\t\tobject.parent.remove( object );\n\n\t\t\t\t}\n\n\t\t\t\tobject.parent = this;\n\t\t\t\tobject.dispatchEvent( { type: 'added' } );\n\n\t\t\t\tthis.children.push( object );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( \"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tremove: function ( object ) {\n\n\t\t\tif ( arguments.length > 1 ) {\n\n\t\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\t\tthis.remove( arguments[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar index = this.children.indexOf( object );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\tobject.parent = null;\n\n\t\t\t\tobject.dispatchEvent( { type: 'removed' } );\n\n\t\t\t\tthis.children.splice( index, 1 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\t\t\t\n\t\t},\n\n\t\tgetObjectById: function ( id ) {\n\n\t\t\treturn this.getObjectByProperty( 'id', id );\n\n\t\t},\n\n\t\tgetObjectByName: function ( name ) {\n\n\t\t\treturn this.getObjectByProperty( 'name', name );\n\n\t\t},\n\n\t\tgetObjectByProperty: function ( name, value ) {\n\n\t\t\tif ( this[ name ] === value ) return this;\n\n\t\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = this.children[ i ];\n\t\t\t\tvar object = child.getObjectByProperty( name, value );\n\n\t\t\t\tif ( object !== undefined ) {\n\n\t\t\t\t\treturn object;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn undefined;\n\n\t\t},\n\n\t\tgetWorldPosition: function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\treturn result.setFromMatrixPosition( this.matrixWorld );\n\n\t\t},\n\n\t\tgetWorldQuaternion: function () {\n\n\t\t\tvar position = new Vector3();\n\t\t\tvar scale = new Vector3();\n\n\t\t\treturn function getWorldQuaternion( optionalTarget ) {\n\n\t\t\t\tvar result = optionalTarget || new Quaternion();\n\n\t\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\t\tthis.matrixWorld.decompose( position, result, scale );\n\n\t\t\t\treturn result;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tgetWorldRotation: function () {\n\n\t\t\tvar quaternion = new Quaternion();\n\n\t\t\treturn function getWorldRotation( optionalTarget ) {\n\n\t\t\t\tvar result = optionalTarget || new Euler();\n\n\t\t\t\tthis.getWorldQuaternion( quaternion );\n\n\t\t\t\treturn result.setFromQuaternion( quaternion, this.rotation.order, false );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tgetWorldScale: function () {\n\n\t\t\tvar position = new Vector3();\n\t\t\tvar quaternion = new Quaternion();\n\n\t\t\treturn function getWorldScale( optionalTarget ) {\n\n\t\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\t\tthis.matrixWorld.decompose( position, quaternion, result );\n\n\t\t\t\treturn result;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tgetWorldDirection: function () {\n\n\t\t\tvar quaternion = new Quaternion();\n\n\t\t\treturn function getWorldDirection( optionalTarget ) {\n\n\t\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\t\tthis.getWorldQuaternion( quaternion );\n\n\t\t\t\treturn result.set( 0, 0, 1 ).applyQuaternion( quaternion );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\traycast: function () {},\n\n\t\ttraverse: function ( callback ) {\n\n\t\t\tcallback( this );\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].traverse( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttraverseVisible: function ( callback ) {\n\n\t\t\tif ( this.visible === false ) return;\n\n\t\t\tcallback( this );\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].traverseVisible( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttraverseAncestors: function ( callback ) {\n\n\t\t\tvar parent = this.parent;\n\n\t\t\tif ( parent !== null ) {\n\n\t\t\t\tcallback( parent );\n\n\t\t\t\tparent.traverseAncestors( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateMatrix: function () {\n\n\t\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\n\t\t\tthis.matrixWorldNeedsUpdate = true;\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\n\n\t\t\tif ( this.matrixWorldNeedsUpdate || force ) {\n\n\t\t\t\tif ( this.parent === null ) {\n\n\t\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t\t}\n\n\t\t\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\t\t\tforce = true;\n\n\t\t\t}\n\n\t\t\t// update children\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].updateMatrixWorld( force );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\t// meta is '' when called from JSON.stringify\n\t\t\tvar isRootObject = ( meta === undefined || meta === '' );\n\n\t\t\tvar output = {};\n\n\t\t\t// meta is a hash used to collect geometries, materials.\n\t\t\t// not providing it implies that this is the root object\n\t\t\t// being serialized.\n\t\t\tif ( isRootObject ) {\n\n\t\t\t\t// initialize meta obj\n\t\t\t\tmeta = {\n\t\t\t\t\tgeometries: {},\n\t\t\t\t\tmaterials: {},\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {}\n\t\t\t\t};\n\n\t\t\t\toutput.metadata = {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Object',\n\t\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\t// standard Object3D serialization\n\n\t\t\tvar object = {};\n\n\t\t\tobject.uuid = this.uuid;\n\t\t\tobject.type = this.type;\n\n\t\t\tif ( this.name !== '' ) object.name = this.name;\n\t\t\tif ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;\n\t\t\tif ( this.castShadow === true ) object.castShadow = true;\n\t\t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\n\t\t\tif ( this.visible === false ) object.visible = false;\n\n\t\t\tobject.matrix = this.matrix.toArray();\n\n\t\t\t//\n\n\t\t\tfunction serialize( library, element ) {\n\n\t\t\t\tif ( library[ element.uuid ] === undefined ) {\n\n\t\t\t\t\tlibrary[ element.uuid ] = element.toJSON( meta );\n\n\t\t\t\t}\n\n\t\t\t\treturn element.uuid;\n\n\t\t\t}\n\n\t\t\tif ( this.geometry !== undefined ) {\n\n\t\t\t\tobject.geometry = serialize( meta.geometries, this.geometry );\n\n\t\t\t}\n\n\t\t\tif ( this.material !== undefined ) {\n\n\t\t\t\tif ( Array.isArray( this.material ) ) {\n\n\t\t\t\t\tvar uuids = [];\n\n\t\t\t\t\tfor ( var i = 0, l = this.material.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tuuids.push( serialize( meta.materials, this.material[ i ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobject.material = uuids;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tobject.material = serialize( meta.materials, this.material );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( this.children.length > 0 ) {\n\n\t\t\t\tobject.children = [];\n\n\t\t\t\tfor ( var i = 0; i < this.children.length; i ++ ) {\n\n\t\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( isRootObject ) {\n\n\t\t\t\tvar geometries = extractFromCache( meta.geometries );\n\t\t\t\tvar materials = extractFromCache( meta.materials );\n\t\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\t\tvar images = extractFromCache( meta.images );\n\n\t\t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\n\t\t\t\tif ( materials.length > 0 ) output.materials = materials;\n\t\t\t\tif ( textures.length > 0 ) output.textures = textures;\n\t\t\t\tif ( images.length > 0 ) output.images = images;\n\n\t\t\t}\n\n\t\t\toutput.object = object;\n\n\t\t\treturn output;\n\n\t\t\t// extract data from the cache hash\n\t\t\t// remove metadata on each item\n\t\t\t// and return as array\n\t\t\tfunction extractFromCache( cache ) {\n\n\t\t\t\tvar values = [];\n\t\t\t\tfor ( var key in cache ) {\n\n\t\t\t\t\tvar data = cache[ key ];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push( data );\n\n\t\t\t\t}\n\t\t\t\treturn values;\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function ( recursive ) {\n\n\t\t\treturn new this.constructor().copy( this, recursive );\n\n\t\t},\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tif ( recursive === undefined ) recursive = true;\n\n\t\t\tthis.name = source.name;\n\n\t\t\tthis.up.copy( source.up );\n\n\t\t\tthis.position.copy( source.position );\n\t\t\tthis.quaternion.copy( source.quaternion );\n\t\t\tthis.scale.copy( source.scale );\n\n\t\t\tthis.matrix.copy( source.matrix );\n\t\t\tthis.matrixWorld.copy( source.matrixWorld );\n\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\n\t\t\tthis.layers.mask = source.layers.mask;\n\t\t\tthis.visible = source.visible;\n\n\t\t\tthis.castShadow = source.castShadow;\n\t\t\tthis.receiveShadow = source.receiveShadow;\n\n\t\t\tthis.frustumCulled = source.frustumCulled;\n\t\t\tthis.renderOrder = source.renderOrder;\n\n\t\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\t\tif ( recursive === true ) {\n\n\t\t\t\tfor ( var i = 0; i < source.children.length; i ++ ) {\n\n\t\t\t\t\tvar child = source.children[ i ];\n\t\t\t\t\tthis.add( child.clone() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author WestLangley / http://github.com/WestLangley\n\t*/\n\n\tfunction Camera() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Camera';\n\n\t\tthis.matrixWorldInverse = new Matrix4();\n\t\tthis.projectionMatrix = new Matrix4();\n\n\t}\n\n\tCamera.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Camera,\n\n\t\tisCamera: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source, recursive );\n\n\t\t\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n\t\t\tthis.projectionMatrix.copy( source.projectionMatrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetWorldDirection: function () {\n\n\t\t\tvar quaternion = new Quaternion();\n\n\t\t\treturn function getWorldDirection( optionalTarget ) {\n\n\t\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\t\tthis.getWorldQuaternion( quaternion );\n\n\t\t\t\treturn result.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tthis.matrixWorldInverse.getInverse( this.matrixWorld );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author arose / http://github.com/arose\n\t */\n\n\tfunction OrthographicCamera( left, right, top, bottom, near, far ) {\n\n\t\tCamera.call( this );\n\n\t\tthis.type = 'OrthographicCamera';\n\n\t\tthis.zoom = 1;\n\t\tthis.view = null;\n\n\t\tthis.left = left;\n\t\tthis.right = right;\n\t\tthis.top = top;\n\t\tthis.bottom = bottom;\n\n\t\tthis.near = ( near !== undefined ) ? near : 0.1;\n\t\tthis.far = ( far !== undefined ) ? far : 2000;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tOrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n\t\tconstructor: OrthographicCamera,\n\n\t\tisOrthographicCamera: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tCamera.prototype.copy.call( this, source, recursive );\n\n\t\t\tthis.left = source.left;\n\t\t\tthis.right = source.right;\n\t\t\tthis.top = source.top;\n\t\t\tthis.bottom = source.bottom;\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\n\t\t\tthis.zoom = source.zoom;\n\t\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetViewOffset: function( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\t\tthis.view = {\n\t\t\t\tfullWidth: fullWidth,\n\t\t\t\tfullHeight: fullHeight,\n\t\t\t\toffsetX: x,\n\t\t\t\toffsetY: y,\n\t\t\t\twidth: width,\n\t\t\t\theight: height\n\t\t\t};\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tclearViewOffset: function() {\n\n\t\t\tthis.view = null;\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tupdateProjectionMatrix: function () {\n\n\t\t\tvar dx = ( this.right - this.left ) / ( 2 * this.zoom );\n\t\t\tvar dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n\t\t\tvar cx = ( this.right + this.left ) / 2;\n\t\t\tvar cy = ( this.top + this.bottom ) / 2;\n\n\t\t\tvar left = cx - dx;\n\t\t\tvar right = cx + dx;\n\t\t\tvar top = cy + dy;\n\t\t\tvar bottom = cy - dy;\n\n\t\t\tif ( this.view !== null ) {\n\n\t\t\t\tvar zoomW = this.zoom / ( this.view.width / this.view.fullWidth );\n\t\t\t\tvar zoomH = this.zoom / ( this.view.height / this.view.fullHeight );\n\t\t\t\tvar scaleW = ( this.right - this.left ) / this.view.width;\n\t\t\t\tvar scaleH = ( this.top - this.bottom ) / this.view.height;\n\n\t\t\t\tleft += scaleW * ( this.view.offsetX / zoomW );\n\t\t\t\tright = left + scaleW * ( this.view.width / zoomW );\n\t\t\t\ttop -= scaleH * ( this.view.offsetY / zoomH );\n\t\t\t\tbottom = top - scaleH * ( this.view.height / zoomH );\n\n\t\t\t}\n\n\t\t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.zoom = this.zoom;\n\t\t\tdata.object.left = this.left;\n\t\t\tdata.object.right = this.right;\n\t\t\tdata.object.top = this.top;\n\t\t\tdata.object.bottom = this.bottom;\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\n\t\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author greggman / http://games.greggman.com/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author tschw\n\t */\n\n\tfunction PerspectiveCamera( fov, aspect, near, far ) {\n\n\t\tCamera.call( this );\n\n\t\tthis.type = 'PerspectiveCamera';\n\n\t\tthis.fov = fov !== undefined ? fov : 50;\n\t\tthis.zoom = 1;\n\n\t\tthis.near = near !== undefined ? near : 0.1;\n\t\tthis.far = far !== undefined ? far : 2000;\n\t\tthis.focus = 10;\n\n\t\tthis.aspect = aspect !== undefined ? aspect : 1;\n\t\tthis.view = null;\n\n\t\tthis.filmGauge = 35;\t// width of the film (default in millimeters)\n\t\tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tPerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n\t\tconstructor: PerspectiveCamera,\n\n\t\tisPerspectiveCamera: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tCamera.prototype.copy.call( this, source, recursive );\n\n\t\t\tthis.fov = source.fov;\n\t\t\tthis.zoom = source.zoom;\n\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\t\t\tthis.focus = source.focus;\n\n\t\t\tthis.aspect = source.aspect;\n\t\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\t\tthis.filmGauge = source.filmGauge;\n\t\t\tthis.filmOffset = source.filmOffset;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t/**\n\t\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t\t *\n\t\t * The default film gauge is 35, so that the focal length can be specified for\n\t\t * a 35mm (full frame) camera.\n\t\t *\n\t\t * Values for focal length and film gauge must have the same unit.\n\t\t */\n\t\tsetFocalLength: function ( focalLength ) {\n\n\t\t\t// see http://www.bobatkins.com/photography/technical/field_of_view.html\n\t\t\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\n\t\t\tthis.fov = _Math.RAD2DEG * 2 * Math.atan( vExtentSlope );\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\t/**\n\t\t * Calculates the focal length from the current .fov and .filmGauge.\n\t\t */\n\t\tgetFocalLength: function () {\n\n\t\t\tvar vExtentSlope = Math.tan( _Math.DEG2RAD * 0.5 * this.fov );\n\n\t\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\n\t\t},\n\n\t\tgetEffectiveFOV: function () {\n\n\t\t\treturn _Math.RAD2DEG * 2 * Math.atan(\n\t\t\t\t\tMath.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\n\t\t},\n\n\t\tgetFilmWidth: function () {\n\n\t\t\t// film not completely covered in portrait format (aspect < 1)\n\t\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\n\t\t},\n\n\t\tgetFilmHeight: function () {\n\n\t\t\t// film not completely covered in landscape format (aspect > 1)\n\t\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\n\t\t},\n\n\t\t/**\n\t\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t\t * multi-monitor/multi-machine setups.\n\t\t *\n\t\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t\t * the monitors are in grid like this\n\t\t *\n\t\t *   +---+---+---+\n\t\t *   | A | B | C |\n\t\t *   +---+---+---+\n\t\t *   | D | E | F |\n\t\t *   +---+---+---+\n\t\t *\n\t\t * then for each monitor you would call it like this\n\t\t *\n\t\t *   var w = 1920;\n\t\t *   var h = 1080;\n\t\t *   var fullWidth = w * 3;\n\t\t *   var fullHeight = h * 2;\n\t\t *\n\t\t *   --A--\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t\t *   --B--\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t\t *   --C--\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t\t *   --D--\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t\t *   --E--\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t\t *   --F--\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t\t *\n\t\t *   Note there is no reason monitors have to be the same size or in a grid.\n\t\t */\n\t\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\t\tthis.view = {\n\t\t\t\tfullWidth: fullWidth,\n\t\t\t\tfullHeight: fullHeight,\n\t\t\t\toffsetX: x,\n\t\t\t\toffsetY: y,\n\t\t\t\twidth: width,\n\t\t\t\theight: height\n\t\t\t};\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tclearViewOffset: function () {\n\n\t\t\tthis.view = null;\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tupdateProjectionMatrix: function () {\n\n\t\t\tvar near = this.near,\n\t\t\t\ttop = near * Math.tan(\n\t\t\t\t\t\t_Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,\n\t\t\t\theight = 2 * top,\n\t\t\t\twidth = this.aspect * height,\n\t\t\t\tleft = - 0.5 * width,\n\t\t\t\tview = this.view;\n\n\t\t\tif ( view !== null ) {\n\n\t\t\t\tvar fullWidth = view.fullWidth,\n\t\t\t\t\tfullHeight = view.fullHeight;\n\n\t\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\t\twidth *= view.width / fullWidth;\n\t\t\t\theight *= view.height / fullHeight;\n\n\t\t\t}\n\n\t\t\tvar skew = this.filmOffset;\n\t\t\tif ( skew !== 0 ) left += near * skew / this.getFilmWidth();\n\n\t\t\tthis.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.fov = this.fov;\n\t\t\tdata.object.zoom = this.zoom;\n\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\t\t\tdata.object.focus = this.focus;\n\n\t\t\tdata.object.aspect = this.aspect;\n\n\t\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\t\tdata.object.filmGauge = this.filmGauge;\n\t\t\tdata.object.filmOffset = this.filmOffset;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Face3( a, b, c, normal, color, materialIndex ) {\n\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\tthis.c = c;\n\n\t\tthis.normal = ( normal && normal.isVector3 ) ? normal : new Vector3();\n\t\tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\n\n\t\tthis.color = ( color && color.isColor ) ? color : new Color();\n\t\tthis.vertexColors = Array.isArray( color ) ? color : [];\n\n\t\tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\n\n\t}\n\n\tObject.assign( Face3.prototype, {\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.a = source.a;\n\t\t\tthis.b = source.b;\n\t\t\tthis.c = source.c;\n\n\t\t\tthis.normal.copy( source.normal );\n\t\t\tthis.color.copy( source.color );\n\n\t\t\tthis.materialIndex = source.materialIndex;\n\n\t\t\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\t\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {\n\n\t\t\t\tthis.vertexColors[ i ] = source.vertexColors[ i ].clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author kile / http://kile.stravaganza.org/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar count = 0;\n\tfunction GeometryIdCount() { return count++; }\n\n\tfunction Geometry() {\n\n\t\tObject.defineProperty( this, 'id', { value: GeometryIdCount() } );\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Geometry';\n\n\t\tthis.vertices = [];\n\t\tthis.colors = [];\n\t\tthis.faces = [];\n\t\tthis.faceVertexUvs = [[]];\n\n\t\tthis.morphTargets = [];\n\t\tthis.morphNormals = [];\n\n\t\tthis.skinWeights = [];\n\t\tthis.skinIndices = [];\n\n\t\tthis.lineDistances = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// update flags\n\n\t\tthis.elementsNeedUpdate = false;\n\t\tthis.verticesNeedUpdate = false;\n\t\tthis.uvsNeedUpdate = false;\n\t\tthis.normalsNeedUpdate = false;\n\t\tthis.colorsNeedUpdate = false;\n\t\tthis.lineDistancesNeedUpdate = false;\n\t\tthis.groupsNeedUpdate = false;\n\n\t}\n\n\tObject.assign( Geometry.prototype, EventDispatcher.prototype, {\n\n\t\tisGeometry: true,\n\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\t\tvar vertex = this.vertices[ i ];\n\t\t\t\tvertex.applyMatrix4( matrix );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\n\n\t\t\t\tvar face = this.faces[ i ];\n\t\t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.boundingBox !== null ) {\n\n\t\t\t\tthis.computeBoundingBox();\n\n\t\t\t}\n\n\t\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\t\tthis.computeBoundingSphere();\n\n\t\t\t}\n\n\t\t\tthis.verticesNeedUpdate = true;\n\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateX: function () {\n\n\t\t\t// rotate geometry around world x-axis\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function rotateX( angle ) {\n\n\t\t\t\tm1.makeRotationX( angle );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateY: function () {\n\n\t\t\t// rotate geometry around world y-axis\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function rotateY( angle ) {\n\n\t\t\t\tm1.makeRotationY( angle );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateZ: function () {\n\n\t\t\t// rotate geometry around world z-axis\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function rotateZ( angle ) {\n\n\t\t\t\tm1.makeRotationZ( angle );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslate: function () {\n\n\t\t\t// translate geometry\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function translate( x, y, z ) {\n\n\t\t\t\tm1.makeTranslation( x, y, z );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tscale: function () {\n\n\t\t\t// scale geometry\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function scale( x, y, z ) {\n\n\t\t\t\tm1.makeScale( x, y, z );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tlookAt: function () {\n\n\t\t\tvar obj = new Object3D();\n\n\t\t\treturn function lookAt( vector ) {\n\n\t\t\t\tobj.lookAt( vector );\n\n\t\t\t\tobj.updateMatrix();\n\n\t\t\t\tthis.applyMatrix( obj.matrix );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tfromBufferGeometry: function ( geometry ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar indices = geometry.index !== null ? geometry.index.array : undefined;\n\t\t\tvar attributes = geometry.attributes;\n\n\t\t\tvar positions = attributes.position.array;\n\t\t\tvar normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\n\t\t\tvar colors = attributes.color !== undefined ? attributes.color.array : undefined;\n\t\t\tvar uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\n\t\t\tvar uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\n\n\t\t\tif ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];\n\n\t\t\tvar tempNormals = [];\n\t\t\tvar tempUVs = [];\n\t\t\tvar tempUVs2 = [];\n\n\t\t\tfor ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {\n\n\t\t\t\tscope.vertices.push( new Vector3( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] ) );\n\n\t\t\t\tif ( normals !== undefined ) {\n\n\t\t\t\t\ttempNormals.push( new Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( colors !== undefined ) {\n\n\t\t\t\t\tscope.colors.push( new Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( uvs !== undefined ) {\n\n\t\t\t\t\ttempUVs.push( new Vector2( uvs[ j ], uvs[ j + 1 ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( uvs2 !== undefined ) {\n\n\t\t\t\t\ttempUVs2.push( new Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction addFace( a, b, c, materialIndex ) {\n\n\t\t\t\tvar vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];\n\t\t\t\tvar vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];\n\n\t\t\t\tvar face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );\n\n\t\t\t\tscope.faces.push( face );\n\n\t\t\t\tif ( uvs !== undefined ) {\n\n\t\t\t\t\tscope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( uvs2 !== undefined ) {\n\n\t\t\t\t\tscope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar groups = geometry.groups;\n\n\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\tfor ( var i = 0; i < groups.length; i ++ ) {\n\n\t\t\t\t\tvar group = groups[ i ];\n\n\t\t\t\t\tvar start = group.start;\n\t\t\t\t\tvar count = group.count;\n\n\t\t\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\t\t\tif ( indices !== undefined ) {\n\n\t\t\t\t\t\t\taddFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\taddFace( j, j + 1, j + 2, group.materialIndex );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( indices !== undefined ) {\n\n\t\t\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t\t\t\taddFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i = 0; i < positions.length / 3; i += 3 ) {\n\n\t\t\t\t\t\taddFace( i, i + 1, i + 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.computeFaceNormals();\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcenter: function () {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t\tvar offset = this.boundingBox.getCenter().negate();\n\n\t\t\tthis.translate( offset.x, offset.y, offset.z );\n\n\t\t\treturn offset;\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t\tvar center = this.boundingSphere.center;\n\t\t\tvar radius = this.boundingSphere.radius;\n\n\t\t\tvar s = radius === 0 ? 1 : 1.0 / radius;\n\n\t\t\tvar matrix = new Matrix4();\n\t\t\tmatrix.set(\n\t\t\t\ts, 0, 0, - s * center.x,\n\t\t\t\t0, s, 0, - s * center.y,\n\t\t\t\t0, 0, s, - s * center.z,\n\t\t\t\t0, 0, 0, 1\n\t\t\t);\n\n\t\t\tthis.applyMatrix( matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcomputeFaceNormals: function () {\n\n\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tvar face = this.faces[ f ];\n\n\t\t\t\tvar vA = this.vertices[ face.a ];\n\t\t\t\tvar vB = this.vertices[ face.b ];\n\t\t\t\tvar vC = this.vertices[ face.c ];\n\n\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\tcb.cross( ab );\n\n\t\t\t\tcb.normalize();\n\n\t\t\t\tface.normal.copy( cb );\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeVertexNormals: function ( areaWeighted ) {\n\n\t\t\tif ( areaWeighted === undefined ) areaWeighted = true;\n\n\t\t\tvar v, vl, f, fl, face, vertices;\n\n\t\t\tvertices = new Array( this.vertices.length );\n\n\t\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\t\tvertices[ v ] = new Vector3();\n\n\t\t\t}\n\n\t\t\tif ( areaWeighted ) {\n\n\t\t\t\t// vertex normals weighted by triangle areas\n\t\t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\n\n\t\t\t\tvar vA, vB, vC;\n\t\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\t\tvA = this.vertices[ face.a ];\n\t\t\t\t\tvB = this.vertices[ face.b ];\n\t\t\t\t\tvC = this.vertices[ face.c ];\n\n\t\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tvertices[ face.a ].add( cb );\n\t\t\t\t\tvertices[ face.b ].add( cb );\n\t\t\t\t\tvertices[ face.c ].add( cb );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthis.computeFaceNormals();\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\t\tvertices[ face.a ].add( face.normal );\n\t\t\t\t\tvertices[ face.b ].add( face.normal );\n\t\t\t\t\tvertices[ face.c ].add( face.normal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\t\tvertices[ v ].normalize();\n\n\t\t\t}\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\t\tvertexNormals[ 0 ].copy( vertices[ face.a ] );\n\t\t\t\t\tvertexNormals[ 1 ].copy( vertices[ face.b ] );\n\t\t\t\t\tvertexNormals[ 2 ].copy( vertices[ face.c ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvertexNormals[ 0 ] = vertices[ face.a ].clone();\n\t\t\t\t\tvertexNormals[ 1 ] = vertices[ face.b ].clone();\n\t\t\t\t\tvertexNormals[ 2 ] = vertices[ face.c ].clone();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.faces.length > 0 ) {\n\n\t\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeFlatVertexNormals: function () {\n\n\t\t\tvar f, fl, face;\n\n\t\t\tthis.computeFaceNormals();\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\t\tvertexNormals[ 0 ].copy( face.normal );\n\t\t\t\t\tvertexNormals[ 1 ].copy( face.normal );\n\t\t\t\t\tvertexNormals[ 2 ].copy( face.normal );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvertexNormals[ 0 ] = face.normal.clone();\n\t\t\t\t\tvertexNormals[ 1 ] = face.normal.clone();\n\t\t\t\t\tvertexNormals[ 2 ] = face.normal.clone();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.faces.length > 0 ) {\n\n\t\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeMorphNormals: function () {\n\n\t\t\tvar i, il, f, fl, face;\n\n\t\t\t// save original normals\n\t\t\t// - create temp variables on first access\n\t\t\t//   otherwise just copy (for faster repeated calls)\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tif ( ! face.__originalFaceNormal ) {\n\n\t\t\t\t\tface.__originalFaceNormal = face.normal.clone();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tface.__originalFaceNormal.copy( face.normal );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];\n\n\t\t\t\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\n\n\t\t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// use temp geometry to compute face and vertex normals for each morph\n\n\t\t\tvar tmpGeo = new Geometry();\n\t\t\ttmpGeo.faces = this.faces;\n\n\t\t\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\n\n\t\t\t\t// create on first access\n\n\t\t\t\tif ( ! this.morphNormals[ i ] ) {\n\n\t\t\t\t\tthis.morphNormals[ i ] = {};\n\t\t\t\t\tthis.morphNormals[ i ].faceNormals = [];\n\t\t\t\t\tthis.morphNormals[ i ].vertexNormals = [];\n\n\t\t\t\t\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\n\t\t\t\t\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\n\n\t\t\t\t\tvar faceNormal, vertexNormals;\n\n\t\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\t\tfaceNormal = new Vector3();\n\t\t\t\t\t\tvertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };\n\n\t\t\t\t\t\tdstNormalsFace.push( faceNormal );\n\t\t\t\t\t\tdstNormalsVertex.push( vertexNormals );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar morphNormals = this.morphNormals[ i ];\n\n\t\t\t\t// set vertices to morph target\n\n\t\t\t\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\n\n\t\t\t\t// compute morph normals\n\n\t\t\t\ttmpGeo.computeFaceNormals();\n\t\t\t\ttmpGeo.computeVertexNormals();\n\n\t\t\t\t// store morph normals\n\n\t\t\t\tvar faceNormal, vertexNormals;\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\t\tfaceNormal = morphNormals.faceNormals[ f ];\n\t\t\t\t\tvertexNormals = morphNormals.vertexNormals[ f ];\n\n\t\t\t\t\tfaceNormal.copy( face.normal );\n\n\t\t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\n\t\t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\n\t\t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// restore original normals\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tface.normal = face.__originalFaceNormal;\n\t\t\t\tface.vertexNormals = face.__originalVertexNormals;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeLineDistances: function () {\n\n\t\t\tvar d = 0;\n\t\t\tvar vertices = this.vertices;\n\n\t\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\t\tif ( i > 0 ) {\n\n\t\t\t\t\td += vertices[ i ].distanceTo( vertices[ i - 1 ] );\n\n\t\t\t\t}\n\n\t\t\t\tthis.lineDistances[ i ] = d;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeBoundingBox: function () {\n\n\t\t\tif ( this.boundingBox === null ) {\n\n\t\t\t\tthis.boundingBox = new Box3();\n\n\t\t\t}\n\n\t\t\tthis.boundingBox.setFromPoints( this.vertices );\n\n\t\t},\n\n\t\tcomputeBoundingSphere: function () {\n\n\t\t\tif ( this.boundingSphere === null ) {\n\n\t\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t\t}\n\n\t\t\tthis.boundingSphere.setFromPoints( this.vertices );\n\n\t\t},\n\n\t\tmerge: function ( geometry, matrix, materialIndexOffset ) {\n\n\t\t\tif ( ! ( geometry && geometry.isGeometry ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar normalMatrix,\n\t\t\t\tvertexOffset = this.vertices.length,\n\t\t\t\tvertices1 = this.vertices,\n\t\t\t\tvertices2 = geometry.vertices,\n\t\t\t\tfaces1 = this.faces,\n\t\t\t\tfaces2 = geometry.faces,\n\t\t\t\tuvs1 = this.faceVertexUvs[ 0 ],\n\t\t\t\tuvs2 = geometry.faceVertexUvs[ 0 ],\n\t\t\t\tcolors1 = this.colors,\n\t\t\t\tcolors2 = geometry.colors;\n\n\t\t\tif ( materialIndexOffset === undefined ) materialIndexOffset = 0;\n\n\t\t\tif ( matrix !== undefined ) {\n\n\t\t\t\tnormalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\t}\n\n\t\t\t// vertices\n\n\t\t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\n\n\t\t\t\tvar vertex = vertices2[ i ];\n\n\t\t\t\tvar vertexCopy = vertex.clone();\n\n\t\t\t\tif ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );\n\n\t\t\t\tvertices1.push( vertexCopy );\n\n\t\t\t}\n\n\t\t\t// colors\n\n\t\t\tfor ( var i = 0, il = colors2.length; i < il; i ++ ) {\n\n\t\t\t\tcolors1.push( colors2[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// faces\n\n\t\t\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\n\n\t\t\t\tvar face = faces2[ i ], faceCopy, normal, color,\n\t\t\t\t\tfaceVertexNormals = face.vertexNormals,\n\t\t\t\t\tfaceVertexColors = face.vertexColors;\n\n\t\t\t\tfaceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\n\t\t\t\tfaceCopy.normal.copy( face.normal );\n\n\t\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tnormal = faceVertexNormals[ j ].clone();\n\n\t\t\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfaceCopy.vertexNormals.push( normal );\n\n\t\t\t\t}\n\n\t\t\t\tfaceCopy.color.copy( face.color );\n\n\t\t\t\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\n\n\t\t\t\t\tcolor = faceVertexColors[ j ];\n\t\t\t\t\tfaceCopy.vertexColors.push( color.clone() );\n\n\t\t\t\t}\n\n\t\t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n\n\t\t\t\tfaces1.push( faceCopy );\n\n\t\t\t}\n\n\t\t\t// uvs\n\n\t\t\tfor ( i = 0, il = uvs2.length; i < il; i ++ ) {\n\n\t\t\t\tvar uv = uvs2[ i ], uvCopy = [];\n\n\t\t\t\tif ( uv === undefined ) {\n\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0, jl = uv.length; j < jl; j ++ ) {\n\n\t\t\t\t\tuvCopy.push( uv[ j ].clone() );\n\n\t\t\t\t}\n\n\t\t\t\tuvs1.push( uvCopy );\n\n\t\t\t}\n\n\t\t},\n\n\t\tmergeMesh: function ( mesh ) {\n\n\t\t\tif ( ! ( mesh && mesh.isMesh ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tmesh.matrixAutoUpdate && mesh.updateMatrix();\n\n\t\t\tthis.merge( mesh.geometry, mesh.matrix );\n\n\t\t},\n\n\t\t/*\n\t\t * Checks for duplicate vertices with hashmap.\n\t\t * Duplicated vertices are removed\n\t\t * and faces' vertices are updated.\n\t\t */\n\n\t\tmergeVertices: function () {\n\n\t\t\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n\t\t\tvar unique = [], changes = [];\n\n\t\t\tvar v, key;\n\t\t\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n\t\t\tvar precision = Math.pow( 10, precisionPoints );\n\t\t\tvar i, il, face;\n\t\t\tvar indices, j, jl;\n\n\t\t\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\t\tv = this.vertices[ i ];\n\t\t\t\tkey = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\n\n\t\t\t\tif ( verticesMap[ key ] === undefined ) {\n\n\t\t\t\t\tverticesMap[ key ] = i;\n\t\t\t\t\tunique.push( this.vertices[ i ] );\n\t\t\t\t\tchanges[ i ] = unique.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n\t\t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\t// if faces are completely degenerate after merging vertices, we\n\t\t\t// have to remove them from the geometry.\n\t\t\tvar faceIndicesToRemove = [];\n\n\t\t\tfor ( i = 0, il = this.faces.length; i < il; i ++ ) {\n\n\t\t\t\tface = this.faces[ i ];\n\n\t\t\t\tface.a = changes[ face.a ];\n\t\t\t\tface.b = changes[ face.b ];\n\t\t\t\tface.c = changes[ face.c ];\n\n\t\t\t\tindices = [ face.a, face.b, face.c ];\n\n\t\t\t\t// if any duplicate vertices are found in a Face3\n\t\t\t\t// we have to remove the face as nothing can be saved\n\t\t\t\tfor ( var n = 0; n < 3; n ++ ) {\n\n\t\t\t\t\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\n\n\t\t\t\t\t\tfaceIndicesToRemove.push( i );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\n\n\t\t\t\tvar idx = faceIndicesToRemove[ i ];\n\n\t\t\t\tthis.faces.splice( idx, 1 );\n\n\t\t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\t\tthis.faceVertexUvs[ j ].splice( idx, 1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Use unique set of vertices\n\n\t\t\tvar diff = this.vertices.length - unique.length;\n\t\t\tthis.vertices = unique;\n\t\t\treturn diff;\n\n\t\t},\n\n\t\tsortFacesByMaterialIndex: function () {\n\n\t\t\tvar faces = this.faces;\n\t\t\tvar length = faces.length;\n\n\t\t\t// tag faces\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tfaces[ i ]._id = i;\n\n\t\t\t}\n\n\t\t\t// sort faces\n\n\t\t\tfunction materialIndexSort( a, b ) {\n\n\t\t\t\treturn a.materialIndex - b.materialIndex;\n\n\t\t\t}\n\n\t\t\tfaces.sort( materialIndexSort );\n\n\t\t\t// sort uvs\n\n\t\t\tvar uvs1 = this.faceVertexUvs[ 0 ];\n\t\t\tvar uvs2 = this.faceVertexUvs[ 1 ];\n\n\t\t\tvar newUvs1, newUvs2;\n\n\t\t\tif ( uvs1 && uvs1.length === length ) newUvs1 = [];\n\t\t\tif ( uvs2 && uvs2.length === length ) newUvs2 = [];\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tvar id = faces[ i ]._id;\n\n\t\t\t\tif ( newUvs1 ) newUvs1.push( uvs1[ id ] );\n\t\t\t\tif ( newUvs2 ) newUvs2.push( uvs2[ id ] );\n\n\t\t\t}\n\n\t\t\tif ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;\n\t\t\tif ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Geometry',\n\t\t\t\t\tgenerator: 'Geometry.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard Geometry serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\t\tif ( this.parameters !== undefined ) {\n\n\t\t\t\tvar parameters = this.parameters;\n\n\t\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tvar vertices = [];\n\n\t\t\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\n\n\t\t\t\tvar vertex = this.vertices[ i ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t\tvar faces = [];\n\t\t\tvar normals = [];\n\t\t\tvar normalsHash = {};\n\t\t\tvar colors = [];\n\t\t\tvar colorsHash = {};\n\t\t\tvar uvs = [];\n\t\t\tvar uvsHash = {};\n\n\t\t\tfor ( var i = 0; i < this.faces.length; i ++ ) {\n\n\t\t\t\tvar face = this.faces[ i ];\n\n\t\t\t\tvar hasMaterial = true;\n\t\t\t\tvar hasFaceUv = false; // deprecated\n\t\t\t\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;\n\t\t\t\tvar hasFaceNormal = face.normal.length() > 0;\n\t\t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\n\t\t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n\t\t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\n\n\t\t\t\tvar faceType = 0;\n\n\t\t\t\tfaceType = setBit( faceType, 0, 0 ); // isQuad\n\t\t\t\tfaceType = setBit( faceType, 1, hasMaterial );\n\t\t\t\tfaceType = setBit( faceType, 2, hasFaceUv );\n\t\t\t\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\n\t\t\t\tfaceType = setBit( faceType, 4, hasFaceNormal );\n\t\t\t\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\n\t\t\t\tfaceType = setBit( faceType, 6, hasFaceColor );\n\t\t\t\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\n\n\t\t\t\tfaces.push( faceType );\n\t\t\t\tfaces.push( face.a, face.b, face.c );\n\t\t\t\tfaces.push( face.materialIndex );\n\n\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 0 ] ),\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 1 ] ),\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\tfaces.push( getNormalIndex( face.normal ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 0 ] ),\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 1 ] ),\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\tfaces.push( getColorIndex( face.color ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 0 ] ),\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 1 ] ),\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction setBit( value, position, enabled ) {\n\n\t\t\t\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\n\n\t\t\t}\n\n\t\t\tfunction getNormalIndex( normal ) {\n\n\t\t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n\n\t\t\t\tif ( normalsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn normalsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tnormalsHash[ hash ] = normals.length / 3;\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\treturn normalsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tfunction getColorIndex( color ) {\n\n\t\t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\n\n\t\t\t\tif ( colorsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn colorsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tcolorsHash[ hash ] = colors.length;\n\t\t\t\tcolors.push( color.getHex() );\n\n\t\t\t\treturn colorsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tfunction getUvIndex( uv ) {\n\n\t\t\t\tvar hash = uv.x.toString() + uv.y.toString();\n\n\t\t\t\tif ( uvsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn uvsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tuvsHash[ hash ] = uvs.length / 2;\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\treturn uvsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tdata.data = {};\n\n\t\t\tdata.data.vertices = vertices;\n\t\t\tdata.data.normals = normals;\n\t\t\tif ( colors.length > 0 ) data.data.colors = colors;\n\t\t\tif ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility\n\t\t\tdata.data.faces = faces;\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\t/*\n\t\t\t // Handle primitives\n\n\t\t\t var parameters = this.parameters;\n\n\t\t\t if ( parameters !== undefined ) {\n\n\t\t\t var values = [];\n\n\t\t\t for ( var key in parameters ) {\n\n\t\t\t values.push( parameters[ key ] );\n\n\t\t\t }\n\n\t\t\t var geometry = Object.create( this.constructor.prototype );\n\t\t\t this.constructor.apply( geometry, values );\n\t\t\t return geometry;\n\n\t\t\t }\n\n\t\t\t return new this.constructor().copy( this );\n\t\t\t */\n\n\t\t\treturn new Geometry().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tvar i, il, j, jl, k, kl;\n\n\t\t\t// reset\n\n\t\t\tthis.vertices = [];\n\t\t\tthis.colors = [];\n\t\t\tthis.faces = [];\n\t\t\tthis.faceVertexUvs = [[]];\n\t\t\tthis.morphTargets = [];\n\t\t\tthis.morphNormals = [];\n\t\t\tthis.skinWeights = [];\n\t\t\tthis.skinIndices = [];\n\t\t\tthis.lineDistances = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null;\n\n\t\t\t// name\n\n\t\t\tthis.name = source.name;\n\n\t\t\t// vertices\n\n\t\t\tvar vertices = source.vertices;\n\n\t\t\tfor ( i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\t\tthis.vertices.push( vertices[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// colors\n\n\t\t\tvar colors = source.colors;\n\n\t\t\tfor ( i = 0, il = colors.length; i < il; i ++ ) {\n\n\t\t\t\tthis.colors.push( colors[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// faces\n\n\t\t\tvar faces = source.faces;\n\n\t\t\tfor ( i = 0, il = faces.length; i < il; i ++ ) {\n\n\t\t\t\tthis.faces.push( faces[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// face vertex uvs\n\n\t\t\tfor ( i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {\n\n\t\t\t\tvar faceVertexUvs = source.faceVertexUvs[ i ];\n\n\t\t\t\tif ( this.faceVertexUvs[ i ] === undefined ) {\n\n\t\t\t\t\tthis.faceVertexUvs[ i ] = [];\n\n\t\t\t\t}\n\n\t\t\t\tfor ( j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar uvs = faceVertexUvs[ j ], uvsCopy = [];\n\n\t\t\t\t\tfor ( k = 0, kl = uvs.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\tvar uv = uvs[ k ];\n\n\t\t\t\t\t\tuvsCopy.push( uv.clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// morph targets\n\n\t\t\tvar morphTargets = source.morphTargets;\n\n\t\t\tfor ( i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\t\tvar morphTarget = {};\n\t\t\t\tmorphTarget.name = morphTargets[ i ].name;\n\n\t\t\t\t// vertices\n\n\t\t\t\tif ( morphTargets[ i ].vertices !== undefined ) {\n\n\t\t\t\t\tmorphTarget.vertices = [];\n\n\t\t\t\t\tfor ( j = 0, jl = morphTargets[ i ].vertices.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tmorphTarget.vertices.push( morphTargets[ i ].vertices[ j ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// normals\n\n\t\t\t\tif ( morphTargets[ i ].normals !== undefined ) {\n\n\t\t\t\t\tmorphTarget.normals = [];\n\n\t\t\t\t\tfor ( j = 0, jl = morphTargets[ i ].normals.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tmorphTarget.normals.push( morphTargets[ i ].normals[ j ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.push( morphTarget );\n\n\t\t\t}\n\n\t\t\t// morph normals\n\n\t\t\tvar morphNormals = source.morphNormals;\n\n\t\t\tfor ( i = 0, il = morphNormals.length; i < il; i ++ ) {\n\n\t\t\t\tvar morphNormal = {};\n\n\t\t\t\t// vertex normals\n\n\t\t\t\tif ( morphNormals[ i ].vertexNormals !== undefined ) {\n\n\t\t\t\t\tmorphNormal.vertexNormals = [];\n\n\t\t\t\t\tfor ( j = 0, jl = morphNormals[ i ].vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar srcVertexNormal = morphNormals[ i ].vertexNormals[ j ];\n\t\t\t\t\t\tvar destVertexNormal = {};\n\n\t\t\t\t\t\tdestVertexNormal.a = srcVertexNormal.a.clone();\n\t\t\t\t\t\tdestVertexNormal.b = srcVertexNormal.b.clone();\n\t\t\t\t\t\tdestVertexNormal.c = srcVertexNormal.c.clone();\n\n\t\t\t\t\t\tmorphNormal.vertexNormals.push( destVertexNormal );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// face normals\n\n\t\t\t\tif ( morphNormals[ i ].faceNormals !== undefined ) {\n\n\t\t\t\t\tmorphNormal.faceNormals = [];\n\n\t\t\t\t\tfor ( j = 0, jl = morphNormals[ i ].faceNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tmorphNormal.faceNormals.push( morphNormals[ i ].faceNormals[ j ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphNormals.push( morphNormal );\n\n\t\t\t}\n\n\t\t\t// skin weights\n\n\t\t\tvar skinWeights = source.skinWeights;\n\n\t\t\tfor ( i = 0, il = skinWeights.length; i < il; i ++ ) {\n\n\t\t\t\tthis.skinWeights.push( skinWeights[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// skin indices\n\n\t\t\tvar skinIndices = source.skinIndices;\n\n\t\t\tfor ( i = 0, il = skinIndices.length; i < il; i ++ ) {\n\n\t\t\t\tthis.skinIndices.push( skinIndices[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// line distances\n\n\t\t\tvar lineDistances = source.lineDistances;\n\n\t\t\tfor ( i = 0, il = lineDistances.length; i < il; i ++ ) {\n\n\t\t\t\tthis.lineDistances.push( lineDistances[ i ] );\n\n\t\t\t}\n\n\t\t\t// bounding box\n\n\t\t\tvar boundingBox = source.boundingBox;\n\n\t\t\tif ( boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t\t}\n\n\t\t\t// bounding sphere\n\n\t\t\tvar boundingSphere = source.boundingSphere;\n\n\t\t\tif ( boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\t// update flags\n\n\t\t\tthis.elementsNeedUpdate = source.elementsNeedUpdate;\n\t\t\tthis.verticesNeedUpdate = source.verticesNeedUpdate;\n\t\t\tthis.uvsNeedUpdate = source.uvsNeedUpdate;\n\t\t\tthis.normalsNeedUpdate = source.normalsNeedUpdate;\n\t\t\tthis.colorsNeedUpdate = source.colorsNeedUpdate;\n\t\t\tthis.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;\n\t\t\tthis.groupsNeedUpdate = source.groupsNeedUpdate;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction BufferAttribute( array, itemSize, normalized ) {\n\n\t\tif ( Array.isArray( array ) ) {\n\n\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n\t\t}\n\n\t\tthis.uuid = _Math.generateUUID();\n\t\tthis.name = '';\n\n\t\tthis.array = array;\n\t\tthis.itemSize = itemSize;\n\t\tthis.count = array !== undefined ? array.length / itemSize : 0;\n\t\tthis.normalized = normalized === true;\n\n\t\tthis.dynamic = false;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\n\t\tthis.onUploadCallback = function () {};\n\n\t\tthis.version = 0;\n\n\t}\n\n\tObject.defineProperty( BufferAttribute.prototype, 'needsUpdate', {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) this.version ++;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( BufferAttribute.prototype, {\n\n\t\tisBufferAttribute: true,\n\n\t\tsetArray: function ( array ) {\n\n\t\t\tif ( Array.isArray( array ) ) {\n\n\t\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n\t\t\t}\n\n\t\t\tthis.count = array !== undefined ? array.length / this.itemSize : 0;\n\t\t\tthis.array = array;\n\n\t\t},\n\n\t\tsetDynamic: function ( value ) {\n\n\t\t\tthis.dynamic = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.array = new source.array.constructor( source.array );\n\t\t\tthis.itemSize = source.itemSize;\n\t\t\tthis.count = source.count;\n\t\t\tthis.normalized = source.normalized;\n\n\t\t\tthis.dynamic = source.dynamic;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\t\tindex1 *= this.itemSize;\n\t\t\tindex2 *= attribute.itemSize;\n\n\t\t\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\n\n\t\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyArray: function ( array ) {\n\n\t\t\tthis.array.set( array );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyColorsArray: function ( colors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = colors.length; i < l; i ++ ) {\n\n\t\t\t\tvar color = colors[ i ];\n\n\t\t\t\tif ( color === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\n\t\t\t\t\tcolor = new Color();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = color.r;\n\t\t\t\tarray[ offset ++ ] = color.g;\n\t\t\t\tarray[ offset ++ ] = color.b;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyIndicesArray: function ( indices ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\n\t\t\t\tvar index = indices[ i ];\n\n\t\t\t\tarray[ offset ++ ] = index.a;\n\t\t\t\tarray[ offset ++ ] = index.b;\n\t\t\t\tarray[ offset ++ ] = index.c;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector2sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new Vector2();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector3sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new Vector3();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\t\tarray[ offset ++ ] = vector.z;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector4sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new Vector4();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\t\tarray[ offset ++ ] = vector.z;\n\t\t\t\tarray[ offset ++ ] = vector.w;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tset: function ( value, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tthis.array.set( value, offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetX: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize ];\n\n\t\t},\n\n\t\tsetX: function ( index, x ) {\n\n\t\t\tthis.array[ index * this.itemSize ] = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetY: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 1 ];\n\n\t\t},\n\n\t\tsetY: function ( index, y ) {\n\n\t\t\tthis.array[ index * this.itemSize + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetZ: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 2 ];\n\n\t\t},\n\n\t\tsetZ: function ( index, z ) {\n\n\t\t\tthis.array[ index * this.itemSize + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetW: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 3 ];\n\n\t\t},\n\n\t\tsetW: function ( index, w ) {\n\n\t\t\tthis.array[ index * this.itemSize + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXY: function ( index, x, y ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZ: function ( index, x, y, z ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\t\t\tthis.array[ index + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\t\t\tthis.array[ index + 2 ] = z;\n\t\t\tthis.array[ index + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tonUpload: function ( callback ) {\n\n\t\t\tthis.onUploadCallback = callback;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.array, this.itemSize ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tfunction Int8BufferAttribute( array, itemSize ) {\n\n\t\tBufferAttribute.call( this, new Int8Array( array ), itemSize );\n\n\t}\n\n\tInt8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tInt8BufferAttribute.prototype.constructor = Int8BufferAttribute;\n\n\n\tfunction Uint8BufferAttribute( array, itemSize ) {\n\n\t\tBufferAttribute.call( this, new Uint8Array( array ), itemSize );\n\n\t}\n\n\tUint8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;\n\n\n\tfunction Uint8ClampedBufferAttribute( array, itemSize ) {\n\n\t\tBufferAttribute.call( this, new Uint8ClampedArray( array ), itemSize );\n\n\t}\n\n\tUint8ClampedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;\n\n\n\tfunction Int16BufferAttribute( array, itemSize ) {\n\n\t\tBufferAttribute.call( this, new Int16Array( array ), itemSize );\n\n\t}\n\n\tInt16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tInt16BufferAttribute.prototype.constructor = Int16BufferAttribute;\n\n\n\tfunction Uint16BufferAttribute( array, itemSize ) {\n\n\t\tBufferAttribute.call( this, new Uint16Array( array ), itemSize );\n\n\t}\n\n\tUint16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;\n\n\n\tfunction Int32BufferAttribute( array, itemSize ) {\n\n\t\tBufferAttribute.call( this, new Int32Array( array ), itemSize );\n\n\t}\n\n\tInt32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tInt32BufferAttribute.prototype.constructor = Int32BufferAttribute;\n\n\n\tfunction Uint32BufferAttribute( array, itemSize ) {\n\n\t\tBufferAttribute.call( this, new Uint32Array( array ), itemSize );\n\n\t}\n\n\tUint32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;\n\n\n\tfunction Float32BufferAttribute( array, itemSize ) {\n\n\t\tBufferAttribute.call( this, new Float32Array( array ), itemSize );\n\n\t}\n\n\tFloat32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tFloat32BufferAttribute.prototype.constructor = Float32BufferAttribute;\n\n\n\tfunction Float64BufferAttribute( array, itemSize ) {\n\n\t\tBufferAttribute.call( this, new Float64Array( array ), itemSize );\n\n\t}\n\n\tFloat64BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tFloat64BufferAttribute.prototype.constructor = Float64BufferAttribute;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction DirectGeometry() {\n\n\t\tthis.indices = [];\n\t\tthis.vertices = [];\n\t\tthis.normals = [];\n\t\tthis.colors = [];\n\t\tthis.uvs = [];\n\t\tthis.uvs2 = [];\n\n\t\tthis.groups = [];\n\n\t\tthis.morphTargets = {};\n\n\t\tthis.skinWeights = [];\n\t\tthis.skinIndices = [];\n\n\t\t// this.lineDistances = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// update flags\n\n\t\tthis.verticesNeedUpdate = false;\n\t\tthis.normalsNeedUpdate = false;\n\t\tthis.colorsNeedUpdate = false;\n\t\tthis.uvsNeedUpdate = false;\n\t\tthis.groupsNeedUpdate = false;\n\n\t}\n\n\tObject.assign( DirectGeometry.prototype, {\n\n\t\tcomputeGroups: function ( geometry ) {\n\n\t\t\tvar group;\n\t\t\tvar groups = [];\n\t\t\tvar materialIndex = undefined;\n\n\t\t\tvar faces = geometry.faces;\n\n\t\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\t// materials\n\n\t\t\t\tif ( face.materialIndex !== materialIndex ) {\n\n\t\t\t\t\tmaterialIndex = face.materialIndex;\n\n\t\t\t\t\tif ( group !== undefined ) {\n\n\t\t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\t\t\t\tgroups.push( group );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgroup = {\n\t\t\t\t\t\tstart: i * 3,\n\t\t\t\t\t\tmaterialIndex: materialIndex\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( group !== undefined ) {\n\n\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\t\tgroups.push( group );\n\n\t\t\t}\n\n\t\t\tthis.groups = groups;\n\n\t\t},\n\n\t\tfromGeometry: function ( geometry ) {\n\n\t\t\tvar faces = geometry.faces;\n\t\t\tvar vertices = geometry.vertices;\n\t\t\tvar faceVertexUvs = geometry.faceVertexUvs;\n\n\t\t\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\n\t\t\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\n\n\t\t\t// morphs\n\n\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\tvar morphTargetsLength = morphTargets.length;\n\n\t\t\tvar morphTargetsPosition;\n\n\t\t\tif ( morphTargetsLength > 0 ) {\n\n\t\t\t\tmorphTargetsPosition = [];\n\n\t\t\t\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\n\n\t\t\t\t\tmorphTargetsPosition[ i ] = [];\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.position = morphTargetsPosition;\n\n\t\t\t}\n\n\t\t\tvar morphNormals = geometry.morphNormals;\n\t\t\tvar morphNormalsLength = morphNormals.length;\n\n\t\t\tvar morphTargetsNormal;\n\n\t\t\tif ( morphNormalsLength > 0 ) {\n\n\t\t\t\tmorphTargetsNormal = [];\n\n\t\t\t\tfor ( var i = 0; i < morphNormalsLength; i ++ ) {\n\n\t\t\t\t\tmorphTargetsNormal[ i ] = [];\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.normal = morphTargetsNormal;\n\n\t\t\t}\n\n\t\t\t// skins\n\n\t\t\tvar skinIndices = geometry.skinIndices;\n\t\t\tvar skinWeights = geometry.skinWeights;\n\n\t\t\tvar hasSkinIndices = skinIndices.length === vertices.length;\n\t\t\tvar hasSkinWeights = skinWeights.length === vertices.length;\n\n\t\t\t//\n\n\t\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\t\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar normal = face.normal;\n\n\t\t\t\t\tthis.normals.push( normal, normal, normal );\n\n\t\t\t\t}\n\n\t\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\t\tif ( vertexColors.length === 3 ) {\n\n\t\t\t\t\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar color = face.color;\n\n\t\t\t\t\tthis.colors.push( color, color, color );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexUv === true ) {\n\n\t\t\t\t\tvar vertexUvs = faceVertexUvs[ 0 ][ i ];\n\n\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\t\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );\n\n\t\t\t\t\t\tthis.uvs.push( new Vector2(), new Vector2(), new Vector2() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexUv2 === true ) {\n\n\t\t\t\t\tvar vertexUvs = faceVertexUvs[ 1 ][ i ];\n\n\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\t\tthis.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );\n\n\t\t\t\t\t\tthis.uvs2.push( new Vector2(), new Vector2(), new Vector2() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// morphs\n\n\t\t\t\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\n\n\t\t\t\t\tvar morphTarget = morphTargets[ j ].vertices;\n\n\t\t\t\t\tmorphTargetsPosition[ j ].push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0; j < morphNormalsLength; j ++ ) {\n\n\t\t\t\t\tvar morphNormal = morphNormals[ j ].vertexNormals[ i ];\n\n\t\t\t\t\tmorphTargetsNormal[ j ].push( morphNormal.a, morphNormal.b, morphNormal.c );\n\n\t\t\t\t}\n\n\t\t\t\t// skins\n\n\t\t\t\tif ( hasSkinIndices ) {\n\n\t\t\t\t\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasSkinWeights ) {\n\n\t\t\t\t\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.computeGroups( geometry );\n\n\t\t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tfunction arrayMax( array ) {\n\n\t\tif ( array.length === 0 ) return - Infinity;\n\n\t\tvar max = array[ 0 ];\n\n\t\tfor ( var i = 1, l = array.length; i < l; ++ i ) {\n\n\t\t\tif ( array[ i ] > max ) max = array[ i ];\n\n\t\t}\n\n\t\treturn max;\n\n\t}\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction BufferGeometry() {\n\n\t\tObject.defineProperty( this, 'id', { value: GeometryIdCount() } );\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'BufferGeometry';\n\n\t\tthis.index = null;\n\t\tthis.attributes = {};\n\n\t\tthis.morphAttributes = {};\n\n\t\tthis.groups = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\tthis.drawRange = { start: 0, count: Infinity };\n\n\t}\n\n\tBufferGeometry.MaxIndex = 65535;\n\n\tObject.assign( BufferGeometry.prototype, EventDispatcher.prototype, {\n\n\t\tisBufferGeometry: true,\n\n\t\tgetIndex: function () {\n\n\t\t\treturn this.index;\n\n\t\t},\n\n\t\tsetIndex: function ( index ) {\n\n\t\t\tif ( Array.isArray( index ) ) {\n\n\t\t\t\tthis.index = new ( arrayMax( index ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );\n\n\t\t\t} else {\n\n\t\t\t\tthis.index = index;\n\n\t\t\t}\n\n\t\t},\n\n\t\taddAttribute: function ( name, attribute ) {\n\n\t\t\tif ( ! ( attribute && attribute.isBufferAttribute ) && ! ( attribute && attribute.isInterleavedBufferAttribute ) ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\n\n\t\t\t\tthis.addAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( name === 'index' ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\n\t\t\t\tthis.setIndex( attribute );\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.attributes[ name ] = attribute;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetAttribute: function ( name ) {\n\n\t\t\treturn this.attributes[ name ];\n\n\t\t},\n\n\t\tremoveAttribute: function ( name ) {\n\n\t\t\tdelete this.attributes[ name ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddGroup: function ( start, count, materialIndex ) {\n\n\t\t\tthis.groups.push( {\n\n\t\t\t\tstart: start,\n\t\t\t\tcount: count,\n\t\t\t\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\n\n\t\t\t} );\n\n\t\t},\n\n\t\tclearGroups: function () {\n\n\t\t\tthis.groups = [];\n\n\t\t},\n\n\t\tsetDrawRange: function ( start, count ) {\n\n\t\t\tthis.drawRange.start = start;\n\t\t\tthis.drawRange.count = count;\n\n\t\t},\n\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tvar position = this.attributes.position;\n\n\t\t\tif ( position !== undefined ) {\n\n\t\t\t\tmatrix.applyToBufferAttribute( position );\n\t\t\t\tposition.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tvar normal = this.attributes.normal;\n\n\t\t\tif ( normal !== undefined ) {\n\n\t\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\t\tnormalMatrix.applyToBufferAttribute( normal );\n\t\t\t\tnormal.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tif ( this.boundingBox !== null ) {\n\n\t\t\t\tthis.computeBoundingBox();\n\n\t\t\t}\n\n\t\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\t\tthis.computeBoundingSphere();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateX: function () {\n\n\t\t\t// rotate geometry around world x-axis\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function rotateX( angle ) {\n\n\t\t\t\tm1.makeRotationX( angle );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateY: function () {\n\n\t\t\t// rotate geometry around world y-axis\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function rotateY( angle ) {\n\n\t\t\t\tm1.makeRotationY( angle );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateZ: function () {\n\n\t\t\t// rotate geometry around world z-axis\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function rotateZ( angle ) {\n\n\t\t\t\tm1.makeRotationZ( angle );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslate: function () {\n\n\t\t\t// translate geometry\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function translate( x, y, z ) {\n\n\t\t\t\tm1.makeTranslation( x, y, z );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tscale: function () {\n\n\t\t\t// scale geometry\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function scale( x, y, z ) {\n\n\t\t\t\tm1.makeScale( x, y, z );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tlookAt: function () {\n\n\t\t\tvar obj = new Object3D();\n\n\t\t\treturn function lookAt( vector ) {\n\n\t\t\t\tobj.lookAt( vector );\n\n\t\t\t\tobj.updateMatrix();\n\n\t\t\t\tthis.applyMatrix( obj.matrix );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tcenter: function () {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t\tvar offset = this.boundingBox.getCenter().negate();\n\n\t\t\tthis.translate( offset.x, offset.y, offset.z );\n\n\t\t\treturn offset;\n\n\t\t},\n\n\t\tsetFromObject: function ( object ) {\n\n\t\t\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( object.isPoints || object.isLine ) {\n\n\t\t\t\tvar positions = new Float32BufferAttribute( geometry.vertices.length * 3, 3 );\n\t\t\t\tvar colors = new Float32BufferAttribute( geometry.colors.length * 3, 3 );\n\n\t\t\t\tthis.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\n\t\t\t\tthis.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\n\n\t\t\t\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\n\n\t\t\t\t\tvar lineDistances = new Float32BufferAttribute( geometry.lineDistances.length, 1 );\n\n\t\t\t\t\tthis.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isMesh ) {\n\n\t\t\t\tif ( geometry && geometry.isGeometry ) {\n\n\t\t\t\t\tthis.fromGeometry( geometry );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateFromObject: function ( object ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( object.isMesh ) {\n\n\t\t\t\tvar direct = geometry.__directGeometry;\n\n\t\t\t\tif ( geometry.elementsNeedUpdate === true ) {\n\n\t\t\t\t\tdirect = undefined;\n\t\t\t\t\tgeometry.elementsNeedUpdate = false;\n\n\t\t\t\t}\n\n\t\t\t\tif ( direct === undefined ) {\n\n\t\t\t\t\treturn this.fromGeometry( geometry );\n\n\t\t\t\t}\n\n\t\t\t\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\t\t\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\t\t\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\t\t\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\t\t\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\t\t\tgeometry.verticesNeedUpdate = false;\n\t\t\t\tgeometry.normalsNeedUpdate = false;\n\t\t\t\tgeometry.colorsNeedUpdate = false;\n\t\t\t\tgeometry.uvsNeedUpdate = false;\n\t\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t\t\tgeometry = direct;\n\n\t\t\t}\n\n\t\t\tvar attribute;\n\n\t\t\tif ( geometry.verticesNeedUpdate === true ) {\n\n\t\t\t\tattribute = this.attributes.position;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyVector3sArray( geometry.vertices );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.verticesNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.normalsNeedUpdate === true ) {\n\n\t\t\t\tattribute = this.attributes.normal;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyVector3sArray( geometry.normals );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.normalsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.colorsNeedUpdate === true ) {\n\n\t\t\t\tattribute = this.attributes.color;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyColorsArray( geometry.colors );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.colorsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvsNeedUpdate ) {\n\n\t\t\t\tattribute = this.attributes.uv;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyVector2sArray( geometry.uvs );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.uvsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.lineDistancesNeedUpdate ) {\n\n\t\t\t\tattribute = this.attributes.lineDistance;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyArray( geometry.lineDistances );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.lineDistancesNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.groupsNeedUpdate ) {\n\n\t\t\t\tgeometry.computeGroups( object.geometry );\n\t\t\t\tthis.groups = geometry.groups;\n\n\t\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tfromGeometry: function ( geometry ) {\n\n\t\t\tgeometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );\n\n\t\t\treturn this.fromDirectGeometry( geometry.__directGeometry );\n\n\t\t},\n\n\t\tfromDirectGeometry: function ( geometry ) {\n\n\t\t\tvar positions = new Float32Array( geometry.vertices.length * 3 );\n\t\t\tthis.addAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\n\n\t\t\tif ( geometry.normals.length > 0 ) {\n\n\t\t\t\tvar normals = new Float32Array( geometry.normals.length * 3 );\n\t\t\t\tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.colors.length > 0 ) {\n\n\t\t\t\tvar colors = new Float32Array( geometry.colors.length * 3 );\n\t\t\t\tthis.addAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvs.length > 0 ) {\n\n\t\t\t\tvar uvs = new Float32Array( geometry.uvs.length * 2 );\n\t\t\t\tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvs2.length > 0 ) {\n\n\t\t\t\tvar uvs2 = new Float32Array( geometry.uvs2.length * 2 );\n\t\t\t\tthis.addAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.indices.length > 0 ) {\n\n\t\t\t\tvar TypeArray = arrayMax( geometry.indices ) > 65535 ? Uint32Array : Uint16Array;\n\t\t\t\tvar indices = new TypeArray( geometry.indices.length * 3 );\n\t\t\t\tthis.setIndex( new BufferAttribute( indices, 1 ).copyIndicesArray( geometry.indices ) );\n\n\t\t\t}\n\n\t\t\t// groups\n\n\t\t\tthis.groups = geometry.groups;\n\n\t\t\t// morphs\n\n\t\t\tfor ( var name in geometry.morphTargets ) {\n\n\t\t\t\tvar array = [];\n\t\t\t\tvar morphTargets = geometry.morphTargets[ name ];\n\n\t\t\t\tfor ( var i = 0, l = morphTargets.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar morphTarget = morphTargets[ i ];\n\n\t\t\t\t\tvar attribute = new Float32BufferAttribute( morphTarget.length * 3, 3 );\n\n\t\t\t\t\tarray.push( attribute.copyVector3sArray( morphTarget ) );\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t\t}\n\n\t\t\t// skinning\n\n\t\t\tif ( geometry.skinIndices.length > 0 ) {\n\n\t\t\t\tvar skinIndices = new Float32BufferAttribute( geometry.skinIndices.length * 4, 4 );\n\t\t\t\tthis.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.skinWeights.length > 0 ) {\n\n\t\t\t\tvar skinWeights = new Float32BufferAttribute( geometry.skinWeights.length * 4, 4 );\n\t\t\t\tthis.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcomputeBoundingBox: function () {\n\n\t\t\tif ( this.boundingBox === null ) {\n\n\t\t\t\tthis.boundingBox = new Box3();\n\n\t\t\t}\n\n\t\t\tvar position = this.attributes.position;\n\n\t\t\tif ( position !== undefined ) {\n\n\t\t\t\tthis.boundingBox.setFromBufferAttribute( position );\n\n\t\t\t} else {\n\n\t\t\t\tthis.boundingBox.makeEmpty();\n\n\t\t\t}\n\n\t\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeBoundingSphere: function () {\n\n\t\t\tvar box = new Box3();\n\t\t\tvar vector = new Vector3();\n\n\t\t\treturn function computeBoundingSphere() {\n\n\t\t\t\tif ( this.boundingSphere === null ) {\n\n\t\t\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t\t\t}\n\n\t\t\t\tvar position = this.attributes.position;\n\n\t\t\t\tif ( position ) {\n\n\t\t\t\t\tvar center = this.boundingSphere.center;\n\n\t\t\t\t\tbox.setFromBufferAttribute( position );\n\t\t\t\t\tbox.getCenter( center );\n\n\t\t\t\t\t// hoping to find a boundingSphere with a radius smaller than the\n\t\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\t\t\t\t\tvar maxRadiusSq = 0;\n\n\t\t\t\t\tfor ( var i = 0, il = position.count; i < il; i ++ ) {\n\n\t\t\t\t\t\tvector.x = position.getX( i );\n\t\t\t\t\t\tvector.y = position.getY( i );\n\t\t\t\t\t\tvector.z = position.getZ( i );\n\t\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tcomputeFaceNormals: function () {\n\n\t\t\t// backwards compatibility\n\n\t\t},\n\n\t\tcomputeVertexNormals: function () {\n\n\t\t\tvar index = this.index;\n\t\t\tvar attributes = this.attributes;\n\t\t\tvar groups = this.groups;\n\n\t\t\tif ( attributes.position ) {\n\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( attributes.normal === undefined ) {\n\n\t\t\t\t\tthis.addAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// reset existing normals to zero\n\n\t\t\t\t\tvar array = attributes.normal.array;\n\n\t\t\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tarray[ i ] = 0;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar normals = attributes.normal.array;\n\n\t\t\t\tvar vA, vB, vC;\n\t\t\t\tvar pA = new Vector3(), pB = new Vector3(), pC = new Vector3();\n\t\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\t\t// indexed elements\n\n\t\t\t\tif ( index ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tif ( groups.length === 0 ) {\n\n\t\t\t\t\t\tthis.addGroup( 0, indices.length );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var j = 0, jl = groups.length; j < jl; ++ j ) {\n\n\t\t\t\t\t\tvar group = groups[ j ];\n\n\t\t\t\t\t\tvar start = group.start;\n\t\t\t\t\t\tvar count = group.count;\n\n\t\t\t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\n\n\t\t\t\t\t\t\tvA = indices[ i + 0 ] * 3;\n\t\t\t\t\t\t\tvB = indices[ i + 1 ] * 3;\n\t\t\t\t\t\t\tvC = indices[ i + 2 ] * 3;\n\n\t\t\t\t\t\t\tpA.fromArray( positions, vA );\n\t\t\t\t\t\t\tpB.fromArray( positions, vB );\n\t\t\t\t\t\t\tpC.fromArray( positions, vC );\n\n\t\t\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\t\t\tnormals[ vA ] += cb.x;\n\t\t\t\t\t\t\tnormals[ vA + 1 ] += cb.y;\n\t\t\t\t\t\t\tnormals[ vA + 2 ] += cb.z;\n\n\t\t\t\t\t\t\tnormals[ vB ] += cb.x;\n\t\t\t\t\t\t\tnormals[ vB + 1 ] += cb.y;\n\t\t\t\t\t\t\tnormals[ vB + 2 ] += cb.z;\n\n\t\t\t\t\t\t\tnormals[ vC ] += cb.x;\n\t\t\t\t\t\t\tnormals[ vC + 1 ] += cb.y;\n\t\t\t\t\t\t\tnormals[ vC + 2 ] += cb.z;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\n\t\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 9 ) {\n\n\t\t\t\t\t\tpA.fromArray( positions, i );\n\t\t\t\t\t\tpB.fromArray( positions, i + 3 );\n\t\t\t\t\t\tpC.fromArray( positions, i + 6 );\n\n\t\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\t\tnormals[ i ] = cb.x;\n\t\t\t\t\t\tnormals[ i + 1 ] = cb.y;\n\t\t\t\t\t\tnormals[ i + 2 ] = cb.z;\n\n\t\t\t\t\t\tnormals[ i + 3 ] = cb.x;\n\t\t\t\t\t\tnormals[ i + 4 ] = cb.y;\n\t\t\t\t\t\tnormals[ i + 5 ] = cb.z;\n\n\t\t\t\t\t\tnormals[ i + 6 ] = cb.x;\n\t\t\t\t\t\tnormals[ i + 7 ] = cb.y;\n\t\t\t\t\t\tnormals[ i + 8 ] = cb.z;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.normalizeNormals();\n\n\t\t\t\tattributes.normal.needsUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tmerge: function ( geometry, offset ) {\n\n\t\t\tif ( ! ( geometry && geometry.isBufferGeometry ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tif ( geometry.attributes[ key ] === undefined ) continue;\n\n\t\t\t\tvar attribute1 = attributes[ key ];\n\t\t\t\tvar attributeArray1 = attribute1.array;\n\n\t\t\t\tvar attribute2 = geometry.attributes[ key ];\n\t\t\t\tvar attributeArray2 = attribute2.array;\n\n\t\t\t\tvar attributeSize = attribute2.itemSize;\n\n\t\t\t\tfor ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {\n\n\t\t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnormalizeNormals: function () {\n\n\t\t\tvar normals = this.attributes.normal;\n\n\t\t\tvar x, y, z, n;\n\n\t\t\tfor ( var i = 0, il = normals.count; i < il; i ++ ) {\n\n\t\t\t\tx = normals.getX( i );\n\t\t\t\ty = normals.getY( i );\n\t\t\t\tz = normals.getZ( i );\n\n\t\t\t\tn = 1.0 / Math.sqrt( x * x + y * y + z * z );\n\n\t\t\t\tnormals.setXYZ( i, x * n, y * n, z * n );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoNonIndexed: function () {\n\n\t\t\tif ( this.index === null ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar geometry2 = new BufferGeometry();\n\n\t\t\tvar indices = this.index.array;\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor ( var name in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ name ];\n\n\t\t\t\tvar array = attribute.array;\n\t\t\t\tvar itemSize = attribute.itemSize;\n\n\t\t\t\tvar array2 = new array.constructor( indices.length * itemSize );\n\n\t\t\t\tvar index = 0, index2 = 0;\n\n\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\n\t\t\t\t\tindex = indices[ i ] * itemSize;\n\n\t\t\t\t\tfor ( var j = 0; j < itemSize; j ++ ) {\n\n\t\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tgeometry2.addAttribute( name, new BufferAttribute( array2, itemSize ) );\n\n\t\t\t}\n\n\t\t\treturn geometry2;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard BufferGeometry serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\t\tif ( this.parameters !== undefined ) {\n\n\t\t\t\tvar parameters = this.parameters;\n\n\t\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tdata.data = { attributes: {} };\n\n\t\t\tvar index = this.index;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tvar array = Array.prototype.slice.call( index.array );\n\n\t\t\t\tdata.data.index = {\n\t\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\t\tarray: array\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ key ];\n\n\t\t\t\tvar array = Array.prototype.slice.call( attribute.array );\n\n\t\t\t\tdata.data.attributes[ key ] = {\n\t\t\t\t\titemSize: attribute.itemSize,\n\t\t\t\t\ttype: attribute.array.constructor.name,\n\t\t\t\t\tarray: array,\n\t\t\t\t\tnormalized: attribute.normalized\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar groups = this.groups;\n\n\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\n\n\t\t\t}\n\n\t\t\tvar boundingSphere = this.boundingSphere;\n\n\t\t\tif ( boundingSphere !== null ) {\n\n\t\t\t\tdata.data.boundingSphere = {\n\t\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\t\tradius: boundingSphere.radius\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\t/*\n\t\t\t // Handle primitives\n\n\t\t\t var parameters = this.parameters;\n\n\t\t\t if ( parameters !== undefined ) {\n\n\t\t\t var values = [];\n\n\t\t\t for ( var key in parameters ) {\n\n\t\t\t values.push( parameters[ key ] );\n\n\t\t\t }\n\n\t\t\t var geometry = Object.create( this.constructor.prototype );\n\t\t\t this.constructor.apply( geometry, values );\n\t\t\t return geometry;\n\n\t\t\t }\n\n\t\t\t return new this.constructor().copy( this );\n\t\t\t */\n\n\t\t\treturn new BufferGeometry().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tvar name, i, l;\n\n\t\t\t// reset\n\n\t\t\tthis.index = null;\n\t\t\tthis.attributes = {};\n\t\t\tthis.morphAttributes = {};\n\t\t\tthis.groups = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null;\n\n\t\t\t// name\n\n\t\t\tthis.name = source.name;\n\n\t\t\t// index\n\n\t\t\tvar index = source.index;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tthis.setIndex( index.clone() );\n\n\t\t\t}\n\n\t\t\t// attributes\n\n\t\t\tvar attributes = source.attributes;\n\n\t\t\tfor ( name in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ name ];\n\t\t\t\tthis.addAttribute( name, attribute.clone() );\n\n\t\t\t}\n\n\t\t\t// morph attributes\n\n\t\t\tvar morphAttributes = source.morphAttributes;\n\n\t\t\tfor ( name in morphAttributes ) {\n\n\t\t\t\tvar array = [];\n\t\t\t\tvar morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor ( i = 0, l = morphAttribute.length; i < l; i ++ ) {\n\n\t\t\t\t\tarray.push( morphAttribute[ i ].clone() );\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t\t}\n\n\t\t\t// groups\n\n\t\t\tvar groups = source.groups;\n\n\t\t\tfor ( i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\tvar group = groups[ i ];\n\t\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t}\n\n\t\t\t// bounding box\n\n\t\t\tvar boundingBox = source.boundingBox;\n\n\t\t\tif ( boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t\t}\n\n\t\t\t// bounding sphere\n\n\t\t\tvar boundingSphere = source.boundingSphere;\n\n\t\t\tif ( boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\t// draw range\n\n\t\t\tthis.drawRange.start = source.drawRange.start;\n\t\t\tthis.drawRange.count = source.drawRange.count;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// BoxGeometry\n\n\tfunction BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'BoxGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\tdepth: depth,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tdepthSegments: depthSegments\n\t\t};\n\n\t\tthis.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tBoxGeometry.prototype = Object.create( Geometry.prototype );\n\tBoxGeometry.prototype.constructor = BoxGeometry;\n\n\t// BoxBufferGeometry\n\n\tfunction BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'BoxBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\tdepth: depth,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tdepthSegments: depthSegments\n\t\t};\n\n\t\tvar scope = this;\n\n\t\t// segments\n\n\t\twidthSegments = Math.floor( widthSegments ) || 1;\n\t\theightSegments = Math.floor( heightSegments ) || 1;\n\t\tdepthSegments = Math.floor( depthSegments ) || 1;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar numberOfVertices = 0;\n\t\tvar groupStart = 0;\n\n\t\t// build each side of the box geometry\n\n\t\tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height,   width,  depthSegments, heightSegments, 0 ); // px\n\t\tbuildPlane( 'z', 'y', 'x',   1, - 1, depth, height, - width,  depthSegments, heightSegments, 1 ); // nx\n\t\tbuildPlane( 'x', 'z', 'y',   1,   1, width, depth,    height, widthSegments, depthSegments,  2 ); // py\n\t\tbuildPlane( 'x', 'z', 'y',   1, - 1, width, depth,  - height, widthSegments, depthSegments,  3 ); // ny\n\t\tbuildPlane( 'x', 'y', 'z',   1, - 1, width, height,   depth,  widthSegments, heightSegments, 4 ); // pz\n\t\tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth,  widthSegments, heightSegments, 5 ); // nz\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\tfunction buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\n\n\t\t\tvar segmentWidth = width / gridX;\n\t\t\tvar segmentHeight = height / gridY;\n\n\t\t\tvar widthHalf = width / 2;\n\t\t\tvar heightHalf = height / 2;\n\t\t\tvar depthHalf = depth / 2;\n\n\t\t\tvar gridX1 = gridX + 1;\n\t\t\tvar gridY1 = gridY + 1;\n\n\t\t\tvar vertexCounter = 0;\n\t\t\tvar groupCount = 0;\n\n\t\t\tvar ix, iy;\n\n\t\t\tvar vector = new Vector3();\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\t\tvar y = iy * segmentHeight - heightHalf;\n\n\t\t\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\t\tvar x = ix * segmentWidth - widthHalf;\n\n\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\tvector[ u ] = x * udir;\n\t\t\t\t\tvector[ v ] = y * vdir;\n\t\t\t\t\tvector[ w ] = depthHalf;\n\n\t\t\t\t\t// now apply vector to vertex buffer\n\n\t\t\t\t\tvertices.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\tvector[ u ] = 0;\n\t\t\t\t\tvector[ v ] = 0;\n\t\t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\n\n\t\t\t\t\t// now apply vector to normal buffer\n\n\t\t\t\t\tnormals.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t// uvs\n\n\t\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t\t\t// counters\n\n\t\t\t\t\tvertexCounter += 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// indices\n\n\t\t\t// 1. you need three indices to draw a single face\n\t\t\t// 2. a single segment consists of two faces\n\t\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\t\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\t\tvar a = numberOfVertices + ix + gridX1 * iy;\n\t\t\t\t\tvar b = numberOfVertices + ix + gridX1 * ( iy + 1 );\n\t\t\t\t\tvar c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\t\tvar d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t// increase counter\n\n\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, materialIndex );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t\t// update total number of vertices\n\n\t\t\tnumberOfVertices += vertexCounter;\n\n\t\t}\n\n\t}\n\n\tBoxBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tBoxBufferGeometry.prototype.constructor = BoxBufferGeometry;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// PlaneGeometry\n\n\tfunction PlaneGeometry( width, height, widthSegments, heightSegments ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'PlaneGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments\n\t\t};\n\n\t\tthis.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tPlaneGeometry.prototype = Object.create( Geometry.prototype );\n\tPlaneGeometry.prototype.constructor = PlaneGeometry;\n\n\t// PlaneBufferGeometry\n\n\tfunction PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'PlaneBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments\n\t\t};\n\n\t\tvar width_half = width / 2;\n\t\tvar height_half = height / 2;\n\n\t\tvar gridX = Math.floor( widthSegments ) || 1;\n\t\tvar gridY = Math.floor( heightSegments ) || 1;\n\n\t\tvar gridX1 = gridX + 1;\n\t\tvar gridY1 = gridY + 1;\n\n\t\tvar segment_width = width / gridX;\n\t\tvar segment_height = height / gridY;\n\n\t\tvar ix, iy;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\tvar y = iy * segment_height - height_half;\n\n\t\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\tvar x = ix * segment_width - width_half;\n\n\t\t\t\tvertices.push( x, - y, 0 );\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\tvar a = ix + gridX1 * iy;\n\t\t\t\tvar b = ix + gridX1 * ( iy + 1 );\n\t\t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tPlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tPlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.Multiply,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  shading: THREE.SmoothShading,\n\t *  depthTest: <bool>,\n\t *  depthWrite: <bool>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>\n\t * }\n\t */\n\n\tfunction MeshBasicMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // emissive\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\n\t\tthis.lights = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshBasicMaterial.prototype = Object.create( Material.prototype );\n\tMeshBasicMaterial.prototype.constructor = MeshBasicMaterial;\n\n\tMeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\n\tMeshBasicMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Ray( origin, direction ) {\n\n\t\tthis.origin = ( origin !== undefined ) ? origin : new Vector3();\n\t\tthis.direction = ( direction !== undefined ) ? direction : new Vector3();\n\n\t}\n\n\tObject.assign( Ray.prototype, {\n\n\t\tset: function ( origin, direction ) {\n\n\t\t\tthis.origin.copy( origin );\n\t\t\tthis.direction.copy( direction );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( ray ) {\n\n\t\t\tthis.origin.copy( ray.origin );\n\t\t\tthis.direction.copy( ray.direction );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tat: function ( t, optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\treturn result.copy( this.direction ).multiplyScalar( t ).add( this.origin );\n\n\t\t},\n\n\t\tlookAt: function ( v ) {\n\n\t\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trecast: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function recast( t ) {\n\n\t\t\t\tthis.origin.copy( this.at( t, v1 ) );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclosestPointToPoint: function ( point, optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\t\t\tresult.subVectors( point, this.origin );\n\t\t\tvar directionDistance = result.dot( this.direction );\n\n\t\t\tif ( directionDistance < 0 ) {\n\n\t\t\t\treturn result.copy( this.origin );\n\n\t\t\t}\n\n\t\t\treturn result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\n\t\t},\n\n\t\tdistanceSqToPoint: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function distanceSqToPoint( point ) {\n\n\t\t\t\tvar directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );\n\n\t\t\t\t// point behind the ray\n\n\t\t\t\tif ( directionDistance < 0 ) {\n\n\t\t\t\t\treturn this.origin.distanceToSquared( point );\n\n\t\t\t\t}\n\n\t\t\t\tv1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t\t\t\treturn v1.distanceToSquared( point );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tdistanceSqToSegment: function () {\n\n\t\t\tvar segCenter = new Vector3();\n\t\t\tvar segDir = new Vector3();\n\t\t\tvar diff = new Vector3();\n\n\t\t\treturn function distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\n\t\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t\t\t// It returns the min distance between the ray and the segment\n\t\t\t\t// defined by v0 and v1\n\t\t\t\t// It can also set two optional targets :\n\t\t\t\t// - The closest point on the ray\n\t\t\t\t// - The closest point on the segment\n\n\t\t\t\tsegCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n\t\t\t\tsegDir.copy( v1 ).sub( v0 ).normalize();\n\t\t\t\tdiff.copy( this.origin ).sub( segCenter );\n\n\t\t\t\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\n\t\t\t\tvar a01 = - this.direction.dot( segDir );\n\t\t\t\tvar b0 = diff.dot( this.direction );\n\t\t\t\tvar b1 = - diff.dot( segDir );\n\t\t\t\tvar c = diff.lengthSq();\n\t\t\t\tvar det = Math.abs( 1 - a01 * a01 );\n\t\t\t\tvar s0, s1, sqrDist, extDet;\n\n\t\t\t\tif ( det > 0 ) {\n\n\t\t\t\t\t// The ray and segment are not parallel.\n\n\t\t\t\t\ts0 = a01 * b1 - b0;\n\t\t\t\t\ts1 = a01 * b0 - b1;\n\t\t\t\t\textDet = segExtent * det;\n\n\t\t\t\t\tif ( s0 >= 0 ) {\n\n\t\t\t\t\t\tif ( s1 >= - extDet ) {\n\n\t\t\t\t\t\t\tif ( s1 <= extDet ) {\n\n\t\t\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\n\t\t\t\t\t\t\t\tvar invDet = 1 / det;\n\t\t\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// region 1\n\n\t\t\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// region 5\n\n\t\t\t\t\t\t\ts1 = - segExtent;\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( s1 <= - extDet ) {\n\n\t\t\t\t\t\t\t// region 4\n\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n\t\t\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t} else if ( s1 <= extDet ) {\n\n\t\t\t\t\t\t\t// region 3\n\n\t\t\t\t\t\t\ts0 = 0;\n\t\t\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// region 2\n\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n\t\t\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Ray and segment are parallel.\n\n\t\t\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t}\n\n\t\t\t\tif ( optionalPointOnRay ) {\n\n\t\t\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\n\n\t\t\t\t}\n\n\t\t\t\tif ( optionalPointOnSegment ) {\n\n\t\t\t\t\toptionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );\n\n\t\t\t\t}\n\n\t\t\t\treturn sqrDist;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tintersectSphere: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function intersectSphere( sphere, optionalTarget ) {\n\n\t\t\t\tv1.subVectors( sphere.center, this.origin );\n\t\t\t\tvar tca = v1.dot( this.direction );\n\t\t\t\tvar d2 = v1.dot( v1 ) - tca * tca;\n\t\t\t\tvar radius2 = sphere.radius * sphere.radius;\n\n\t\t\t\tif ( d2 > radius2 ) return null;\n\n\t\t\t\tvar thc = Math.sqrt( radius2 - d2 );\n\n\t\t\t\t// t0 = first intersect point - entrance on front of sphere\n\t\t\t\tvar t0 = tca - thc;\n\n\t\t\t\t// t1 = second intersect point - exit point on back of sphere\n\t\t\t\tvar t1 = tca + thc;\n\n\t\t\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\n\t\t\t\tif ( t0 < 0 && t1 < 0 ) return null;\n\n\t\t\t\t// test to see if t0 is behind the ray:\n\t\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t\t\t// in order to always return an intersect point that is in front of the ray.\n\t\t\t\tif ( t0 < 0 ) return this.at( t1, optionalTarget );\n\n\t\t\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n\t\t\t\treturn this.at( t0, optionalTarget );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\treturn this.distanceToPoint( sphere.center ) <= sphere.radius;\n\n\t\t},\n\n\t\tdistanceToPlane: function ( plane ) {\n\n\t\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\t\tif ( denominator === 0 ) {\n\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\n\t\t\t\t\treturn 0;\n\n\t\t\t\t}\n\n\t\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\n\t\t\t// Return if the ray never intersects the plane\n\n\t\t\treturn t >= 0 ? t :  null;\n\n\t\t},\n\n\t\tintersectPlane: function ( plane, optionalTarget ) {\n\n\t\t\tvar t = this.distanceToPlane( plane );\n\n\t\t\tif ( t === null ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\treturn this.at( t, optionalTarget );\n\n\t\t},\n\n\t\tintersectsPlane: function ( plane ) {\n\n\t\t\t// check if the ray lies on the plane first\n\n\t\t\tvar distToPoint = plane.distanceToPoint( this.origin );\n\n\t\t\tif ( distToPoint === 0 ) {\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\t\tif ( denominator * distToPoint < 0 ) {\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\t// ray origin is behind the plane (and is pointing behind it)\n\n\t\t\treturn false;\n\n\t\t},\n\n\t\tintersectBox: function ( box, optionalTarget ) {\n\n\t\t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\n\n\t\t\tvar invdirx = 1 / this.direction.x,\n\t\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\t\tinvdirz = 1 / this.direction.z;\n\n\t\t\tvar origin = this.origin;\n\n\t\t\tif ( invdirx >= 0 ) {\n\n\t\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n\t\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\n\t\t\t} else {\n\n\t\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n\t\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\n\t\t\t}\n\n\t\t\tif ( invdiry >= 0 ) {\n\n\t\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n\t\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\n\t\t\t} else {\n\n\t\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n\t\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\n\t\t\t}\n\n\t\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\n\n\t\t\t// These lines also handle the case where tmin or tmax is NaN\n\t\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n\t\t\tif ( tymin > tmin || tmin !== tmin ) tmin = tymin;\n\n\t\t\tif ( tymax < tmax || tmax !== tmax ) tmax = tymax;\n\n\t\t\tif ( invdirz >= 0 ) {\n\n\t\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n\t\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\n\t\t\t} else {\n\n\t\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n\t\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\n\t\t\t}\n\n\t\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\n\n\t\t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\n\n\t\t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\n\n\t\t\t//return point closest to the ray (positive side)\n\n\t\t\tif ( tmax < 0 ) return null;\n\n\t\t\treturn this.at( tmin >= 0 ? tmin : tmax, optionalTarget );\n\n\t\t},\n\n\t\tintersectsBox: ( function () {\n\n\t\t\tvar v = new Vector3();\n\n\t\t\treturn function intersectsBox( box ) {\n\n\t\t\t\treturn this.intersectBox( box, v ) !== null;\n\n\t\t\t};\n\n\t\t} )(),\n\n\t\tintersectTriangle: function () {\n\n\t\t\t// Compute the offset origin, edges, and normal.\n\t\t\tvar diff = new Vector3();\n\t\t\tvar edge1 = new Vector3();\n\t\t\tvar edge2 = new Vector3();\n\t\t\tvar normal = new Vector3();\n\n\t\t\treturn function intersectTriangle( a, b, c, backfaceCulling, optionalTarget ) {\n\n\t\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\n\t\t\t\tedge1.subVectors( b, a );\n\t\t\t\tedge2.subVectors( c, a );\n\t\t\t\tnormal.crossVectors( edge1, edge2 );\n\n\t\t\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\t\t\t\tvar DdN = this.direction.dot( normal );\n\t\t\t\tvar sign;\n\n\t\t\t\tif ( DdN > 0 ) {\n\n\t\t\t\t\tif ( backfaceCulling ) return null;\n\t\t\t\t\tsign = 1;\n\n\t\t\t\t} else if ( DdN < 0 ) {\n\n\t\t\t\t\tsign = - 1;\n\t\t\t\t\tDdN = - DdN;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\tdiff.subVectors( this.origin, a );\n\t\t\t\tvar DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );\n\n\t\t\t\t// b1 < 0, no intersection\n\t\t\t\tif ( DdQxE2 < 0 ) {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\tvar DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );\n\n\t\t\t\t// b2 < 0, no intersection\n\t\t\t\tif ( DdE1xQ < 0 ) {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\t// b1+b2 > 1, no intersection\n\t\t\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\t// Line intersects triangle, check if ray does.\n\t\t\t\tvar QdN = - sign * diff.dot( normal );\n\n\t\t\t\t// t < 0, no intersection\n\t\t\t\tif ( QdN < 0 ) {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\t// Ray intersects triangle.\n\t\t\t\treturn this.at( QdN / DdN, optionalTarget );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tapplyMatrix4: function ( matrix4 ) {\n\n\t\t\tthis.origin.applyMatrix4( matrix4 );\n\t\t\tthis.direction.transformDirection( matrix4 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( ray ) {\n\n\t\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Line3( start, end ) {\n\n\t\tthis.start = ( start !== undefined ) ? start : new Vector3();\n\t\tthis.end = ( end !== undefined ) ? end : new Vector3();\n\n\t}\n\n\tObject.assign( Line3.prototype, {\n\n\t\tset: function ( start, end ) {\n\n\t\t\tthis.start.copy( start );\n\t\t\tthis.end.copy( end );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( line ) {\n\n\t\t\tthis.start.copy( line.start );\n\t\t\tthis.end.copy( line.end );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetCenter: function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\t\t\treturn result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n\n\t\t},\n\n\t\tdelta: function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\t\t\treturn result.subVectors( this.end, this.start );\n\n\t\t},\n\n\t\tdistanceSq: function () {\n\n\t\t\treturn this.start.distanceToSquared( this.end );\n\n\t\t},\n\n\t\tdistance: function () {\n\n\t\t\treturn this.start.distanceTo( this.end );\n\n\t\t},\n\n\t\tat: function ( t, optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\n\n\t\t},\n\n\t\tclosestPointToPointParameter: function () {\n\n\t\t\tvar startP = new Vector3();\n\t\t\tvar startEnd = new Vector3();\n\n\t\t\treturn function closestPointToPointParameter( point, clampToLine ) {\n\n\t\t\t\tstartP.subVectors( point, this.start );\n\t\t\t\tstartEnd.subVectors( this.end, this.start );\n\n\t\t\t\tvar startEnd2 = startEnd.dot( startEnd );\n\t\t\t\tvar startEnd_startP = startEnd.dot( startP );\n\n\t\t\t\tvar t = startEnd_startP / startEnd2;\n\n\t\t\t\tif ( clampToLine ) {\n\n\t\t\t\t\tt = _Math.clamp( t, 0, 1 );\n\n\t\t\t\t}\n\n\t\t\t\treturn t;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclosestPointToPoint: function ( point, clampToLine, optionalTarget ) {\n\n\t\t\tvar t = this.closestPointToPointParameter( point, clampToLine );\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tthis.start.applyMatrix4( matrix );\n\t\t\tthis.end.applyMatrix4( matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( line ) {\n\n\t\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Triangle( a, b, c ) {\n\n\t\tthis.a = ( a !== undefined ) ? a : new Vector3();\n\t\tthis.b = ( b !== undefined ) ? b : new Vector3();\n\t\tthis.c = ( c !== undefined ) ? c : new Vector3();\n\n\t}\n\n\tObject.assign( Triangle, {\n\n\t\tnormal: function () {\n\n\t\t\tvar v0 = new Vector3();\n\n\t\t\treturn function normal( a, b, c, optionalTarget ) {\n\n\t\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\t\tresult.subVectors( c, b );\n\t\t\t\tv0.subVectors( a, b );\n\t\t\t\tresult.cross( v0 );\n\n\t\t\t\tvar resultLengthSq = result.lengthSq();\n\t\t\t\tif ( resultLengthSq > 0 ) {\n\n\t\t\t\t\treturn result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );\n\n\t\t\t\t}\n\n\t\t\t\treturn result.set( 0, 0, 0 );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\t// static/instance method to calculate barycentric coordinates\n\t\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\t\tbarycoordFromPoint: function () {\n\n\t\t\tvar v0 = new Vector3();\n\t\t\tvar v1 = new Vector3();\n\t\t\tvar v2 = new Vector3();\n\n\t\t\treturn function barycoordFromPoint( point, a, b, c, optionalTarget ) {\n\n\t\t\t\tv0.subVectors( c, a );\n\t\t\t\tv1.subVectors( b, a );\n\t\t\t\tv2.subVectors( point, a );\n\n\t\t\t\tvar dot00 = v0.dot( v0 );\n\t\t\t\tvar dot01 = v0.dot( v1 );\n\t\t\t\tvar dot02 = v0.dot( v2 );\n\t\t\t\tvar dot11 = v1.dot( v1 );\n\t\t\t\tvar dot12 = v1.dot( v2 );\n\n\t\t\t\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\n\n\t\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\t\t// collinear or singular triangle\n\t\t\t\tif ( denom === 0 ) {\n\n\t\t\t\t\t// arbitrary location outside of triangle?\n\t\t\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\t\t\treturn result.set( - 2, - 1, - 1 );\n\n\t\t\t\t}\n\n\t\t\t\tvar invDenom = 1 / denom;\n\t\t\t\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n\t\t\t\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\n\t\t\t\t// barycentric coordinates must always sum to 1\n\t\t\t\treturn result.set( 1 - u - v, v, u );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tcontainsPoint: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function containsPoint( point, a, b, c ) {\n\n\t\t\t\tvar result = Triangle.barycoordFromPoint( point, a, b, c, v1 );\n\n\t\t\t\treturn ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );\n\n\t\t\t};\n\n\t\t}()\n\n\t} );\n\n\tObject.assign( Triangle.prototype, {\n\n\t\tset: function ( a, b, c ) {\n\n\t\t\tthis.a.copy( a );\n\t\t\tthis.b.copy( b );\n\t\t\tthis.c.copy( c );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\n\n\t\t\tthis.a.copy( points[ i0 ] );\n\t\t\tthis.b.copy( points[ i1 ] );\n\t\t\tthis.c.copy( points[ i2 ] );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( triangle ) {\n\n\t\t\tthis.a.copy( triangle.a );\n\t\t\tthis.b.copy( triangle.b );\n\t\t\tthis.c.copy( triangle.c );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tarea: function () {\n\n\t\t\tvar v0 = new Vector3();\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function area() {\n\n\t\t\t\tv0.subVectors( this.c, this.b );\n\t\t\t\tv1.subVectors( this.a, this.b );\n\n\t\t\t\treturn v0.cross( v1 ).length() * 0.5;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tmidpoint: function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\t\t\treturn result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\n\t\t},\n\n\t\tnormal: function ( optionalTarget ) {\n\n\t\t\treturn Triangle.normal( this.a, this.b, this.c, optionalTarget );\n\n\t\t},\n\n\t\tplane: function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Plane();\n\n\t\t\treturn result.setFromCoplanarPoints( this.a, this.b, this.c );\n\n\t\t},\n\n\t\tbarycoordFromPoint: function ( point, optionalTarget ) {\n\n\t\t\treturn Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\n\n\t\t},\n\n\t\tclosestPointToPoint: function () {\n\n\t\t\tvar plane = new Plane();\n\t\t\tvar edgeList = [ new Line3(), new Line3(), new Line3() ];\n\t\t\tvar projectedPoint = new Vector3();\n\t\t\tvar closestPoint = new Vector3();\n\n\t\t\treturn function closestPointToPoint( point, optionalTarget ) {\n\n\t\t\t\tvar result = optionalTarget || new Vector3();\n\t\t\t\tvar minDistance = Infinity;\n\n\t\t\t\t// project the point onto the plane of the triangle\n\n\t\t\t\tplane.setFromCoplanarPoints( this.a, this.b, this.c );\n\t\t\t\tplane.projectPoint( point, projectedPoint );\n\n\t\t\t\t// check if the projection lies within the triangle\n\n\t\t\t\tif( this.containsPoint( projectedPoint ) === true ) {\n\n\t\t\t\t\t// if so, this is the closest point\n\n\t\t\t\t\tresult.copy( projectedPoint );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// if not, the point falls outside the triangle. the result is the closest point to the triangle's edges or vertices\n\n\t\t\t\t\tedgeList[ 0 ].set( this.a, this.b );\n\t\t\t\t\tedgeList[ 1 ].set( this.b, this.c );\n\t\t\t\t\tedgeList[ 2 ].set( this.c, this.a );\n\n\t\t\t\t\tfor( var i = 0; i < edgeList.length; i ++ ) {\n\n\t\t\t\t\t\tedgeList[ i ].closestPointToPoint( projectedPoint, true, closestPoint );\n\n\t\t\t\t\t\tvar distance = projectedPoint.distanceToSquared( closestPoint );\n\n\t\t\t\t\t\tif( distance < minDistance ) {\n\n\t\t\t\t\t\t\tminDistance = distance;\n\n\t\t\t\t\t\t\tresult.copy( closestPoint );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn result;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tequals: function ( triangle ) {\n\n\t\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author jonobr1 / http://jonobr1.com/\n\t */\n\n\tfunction Mesh( geometry, material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Mesh';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new MeshBasicMaterial( { color: Math.random() * 0xffffff } );\n\n\t\tthis.drawMode = TrianglesDrawMode;\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tMesh.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Mesh,\n\n\t\tisMesh: true,\n\n\t\tsetDrawMode: function ( value ) {\n\n\t\t\tthis.drawMode = value;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tthis.drawMode = source.drawMode;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateMorphTargets: function () {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar m, ml, name;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\t\tvar keys = Object.keys( morphAttributes );\n\n\t\t\t\tif ( keys.length > 0 ) {\n\n\t\t\t\t\tvar morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\t\tname = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\tfor ( m = 0, ml = morphTargets.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\tname = morphTargets[ m ].name || String( m );\n\n\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\traycast: ( function () {\n\n\t\t\tvar inverseMatrix = new Matrix4();\n\t\t\tvar ray = new Ray();\n\t\t\tvar sphere = new Sphere();\n\n\t\t\tvar vA = new Vector3();\n\t\t\tvar vB = new Vector3();\n\t\t\tvar vC = new Vector3();\n\n\t\t\tvar tempA = new Vector3();\n\t\t\tvar tempB = new Vector3();\n\t\t\tvar tempC = new Vector3();\n\n\t\t\tvar uvA = new Vector2();\n\t\t\tvar uvB = new Vector2();\n\t\t\tvar uvC = new Vector2();\n\n\t\t\tvar barycoord = new Vector3();\n\n\t\t\tvar intersectionPoint = new Vector3();\n\t\t\tvar intersectionPointWorld = new Vector3();\n\n\t\t\tfunction uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {\n\n\t\t\t\tTriangle.barycoordFromPoint( point, p1, p2, p3, barycoord );\n\n\t\t\t\tuv1.multiplyScalar( barycoord.x );\n\t\t\t\tuv2.multiplyScalar( barycoord.y );\n\t\t\t\tuv3.multiplyScalar( barycoord.z );\n\n\t\t\t\tuv1.add( uv2 ).add( uv3 );\n\n\t\t\t\treturn uv1.clone();\n\n\t\t\t}\n\n\t\t\tfunction checkIntersection( object, raycaster, ray, pA, pB, pC, point ) {\n\n\t\t\t\tvar intersect;\n\t\t\t\tvar material = object.material;\n\n\t\t\t\tif ( material.side === BackSide ) {\n\n\t\t\t\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );\n\n\t\t\t\t}\n\n\t\t\t\tif ( intersect === null ) return null;\n\n\t\t\t\tintersectionPointWorld.copy( point );\n\t\t\t\tintersectionPointWorld.applyMatrix4( object.matrixWorld );\n\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );\n\n\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\n\n\t\t\t\treturn {\n\t\t\t\t\tdistance: distance,\n\t\t\t\t\tpoint: intersectionPointWorld.clone(),\n\t\t\t\t\tobject: object\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tfunction checkBufferGeometryIntersection( object, raycaster, ray, position, uv, a, b, c ) {\n\n\t\t\t\tvA.fromBufferAttribute( position, a );\n\t\t\t\tvB.fromBufferAttribute( position, b );\n\t\t\t\tvC.fromBufferAttribute( position, c );\n\n\t\t\t\tvar intersection = checkIntersection( object, raycaster, ray, vA, vB, vC, intersectionPoint );\n\n\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\tif ( uv ) {\n\n\t\t\t\t\t\tuvA.fromBufferAttribute( uv, a );\n\t\t\t\t\t\tuvB.fromBufferAttribute( uv, b );\n\t\t\t\t\t\tuvC.fromBufferAttribute( uv, c );\n\n\t\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint, vA, vB, vC, uvA, uvB, uvC );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tintersection.face = new Face3( a, b, c, Triangle.normal( vA, vB, vC ) );\n\t\t\t\t\tintersection.faceIndex = a;\n\n\t\t\t\t}\n\n\t\t\t\treturn intersection;\n\n\t\t\t}\n\n\t\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\t\tvar geometry = this.geometry;\n\t\t\t\tvar material = this.material;\n\t\t\t\tvar matrixWorld = this.matrixWorld;\n\n\t\t\t\tif ( material === undefined ) return;\n\n\t\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\t\tsphere.copy( geometry.boundingSphere );\n\t\t\t\tsphere.applyMatrix4( matrixWorld );\n\n\t\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n\t\t\t\t//\n\n\t\t\t\tinverseMatrix.getInverse( matrixWorld );\n\t\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n\t\t\t\t// Check boundingBox before continuing\n\n\t\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\t\tif ( ray.intersectsBox( geometry.boundingBox ) === false ) return;\n\n\t\t\t\t}\n\n\t\t\t\tvar intersection;\n\n\t\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\t\tvar a, b, c;\n\t\t\t\t\tvar index = geometry.index;\n\t\t\t\t\tvar position = geometry.attributes.position;\n\t\t\t\t\tvar uv = geometry.attributes.uv;\n\t\t\t\t\tvar i, l;\n\n\t\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\t\t// indexed buffer geometry\n\n\t\t\t\t\t\tfor ( i = 0, l = index.count; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\ta = index.getX( i );\n\t\t\t\t\t\t\tb = index.getX( i + 1 );\n\t\t\t\t\t\t\tc = index.getX( i + 2 );\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, position, uv, a, b, c );\n\n\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indices buffer semantics\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// non-indexed buffer geometry\n\n\t\t\t\t\t\tfor ( i = 0, l = position.count; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\ta = i;\n\t\t\t\t\t\t\tb = i + 1;\n\t\t\t\t\t\t\tc = i + 2;\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, position, uv, a, b, c );\n\n\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\tintersection.index = a; // triangle number in positions buffer semantics\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\t\tvar fvA, fvB, fvC;\n\t\t\t\t\tvar isMultiMaterial = Array.isArray( material );\n\n\t\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\t\tvar faces = geometry.faces;\n\t\t\t\t\tvar uvs;\n\n\t\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\t\t\t\t\tif ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;\n\n\t\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\t\tvar face = faces[ f ];\n\t\t\t\t\t\tvar faceMaterial = isMultiMaterial ? material[ face.materialIndex ] : material;\n\n\t\t\t\t\t\tif ( faceMaterial === undefined ) continue;\n\n\t\t\t\t\t\tfvA = vertices[ face.a ];\n\t\t\t\t\t\tfvB = vertices[ face.b ];\n\t\t\t\t\t\tfvC = vertices[ face.c ];\n\n\t\t\t\t\t\tif ( faceMaterial.morphTargets === true ) {\n\n\t\t\t\t\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\t\t\t\t\tvar morphInfluences = this.morphTargetInfluences;\n\n\t\t\t\t\t\t\tvA.set( 0, 0, 0 );\n\t\t\t\t\t\t\tvB.set( 0, 0, 0 );\n\t\t\t\t\t\t\tvC.set( 0, 0, 0 );\n\n\t\t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\n\n\t\t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\n\n\t\t\t\t\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t\t\t\t\tvar targets = morphTargets[ t ].vertices;\n\n\t\t\t\t\t\t\t\tvA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );\n\t\t\t\t\t\t\t\tvB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );\n\t\t\t\t\t\t\t\tvC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvA.add( fvA );\n\t\t\t\t\t\t\tvB.add( fvB );\n\t\t\t\t\t\t\tvC.add( fvC );\n\n\t\t\t\t\t\t\tfvA = vA;\n\t\t\t\t\t\t\tfvB = vB;\n\t\t\t\t\t\t\tfvC = vC;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tintersection = checkIntersection( this, raycaster, ray, fvA, fvB, fvC, intersectionPoint );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tif ( uvs && uvs[ f ] ) {\n\n\t\t\t\t\t\t\t\tvar uvs_f = uvs[ f ];\n\t\t\t\t\t\t\t\tuvA.copy( uvs_f[ 0 ] );\n\t\t\t\t\t\t\t\tuvB.copy( uvs_f[ 1 ] );\n\t\t\t\t\t\t\t\tuvC.copy( uvs_f[ 2 ] );\n\n\t\t\t\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tintersection.face = face;\n\t\t\t\t\t\t\tintersection.faceIndex = f;\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}() ),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLBackground( renderer, state, objects, premultipliedAlpha ) {\n\n\t\tvar clearColor = new Color( 0x000000 );\n\t\tvar clearAlpha = 0;\n\n\t\tvar planeCamera, planeMesh;\n\t\tvar boxCamera, boxMesh;\n\n\t\tfunction render( scene, camera, forceClear ) {\n\n\t\t\tvar background = scene.background;\n\n\t\t\tif ( background === null ) {\n\n\t\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t\t} else if ( background && background.isColor ) {\n\n\t\t\t\tsetClear( background, 1 );\n\t\t\t\tforceClear = true;\n\n\t\t\t}\n\n\t\t\tif ( renderer.autoClear || forceClear ) {\n\n\t\t\t\trenderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\n\t\t\t}\n\n\t\t\tif ( background && background.isCubeTexture ) {\n\n\t\t\t\tif ( boxCamera === undefined ) {\n\n\t\t\t\t\tboxCamera = new PerspectiveCamera();\n\n\t\t\t\t\tboxMesh = new Mesh(\n\t\t\t\t\t\tnew BoxBufferGeometry( 5, 5, 5 ),\n\t\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\t\tuniforms: ShaderLib.cube.uniforms,\n\t\t\t\t\t\t\tvertexShader: ShaderLib.cube.vertexShader,\n\t\t\t\t\t\t\tfragmentShader: ShaderLib.cube.fragmentShader,\n\t\t\t\t\t\t\tside: BackSide,\n\t\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\t\tfog: false\n\t\t\t\t\t\t} )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t\tboxCamera.projectionMatrix.copy( camera.projectionMatrix );\n\n\t\t\t\tboxCamera.matrixWorld.extractRotation( camera.matrixWorld );\n\t\t\t\tboxCamera.matrixWorldInverse.getInverse( boxCamera.matrixWorld );\n\n\t\t\t\tboxMesh.material.uniforms[ \"tCube\" ].value = background;\n\t\t\t\tboxMesh.modelViewMatrix.multiplyMatrices( boxCamera.matrixWorldInverse, boxMesh.matrixWorld );\n\n\t\t\t\tobjects.update( boxMesh );\n\n\t\t\t\trenderer.renderBufferDirect( boxCamera, null, boxMesh.geometry, boxMesh.material, boxMesh, null );\n\n\t\t\t} else if ( background && background.isTexture ) {\n\n\t\t\t\tif ( planeCamera === undefined ) {\n\n\t\t\t\t\tplaneCamera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n\t\t\t\t\tplaneMesh = new Mesh(\n\t\t\t\t\t\tnew PlaneBufferGeometry( 2, 2 ),\n\t\t\t\t\t\tnew MeshBasicMaterial( { depthTest: false, depthWrite: false, fog: false } )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.map = background;\n\n\t\t\t\tobjects.update( planeMesh );\n\n\t\t\t\trenderer.renderBufferDirect( planeCamera, null, planeMesh.geometry, planeMesh.material, planeMesh, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setClear( color, alpha ) {\n\n\t\t\tstate.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tgetClearColor: function () {\n\n\t\t\t\treturn clearColor;\n\n\t\t\t},\n\t\t\tsetClearColor: function ( color, alpha ) {\n\n\t\t\t\tclearColor.set( color );\n\t\t\t\tclearAlpha = alpha !== undefined ? alpha : 1;\n\t\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t\t},\n\t\t\tgetClearAlpha: function () {\n\n\t\t\t\treturn clearAlpha;\n\n\t\t\t},\n\t\t\tsetClearAlpha: function ( alpha ) {\n\n\t\t\t\tclearAlpha = alpha;\n\t\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t\t},\n\t\t\trender: render\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction painterSortStable( a, b ) {\n\n\t\tif ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t} else if ( a.program && b.program && a.program !== b.program ) {\n\n\t\t\treturn a.program.id - b.program.id;\n\n\t\t} else if ( a.material.id !== b.material.id ) {\n\n\t\t\treturn a.material.id - b.material.id;\n\n\t\t} else if ( a.z !== b.z ) {\n\n\t\t\treturn a.z - b.z;\n\n\t\t} else {\n\n\t\t\treturn a.id - b.id;\n\n\t\t}\n\n\t}\n\n\tfunction reversePainterSortStable( a, b ) {\n\n\t\tif ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t} if ( a.z !== b.z ) {\n\n\t\t\treturn b.z - a.z;\n\n\t\t} else {\n\n\t\t\treturn a.id - b.id;\n\n\t\t}\n\n\t}\n\n\tfunction WebGLRenderList() {\n\n\t\tvar opaque = [];\n\t\tvar opaqueLastIndex = - 1;\n\n\t\tvar transparent = [];\n\t\tvar transparentLastIndex = - 1;\n\n\t\tfunction init() {\n\n\t\t\topaqueLastIndex = - 1;\n\t\t\ttransparentLastIndex = - 1;\n\n\t\t}\n\n\t\tfunction push( object, geometry, material, z, group ) {\n\n\t\t\tvar array, index;\n\n\t\t\t// allocate the next position in the appropriate array\n\n\t\t\tif ( material.transparent ) {\n\n\t\t\t\tarray = transparent;\n\t\t\t\tindex = ++ transparentLastIndex;\n\n\t\t\t} else {\n\n\t\t\t\tarray = opaque;\n\t\t\t\tindex = ++ opaqueLastIndex;\n\n\t\t\t}\n\n\t\t\t// recycle existing render item or grow the array\n\n\t\t\tvar renderItem = array[ index ];\n\n\t\t\tif ( renderItem ) {\n\n\t\t\t\trenderItem.id = object.id;\n\t\t\t\trenderItem.object = object;\n\t\t\t\trenderItem.geometry = geometry;\n\t\t\t\trenderItem.material = material;\n\t\t\t\trenderItem.program = material.program;\n\t\t\t\trenderItem.renderOrder = object.renderOrder;\n\t\t\t\trenderItem.z = z;\n\t\t\t\trenderItem.group = group;\n\n\t\t\t} else {\n\n\t\t\t\trenderItem = {\n\t\t\t\t\tid: object.id,\n\t\t\t\t\tobject: object,\n\t\t\t\t\tgeometry: geometry,\n\t\t\t\t\tmaterial: material,\n\t\t\t\t\tprogram: material.program,\n\t\t\t\t\trenderOrder: object.renderOrder,\n\t\t\t\t\tz: z,\n\t\t\t\t\tgroup: group\n\t\t\t\t};\n\n\t\t\t\t// assert( index === array.length );\n\t\t\t\tarray.push( renderItem );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction finish() {\n\n\t\t\topaque.length = opaqueLastIndex + 1;\n\t\t\ttransparent.length = transparentLastIndex + 1;\n\n\t\t}\n\n\t\tfunction sort() {\n\n\t\t\topaque.sort( painterSortStable );\n\t\t\ttransparent.sort( reversePainterSortStable );\n\n\t\t}\n\n\t\treturn {\n\t\t\topaque: opaque,\n\t\t\ttransparent: transparent,\n\n\t\t\tinit: init,\n\t\t\tpush: push,\n\t\t\tfinish: finish,\n\n\t\t\tsort: sort\n\t\t};\n\n\t}\n\n\tfunction WebGLRenderLists() {\n\n\t\tvar lists = {};\n\n\t\tfunction get( scene, camera ) {\n\n\t\t\tvar hash = scene.id + ',' + camera.id;\n\t\t\tvar list = lists[ hash ];\n\n\t\t\tif ( list === undefined ) {\n\n\t\t\t\t// console.log( 'THREE.WebGLRenderLists:', hash );\n\n\t\t\t\tlist = new WebGLRenderList();\n\t\t\t\tlists[ hash ] = list;\n\n\t\t\t}\n\n\t\t\treturn list;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\tlists = {};\n\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLIndexedBufferRenderer( gl, extensions, infoRender ) {\n\n\t\tvar mode;\n\n\t\tfunction setMode( value ) {\n\n\t\t\tmode = value;\n\n\t\t}\n\n\t\tvar type, bytesPerElement;\n\n\t\tfunction setIndex( value ) {\n\n\t\t\ttype = value.type;\n\t\t\tbytesPerElement = value.bytesPerElement;\n\n\t\t}\n\n\t\tfunction render( start, count ) {\n\n\t\t\tgl.drawElements( mode, count, type, start * bytesPerElement );\n\n\t\t\tinfoRender.calls ++;\n\t\t\tinfoRender.vertices += count;\n\n\t\t\tif ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;\n\n\t\t}\n\n\t\tfunction renderInstances( geometry, start, count ) {\n\n\t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\tif ( extension === null ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\textension.drawElementsInstancedANGLE( mode, count, type, start * bytesPerElement, geometry.maxInstancedCount );\n\n\t\t\tinfoRender.calls ++;\n\t\t\tinfoRender.vertices += count * geometry.maxInstancedCount;\n\n\t\t\tif ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;\n\n\t\t}\n\n\t\t//\n\n\t\tthis.setMode = setMode;\n\t\tthis.setIndex = setIndex;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLBufferRenderer( gl, extensions, infoRender ) {\n\n\t\tvar mode;\n\n\t\tfunction setMode( value ) {\n\n\t\t\tmode = value;\n\n\t\t}\n\n\t\tfunction render( start, count ) {\n\n\t\t\tgl.drawArrays( mode, start, count );\n\n\t\t\tinfoRender.calls ++;\n\t\t\tinfoRender.vertices += count;\n\n\t\t\tif ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;\n\n\t\t}\n\n\t\tfunction renderInstances( geometry, start, count ) {\n\n\t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\tif ( extension === null ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar position = geometry.attributes.position;\n\n\t\t\tif ( position.isInterleavedBufferAttribute ) {\n\n\t\t\t\tcount = position.data.count;\n\n\t\t\t\textension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );\n\n\t\t\t} else {\n\n\t\t\t\textension.drawArraysInstancedANGLE( mode, start, count, geometry.maxInstancedCount );\n\n\t\t\t}\n\n\t\t\tinfoRender.calls ++;\n\t\t\tinfoRender.vertices += count * geometry.maxInstancedCount;\n\n\t\t\tif ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;\n\n\t\t}\n\n\t\t//\n\n\t\tthis.setMode = setMode;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLGeometries( gl, attributes, infoMemory ) {\n\n\t\tvar geometries = {};\n\t\tvar wireframeAttributes = {};\n\n\t\tfunction onGeometryDispose( event ) {\n\n\t\t\tvar geometry = event.target;\n\t\t\tvar buffergeometry = geometries[ geometry.id ];\n\n\t\t\tif ( buffergeometry.index !== null ) {\n\n\t\t\t\tattributes.remove( buffergeometry.index );\n\n\t\t\t}\n\n\t\t\tfor ( var name in buffergeometry.attributes ) {\n\n\t\t\t\tattributes.remove( buffergeometry.attributes[ name ] );\n\n\t\t\t}\n\n\t\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\n\n\t\t\tdelete geometries[ geometry.id ];\n\n\t\t\t// TODO Remove duplicate code\n\n\t\t\tvar attribute = wireframeAttributes[ geometry.id ];\n\n\t\t\tif ( attribute ) {\n\n\t\t\t\tattributes.remove( attribute );\n\t\t\t\tdelete wireframeAttributes[ geometry.id ];\n\n\t\t\t}\n\n\t\t\tattribute = wireframeAttributes[ buffergeometry.id ];\n\n\t\t\tif ( attribute ) {\n\n\t\t\t\tattributes.remove( attribute );\n\t\t\t\tdelete wireframeAttributes[ buffergeometry.id ];\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tinfoMemory.geometries --;\n\n\t\t}\n\n\t\tfunction get( object, geometry ) {\n\n\t\t\tvar buffergeometry = geometries[ geometry.id ];\n\n\t\t\tif ( buffergeometry ) return buffergeometry;\n\n\t\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tbuffergeometry = geometry;\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tif ( geometry._bufferGeometry === undefined ) {\n\n\t\t\t\t\tgeometry._bufferGeometry = new BufferGeometry().setFromObject( object );\n\n\t\t\t\t}\n\n\t\t\t\tbuffergeometry = geometry._bufferGeometry;\n\n\t\t\t}\n\n\t\t\tgeometries[ geometry.id ] = buffergeometry;\n\n\t\t\tinfoMemory.geometries ++;\n\n\t\t\treturn buffergeometry;\n\n\t\t}\n\n\t\tfunction update( geometry ) {\n\n\t\t\tvar index = geometry.index;\n\t\t\tvar geometryAttributes = geometry.attributes;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tattributes.update( index, gl.ELEMENT_ARRAY_BUFFER );\n\n\t\t\t}\n\n\t\t\tfor ( var name in geometryAttributes ) {\n\n\t\t\t\tattributes.update( geometryAttributes[ name ], gl.ARRAY_BUFFER );\n\n\t\t\t}\n\n\t\t\t// morph targets\n\n\t\t\tvar morphAttributes = geometry.morphAttributes;\n\n\t\t\tfor ( var name in morphAttributes ) {\n\n\t\t\t\tvar array = morphAttributes[ name ];\n\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\t\tattributes.update( array[ i ], gl.ARRAY_BUFFER );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getWireframeAttribute( geometry ) {\n\n\t\t\tvar attribute = wireframeAttributes[ geometry.id ];\n\n\t\t\tif ( attribute ) return attribute;\n\n\t\t\tvar indices = [];\n\n\t\t\tvar geometryIndex = geometry.index;\n\t\t\tvar geometryAttributes = geometry.attributes;\n\n\t\t\t// console.time( 'wireframe' );\n\n\t\t\tif ( geometryIndex !== null ) {\n\n\t\t\t\tvar array = geometryIndex.array;\n\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\t\tvar a = array[ i + 0 ];\n\t\t\t\t\tvar b = array[ i + 1 ];\n\t\t\t\t\tvar c = array[ i + 2 ];\n\n\t\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar array = geometryAttributes.position.array;\n\n\t\t\t\tfor ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\n\n\t\t\t\t\tvar a = i + 0;\n\t\t\t\t\tvar b = i + 1;\n\t\t\t\t\tvar c = i + 2;\n\n\t\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// console.timeEnd( 'wireframe' );\n\n\t\t\tattribute = new ( arrayMax( indices ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );\n\n\t\t\tattributes.update( attribute, gl.ELEMENT_ARRAY_BUFFER );\n\n\t\t\twireframeAttributes[ geometry.id ] = attribute;\n\n\t\t\treturn attribute;\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tget: get,\n\t\t\tupdate: update,\n\n\t\t\tgetWireframeAttribute: getWireframeAttribute\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLLights() {\n\n\t\tvar lights = {};\n\n\t\treturn {\n\n\t\t\tget: function ( light ) {\n\n\t\t\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\t\t\treturn lights[ light.id ];\n\n\t\t\t\t}\n\n\t\t\t\tvar uniforms;\n\n\t\t\t\tswitch ( light.type ) {\n\n\t\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\n\t\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tconeCos: 0,\n\t\t\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\t\t\tdecay: 0,\n\n\t\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tdecay: 0,\n\n\t\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tskyColor: new Color(),\n\t\t\t\t\t\t\tgroundColor: new Color()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\thalfWidth: new Vector3(),\n\t\t\t\t\t\t\thalfHeight: new Vector3()\n\t\t\t\t\t\t\t// TODO (abelnation): set RectAreaLight shadow uniforms\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tlights[ light.id ] = uniforms;\n\n\t\t\t\treturn uniforms;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLObjects( gl, geometries, infoRender ) {\n\n\t\tvar updateList = {};\n\n\t\tfunction update( object ) {\n\n\t\t\tvar frame = infoRender.frame;\n\n\t\t\tvar geometry = object.geometry;\n\t\t\tvar buffergeometry = geometries.get( object, geometry );\n\n\t\t\t// Update once per frame\n\n\t\t\tif ( updateList[ buffergeometry.id ] !== frame ) {\n\n\t\t\t\tif ( geometry.isGeometry ) {\n\n\t\t\t\t\tbuffergeometry.updateFromObject( object );\n\n\t\t\t\t}\n\n\t\t\t\tgeometries.update( buffergeometry );\n\n\t\t\t\tupdateList[ buffergeometry.id ] = frame;\n\n\t\t\t}\n\n\t\t\treturn buffergeometry;\n\n\t\t}\n\n\t\tfunction clear() {\n\n\t\t\tupdateList = {};\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tupdate: update,\n\t\t\tclear: clear\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction addLineNumbers( string ) {\n\n\t\tvar lines = string.split( '\\n' );\n\n\t\tfor ( var i = 0; i < lines.length; i ++ ) {\n\n\t\t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\n\n\t\t}\n\n\t\treturn lines.join( '\\n' );\n\n\t}\n\n\tfunction WebGLShader( gl, type, string ) {\n\n\t\tvar shader = gl.createShader( type );\n\n\t\tgl.shaderSource( shader, string );\n\t\tgl.compileShader( shader );\n\n\t\tif ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {\n\n\t\t\tconsole.error( 'THREE.WebGLShader: Shader couldn\\'t compile.' );\n\n\t\t}\n\n\t\tif ( gl.getShaderInfoLog( shader ) !== '' ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );\n\n\t\t}\n\n\t\t// --enable-privileged-webgl-extension\n\t\t// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\t\treturn shader;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar programIdCount = 0;\n\n\tfunction getEncodingComponents( encoding ) {\n\n\t\tswitch ( encoding ) {\n\n\t\t\tcase LinearEncoding:\n\t\t\t\treturn [ 'Linear','( value )' ];\n\t\t\tcase sRGBEncoding:\n\t\t\t\treturn [ 'sRGB','( value )' ];\n\t\t\tcase RGBEEncoding:\n\t\t\t\treturn [ 'RGBE','( value )' ];\n\t\t\tcase RGBM7Encoding:\n\t\t\t\treturn [ 'RGBM','( value, 7.0 )' ];\n\t\t\tcase RGBM16Encoding:\n\t\t\t\treturn [ 'RGBM','( value, 16.0 )' ];\n\t\t\tcase RGBDEncoding:\n\t\t\t\treturn [ 'RGBD','( value, 256.0 )' ];\n\t\t\tcase GammaEncoding:\n\t\t\t\treturn [ 'Gamma','( value, float( GAMMA_FACTOR ) )' ];\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'unsupported encoding: ' + encoding );\n\n\t\t}\n\n\t}\n\n\tfunction getTexelDecodingFunction( functionName, encoding ) {\n\n\t\tvar components = getEncodingComponents( encoding );\n\t\treturn \"vec4 \" + functionName + \"( vec4 value ) { return \" + components[ 0 ] + \"ToLinear\" + components[ 1 ] + \"; }\";\n\n\t}\n\n\tfunction getTexelEncodingFunction( functionName, encoding ) {\n\n\t\tvar components = getEncodingComponents( encoding );\n\t\treturn \"vec4 \" + functionName + \"( vec4 value ) { return LinearTo\" + components[ 0 ] + components[ 1 ] + \"; }\";\n\n\t}\n\n\tfunction getToneMappingFunction( functionName, toneMapping ) {\n\n\t\tvar toneMappingName;\n\n\t\tswitch ( toneMapping ) {\n\n\t\t\tcase LinearToneMapping:\n\t\t\t\ttoneMappingName = \"Linear\";\n\t\t\t\tbreak;\n\n\t\t\tcase ReinhardToneMapping:\n\t\t\t\ttoneMappingName = \"Reinhard\";\n\t\t\t\tbreak;\n\n\t\t\tcase Uncharted2ToneMapping:\n\t\t\t\ttoneMappingName = \"Uncharted2\";\n\t\t\t\tbreak;\n\n\t\t\tcase CineonToneMapping:\n\t\t\t\ttoneMappingName = \"OptimizedCineon\";\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'unsupported toneMapping: ' + toneMapping );\n\n\t\t}\n\n\t\treturn \"vec3 \" + functionName + \"( vec3 color ) { return \" + toneMappingName + \"ToneMapping( color ); }\";\n\n\t}\n\n\tfunction generateExtensions( extensions, parameters, rendererExtensions ) {\n\n\t\textensions = extensions || {};\n\n\t\tvar chunks = [\n\t\t\t( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.normalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',\n\t\t\t( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',\n\t\t\t( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',\n\t\t\t( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : ''\n\t\t];\n\n\t\treturn chunks.filter( filterEmptyLine ).join( '\\n' );\n\n\t}\n\n\tfunction generateDefines( defines ) {\n\n\t\tvar chunks = [];\n\n\t\tfor ( var name in defines ) {\n\n\t\t\tvar value = defines[ name ];\n\n\t\t\tif ( value === false ) continue;\n\n\t\t\tchunks.push( '#define ' + name + ' ' + value );\n\n\t\t}\n\n\t\treturn chunks.join( '\\n' );\n\n\t}\n\n\tfunction fetchAttributeLocations( gl, program, identifiers ) {\n\n\t\tvar attributes = {};\n\n\t\tvar n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );\n\n\t\tfor ( var i = 0; i < n; i ++ ) {\n\n\t\t\tvar info = gl.getActiveAttrib( program, i );\n\t\t\tvar name = info.name;\n\n\t\t\t// console.log(\"THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:\", name, i );\n\n\t\t\tattributes[ name ] = gl.getAttribLocation( program, name );\n\n\t\t}\n\n\t\treturn attributes;\n\n\t}\n\n\tfunction filterEmptyLine( string ) {\n\n\t\treturn string !== '';\n\n\t}\n\n\tfunction replaceLightNums( string, parameters ) {\n\n\t\treturn string\n\t\t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\n\t\t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\n\t\t\t.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )\n\t\t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\n\t\t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );\n\n\t}\n\n\tfunction parseIncludes( string ) {\n\n\t\tvar pattern = /^[ \\t]*#include +<([\\w\\d.]+)>/gm;\n\n\t\tfunction replace( match, include ) {\n\n\t\t\tvar replace = ShaderChunk[ include ];\n\n\t\t\tif ( replace === undefined ) {\n\n\t\t\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\n\n\t\t\t}\n\n\t\t\treturn parseIncludes( replace );\n\n\t\t}\n\n\t\treturn string.replace( pattern, replace );\n\n\t}\n\n\tfunction unrollLoops( string ) {\n\n\t\tvar pattern = /for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\n\t\tfunction replace( match, start, end, snippet ) {\n\n\t\t\tvar unroll = '';\n\n\t\t\tfor ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {\n\n\t\t\t\tunroll += snippet.replace( /\\[ i \\]/g, '[ ' + i + ' ]' );\n\n\t\t\t}\n\n\t\t\treturn unroll;\n\n\t\t}\n\n\t\treturn string.replace( pattern, replace );\n\n\t}\n\n\tfunction WebGLProgram( renderer, code, material, shader, parameters ) {\n\n\t\tvar gl = renderer.context;\n\n\t\tvar extensions = material.extensions;\n\t\tvar defines = material.defines;\n\n\t\tvar vertexShader = shader.vertexShader;\n\t\tvar fragmentShader = shader.fragmentShader;\n\n\t\tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n\t\tif ( parameters.shadowMapType === PCFShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\n\t\t} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\n\t\t}\n\n\t\tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\t\tvar envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\n\t\tif ( parameters.envMap ) {\n\n\t\t\tswitch ( material.envMap.mapping ) {\n\n\t\t\t\tcase CubeReflectionMapping:\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CubeUVReflectionMapping:\n\t\t\t\tcase CubeUVRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase EquirectangularReflectionMapping:\n\t\t\t\tcase EquirectangularRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase SphericalReflectionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_SPHERE';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tswitch ( material.envMap.mapping ) {\n\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\tcase EquirectangularRefractionMapping:\n\t\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tswitch ( material.combine ) {\n\n\t\t\t\tcase MultiplyOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MixOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase AddOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\n\n\t\t// console.log( 'building new program ' );\n\n\t\t//\n\n\t\tvar customExtensions = generateExtensions( extensions, parameters, renderer.extensions );\n\n\t\tvar customDefines = generateDefines( defines );\n\n\t\t//\n\n\t\tvar program = gl.createProgram();\n\n\t\tvar prefixVertex, prefixFragment;\n\n\t\tif ( material.isRawShaderMaterial ) {\n\n\t\t\tprefixVertex = [\n\n\t\t\t\tcustomDefines,\n\n\t\t\t\t'\\n'\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tprefixFragment = [\n\n\t\t\t\tcustomExtensions,\n\t\t\t\tcustomDefines,\n\n\t\t\t\t'\\n'\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t} else {\n\n\t\t\tprefixVertex = [\n\n\t\t\t\t'precision ' + parameters.precision + ' float;',\n\t\t\t\t'precision ' + parameters.precision + ' int;',\n\n\t\t\t\t'#define SHADER_NAME ' + shader.name,\n\n\t\t\t\tcustomDefines,\n\n\t\t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\n\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t\t'#define MAX_BONES ' + parameters.maxBones,\n\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t\t( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',\n\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\n\t\t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\n\n\t\t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\n\t\t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\t\t'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,\n\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\n\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t\t'uniform mat4 modelMatrix;',\n\t\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t'uniform mat3 normalMatrix;',\n\t\t\t\t'uniform vec3 cameraPosition;',\n\n\t\t\t\t'attribute vec3 position;',\n\t\t\t\t'attribute vec3 normal;',\n\t\t\t\t'attribute vec2 uv;',\n\n\t\t\t\t'#ifdef USE_COLOR',\n\n\t\t\t\t'\tattribute vec3 color;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_MORPHTARGETS',\n\n\t\t\t\t'\tattribute vec3 morphTarget0;',\n\t\t\t\t'\tattribute vec3 morphTarget1;',\n\t\t\t\t'\tattribute vec3 morphTarget2;',\n\t\t\t\t'\tattribute vec3 morphTarget3;',\n\n\t\t\t\t'\t#ifdef USE_MORPHNORMALS',\n\n\t\t\t\t'\t\tattribute vec3 morphNormal0;',\n\t\t\t\t'\t\tattribute vec3 morphNormal1;',\n\t\t\t\t'\t\tattribute vec3 morphNormal2;',\n\t\t\t\t'\t\tattribute vec3 morphNormal3;',\n\n\t\t\t\t'\t#else',\n\n\t\t\t\t'\t\tattribute vec3 morphTarget4;',\n\t\t\t\t'\t\tattribute vec3 morphTarget5;',\n\t\t\t\t'\t\tattribute vec3 morphTarget6;',\n\t\t\t\t'\t\tattribute vec3 morphTarget7;',\n\n\t\t\t\t'\t#endif',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_SKINNING',\n\n\t\t\t\t'\tattribute vec4 skinIndex;',\n\t\t\t\t'\tattribute vec4 skinWeight;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'\\n'\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tprefixFragment = [\n\n\t\t\t\tcustomExtensions,\n\n\t\t\t\t'precision ' + parameters.precision + ' float;',\n\t\t\t\t'precision ' + parameters.precision + ' int;',\n\n\t\t\t\t'#define SHADER_NAME ' + shader.name,\n\n\t\t\t\tcustomDefines,\n\n\t\t\t\tparameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',\n\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t\t( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',\n\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\n\t\t\t\tparameters.gradientMap ? '#define USE_GRADIENTMAP' : '',\n\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\t\t'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,\n\t\t\t\t'#define UNION_CLIPPING_PLANES ' + (parameters.numClippingPlanes - parameters.numClipIntersection),\n\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\t\tparameters.premultipliedAlpha ? \"#define PREMULTIPLIED_ALPHA\" : '',\n\n\t\t\t\tparameters.physicallyCorrectLights ? \"#define PHYSICALLY_CORRECT_LIGHTS\" : '',\n\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t\tparameters.envMap && renderer.extensions.get( 'EXT_shader_texture_lod' ) ? '#define TEXTURE_LOD_EXT' : '',\n\n\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t'uniform vec3 cameraPosition;',\n\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? \"#define TONE_MAPPING\" : '',\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '',  // this code is required here because it is used by the toneMapping() function defined below\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( \"toneMapping\", parameters.toneMapping ) : '',\n\n\t\t\t\tparameters.dithering ? '#define DITHERING' : '',\n\n\t\t\t\t( parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ? ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below\n\t\t\t\tparameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',\n\t\t\t\tparameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',\n\t\t\t\tparameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',\n\t\t\t\tparameters.outputEncoding ? getTexelEncodingFunction( \"linearToOutputTexel\", parameters.outputEncoding ) : '',\n\n\t\t\t\tparameters.depthPacking ? \"#define DEPTH_PACKING \" + material.depthPacking : '',\n\n\t\t\t\t'\\n'\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t}\n\n\t\tvertexShader = parseIncludes( vertexShader );\n\t\tvertexShader = replaceLightNums( vertexShader, parameters );\n\n\t\tfragmentShader = parseIncludes( fragmentShader );\n\t\tfragmentShader = replaceLightNums( fragmentShader, parameters );\n\n\t\tif ( ! material.isShaderMaterial ) {\n\n\t\t\tvertexShader = unrollLoops( vertexShader );\n\t\t\tfragmentShader = unrollLoops( fragmentShader );\n\n\t\t}\n\n\t\tvar vertexGlsl = prefixVertex + vertexShader;\n\t\tvar fragmentGlsl = prefixFragment + fragmentShader;\n\n\t\t// console.log( '*VERTEX*', vertexGlsl );\n\t\t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n\t\tvar glVertexShader = WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );\n\t\tvar glFragmentShader = WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );\n\n\t\tgl.attachShader( program, glVertexShader );\n\t\tgl.attachShader( program, glFragmentShader );\n\n\t\t// Force a particular attribute to index 0.\n\n\t\tif ( material.index0AttributeName !== undefined ) {\n\n\t\t\tgl.bindAttribLocation( program, 0, material.index0AttributeName );\n\n\t\t} else if ( parameters.morphTargets === true ) {\n\n\t\t\t// programs with morphTargets displace position out of attribute 0\n\t\t\tgl.bindAttribLocation( program, 0, 'position' );\n\n\t\t}\n\n\t\tgl.linkProgram( program );\n\n\t\tvar programLog = gl.getProgramInfoLog( program );\n\t\tvar vertexLog = gl.getShaderInfoLog( glVertexShader );\n\t\tvar fragmentLog = gl.getShaderInfoLog( glFragmentShader );\n\n\t\tvar runnable = true;\n\t\tvar haveDiagnostics = true;\n\n\t\t// console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );\n\t\t// console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );\n\n\t\tif ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {\n\n\t\t\trunnable = false;\n\n\t\t\tconsole.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );\n\n\t\t} else if ( programLog !== '' ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );\n\n\t\t} else if ( vertexLog === '' || fragmentLog === '' ) {\n\n\t\t\thaveDiagnostics = false;\n\n\t\t}\n\n\t\tif ( haveDiagnostics ) {\n\n\t\t\tthis.diagnostics = {\n\n\t\t\t\trunnable: runnable,\n\t\t\t\tmaterial: material,\n\n\t\t\t\tprogramLog: programLog,\n\n\t\t\t\tvertexShader: {\n\n\t\t\t\t\tlog: vertexLog,\n\t\t\t\t\tprefix: prefixVertex\n\n\t\t\t\t},\n\n\t\t\t\tfragmentShader: {\n\n\t\t\t\t\tlog: fragmentLog,\n\t\t\t\t\tprefix: prefixFragment\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\t// clean up\n\n\t\tgl.deleteShader( glVertexShader );\n\t\tgl.deleteShader( glFragmentShader );\n\n\t\t// set up caching for uniform locations\n\n\t\tvar cachedUniforms;\n\n\t\tthis.getUniforms = function() {\n\n\t\t\tif ( cachedUniforms === undefined ) {\n\n\t\t\t\tcachedUniforms =\n\t\t\t\t\tnew WebGLUniforms( gl, program, renderer );\n\n\t\t\t}\n\n\t\t\treturn cachedUniforms;\n\n\t\t};\n\n\t\t// set up caching for attribute locations\n\n\t\tvar cachedAttributes;\n\n\t\tthis.getAttributes = function() {\n\n\t\t\tif ( cachedAttributes === undefined ) {\n\n\t\t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\n\n\t\t\t}\n\n\t\t\treturn cachedAttributes;\n\n\t\t};\n\n\t\t// free resource\n\n\t\tthis.destroy = function() {\n\n\t\t\tgl.deleteProgram( program );\n\t\t\tthis.program = undefined;\n\n\t\t};\n\n\t\t// DEPRECATED\n\n\t\tObject.defineProperties( this, {\n\n\t\t\tuniforms: {\n\t\t\t\tget: function() {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );\n\t\t\t\t\treturn this.getUniforms();\n\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tattributes: {\n\t\t\t\tget: function() {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );\n\t\t\t\t\treturn this.getAttributes();\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t} );\n\n\n\t\t//\n\n\t\tthis.id = programIdCount ++;\n\t\tthis.code = code;\n\t\tthis.usedTimes = 1;\n\t\tthis.program = program;\n\t\tthis.vertexShader = glVertexShader;\n\t\tthis.fragmentShader = glFragmentShader;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLPrograms( renderer, capabilities ) {\n\n\t\tvar programs = [];\n\n\t\tvar shaderIDs = {\n\t\t\tMeshDepthMaterial: 'depth',\n\t\t\tMeshNormalMaterial: 'normal',\n\t\t\tMeshBasicMaterial: 'basic',\n\t\t\tMeshLambertMaterial: 'lambert',\n\t\t\tMeshPhongMaterial: 'phong',\n\t\t\tMeshToonMaterial: 'phong',\n\t\t\tMeshStandardMaterial: 'physical',\n\t\t\tMeshPhysicalMaterial: 'physical',\n\t\t\tLineBasicMaterial: 'basic',\n\t\t\tLineDashedMaterial: 'dashed',\n\t\t\tPointsMaterial: 'points'\n\t\t};\n\n\t\tvar parameterNames = [\n\t\t\t\"precision\", \"supportsVertexTextures\", \"map\", \"mapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\",\n\t\t\t\"lightMap\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"displacementMap\", \"specularMap\",\n\t\t\t\"roughnessMap\", \"metalnessMap\", \"gradientMap\",\n\t\t\t\"alphaMap\", \"combine\", \"vertexColors\", \"fog\", \"useFog\", \"fogExp\",\n\t\t\t\"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\n\t\t\t\"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\n\t\t\t\"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\",\n\t\t\t\"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\", \"numRectAreaLights\",\n\t\t\t\"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights',\n\t\t\t\"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"numClipIntersection\", \"depthPacking\", \"dithering\"\n\t\t];\n\n\n\t\tfunction allocateBones( object ) {\n\n\t\t\tvar skeleton = object.skeleton;\n\t\t\tvar bones = skeleton.bones;\n\n\t\t\tif ( capabilities.floatVertexTextures ) {\n\n\t\t\t\treturn 1024;\n\n\t\t\t} else {\n\n\t\t\t\t// default for when object is not specified\n\t\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t\t\t\t//\n\t\t\t\t//  - leave some extra space for other uniforms\n\t\t\t\t//  - limit here is ANGLE's 254 max uniform vectors\n\t\t\t\t//    (up to 54 should be safe)\n\n\t\t\t\tvar nVertexUniforms = capabilities.maxVertexUniforms;\n\t\t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\n\n\t\t\t\tvar maxBones = Math.min( nVertexMatrices, bones.length );\n\n\t\t\t\tif ( maxBones < bones.length ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );\n\t\t\t\t\treturn 0;\n\n\t\t\t\t}\n\n\t\t\t\treturn maxBones;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getTextureEncodingFromMap( map, gammaOverrideLinear ) {\n\n\t\t\tvar encoding;\n\n\t\t\tif ( ! map ) {\n\n\t\t\t\tencoding = LinearEncoding;\n\n\t\t\t} else if ( map.isTexture ) {\n\n\t\t\t\tencoding = map.encoding;\n\n\t\t\t} else if ( map.isWebGLRenderTarget ) {\n\n\t\t\t\tconsole.warn( \"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\t\tencoding = map.texture.encoding;\n\n\t\t\t}\n\n\t\t\t// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.\n\t\t\tif ( encoding === LinearEncoding && gammaOverrideLinear ) {\n\n\t\t\t\tencoding = GammaEncoding;\n\n\t\t\t}\n\n\t\t\treturn encoding;\n\n\t\t}\n\n\t\tthis.getParameters = function ( material, lights, fog, nClipPlanes, nClipIntersection, object ) {\n\n\t\t\tvar shaderID = shaderIDs[ material.type ];\n\n\t\t\t// heuristics to create shader parameters according to lights in the scene\n\t\t\t// (not to blow over maxLights budget)\n\n\t\t\tvar maxBones = object.isSkinnedMesh ? allocateBones( object ) : 0;\n\t\t\tvar precision = renderer.getPrecision();\n\n\t\t\tif ( material.precision !== null ) {\n\n\t\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\n\n\t\t\t\tif ( precision !== material.precision ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\tvar parameters = {\n\n\t\t\t\tshaderID: shaderID,\n\n\t\t\t\tprecision: precision,\n\t\t\t\tsupportsVertexTextures: capabilities.vertexTextures,\n\t\t\t\toutputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),\n\t\t\t\tmap: !! material.map,\n\t\t\t\tmapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),\n\t\t\t\tenvMap: !! material.envMap,\n\t\t\t\tenvMapMode: material.envMap && material.envMap.mapping,\n\t\t\t\tenvMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),\n\t\t\t\tenvMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === CubeUVReflectionMapping ) || ( material.envMap.mapping === CubeUVRefractionMapping ) ),\n\t\t\t\tlightMap: !! material.lightMap,\n\t\t\t\taoMap: !! material.aoMap,\n\t\t\t\temissiveMap: !! material.emissiveMap,\n\t\t\t\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),\n\t\t\t\tbumpMap: !! material.bumpMap,\n\t\t\t\tnormalMap: !! material.normalMap,\n\t\t\t\tdisplacementMap: !! material.displacementMap,\n\t\t\t\troughnessMap: !! material.roughnessMap,\n\t\t\t\tmetalnessMap: !! material.metalnessMap,\n\t\t\t\tspecularMap: !! material.specularMap,\n\t\t\t\talphaMap: !! material.alphaMap,\n\n\t\t\t\tgradientMap: !! material.gradientMap,\n\n\t\t\t\tcombine: material.combine,\n\n\t\t\t\tvertexColors: material.vertexColors,\n\n\t\t\t\tfog: !! fog,\n\t\t\t\tuseFog: material.fog,\n\t\t\t\tfogExp: ( fog && fog.isFogExp2 ),\n\n\t\t\t\tflatShading: material.shading === FlatShading,\n\n\t\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\t\tlogarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,\n\n\t\t\t\tskinning: material.skinning && maxBones > 0,\n\t\t\t\tmaxBones: maxBones,\n\t\t\t\tuseVertexTexture: capabilities.floatVertexTextures,\n\n\t\t\t\tmorphTargets: material.morphTargets,\n\t\t\t\tmorphNormals: material.morphNormals,\n\t\t\t\tmaxMorphTargets: renderer.maxMorphTargets,\n\t\t\t\tmaxMorphNormals: renderer.maxMorphNormals,\n\n\t\t\t\tnumDirLights: lights.directional.length,\n\t\t\t\tnumPointLights: lights.point.length,\n\t\t\t\tnumSpotLights: lights.spot.length,\n\t\t\t\tnumRectAreaLights: lights.rectArea.length,\n\t\t\t\tnumHemiLights: lights.hemi.length,\n\n\t\t\t\tnumClippingPlanes: nClipPlanes,\n\t\t\t\tnumClipIntersection: nClipIntersection,\n\n\t\t\t\tdithering: material.dithering,\n\n\t\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && lights.shadows.length > 0,\n\t\t\t\tshadowMapType: renderer.shadowMap.type,\n\n\t\t\t\ttoneMapping: renderer.toneMapping,\n\t\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\n\t\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\n\t\t\t\talphaTest: material.alphaTest,\n\t\t\t\tdoubleSided: material.side === DoubleSide,\n\t\t\t\tflipSided: material.side === BackSide,\n\n\t\t\t\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false\n\n\t\t\t};\n\n\t\t\treturn parameters;\n\n\t\t};\n\n\t\tthis.getProgramCode = function ( material, parameters ) {\n\n\t\t\tvar array = [];\n\n\t\t\tif ( parameters.shaderID ) {\n\n\t\t\t\tarray.push( parameters.shaderID );\n\n\t\t\t} else {\n\n\t\t\t\tarray.push( material.fragmentShader );\n\t\t\t\tarray.push( material.vertexShader );\n\n\t\t\t}\n\n\t\t\tif ( material.defines !== undefined ) {\n\n\t\t\t\tfor ( var name in material.defines ) {\n\n\t\t\t\t\tarray.push( name );\n\t\t\t\t\tarray.push( material.defines[ name ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\n\n\t\t\t\tarray.push( parameters[ parameterNames[ i ] ] );\n\n\t\t\t}\n\n\t\t\tarray.push( material.onBeforeCompile.toString() );\n\n\t\t\tarray.push( renderer.gammaOutput );\n\n\t\t\treturn array.join();\n\n\t\t};\n\n\t\tthis.acquireProgram = function ( material, shader, parameters, code ) {\n\n\t\t\tvar program;\n\n\t\t\t// Check if code has been already compiled\n\t\t\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\n\n\t\t\t\tvar programInfo = programs[ p ];\n\n\t\t\t\tif ( programInfo.code === code ) {\n\n\t\t\t\t\tprogram = programInfo;\n\t\t\t\t\t++ program.usedTimes;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( program === undefined ) {\n\n\t\t\t\tprogram = new WebGLProgram( renderer, code, material, shader, parameters );\n\t\t\t\tprograms.push( program );\n\n\t\t\t}\n\n\t\t\treturn program;\n\n\t\t};\n\n\t\tthis.releaseProgram = function ( program ) {\n\n\t\t\tif ( -- program.usedTimes === 0 ) {\n\n\t\t\t\t// Remove from unordered set\n\t\t\t\tvar i = programs.indexOf( program );\n\t\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\n\t\t\t\tprograms.pop();\n\n\t\t\t\t// Free WebGL resources\n\t\t\t\tprogram.destroy();\n\n\t\t\t}\n\n\t\t};\n\n\t\t// Exposed for resource monitoring & error feedback via renderer.info:\n\t\tthis.programs = programs;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLTextures( _gl, extensions, state, properties, capabilities, paramThreeToGL, infoMemory ) {\n\n\t\tvar _isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && _gl instanceof WebGL2RenderingContext );\n\n\t\t//\n\n\t\tfunction clampToMaxSize( image, maxSize ) {\n\n\t\t\tif ( image.width > maxSize || image.height > maxSize ) {\n\n\t\t\t\t// Warning: Scaling through the canvas will only work with images that use\n\t\t\t\t// premultiplied alpha.\n\n\t\t\t\tvar scale = maxSize / Math.max( image.width, image.height );\n\n\t\t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\t\tcanvas.width = Math.floor( image.width * scale );\n\t\t\t\tcanvas.height = Math.floor( image.height * scale );\n\n\t\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\n\n\t\t\t\treturn canvas;\n\n\t\t\t}\n\n\t\t\treturn image;\n\n\t\t}\n\n\t\tfunction isPowerOfTwo( image ) {\n\n\t\t\treturn _Math.isPowerOfTwo( image.width ) && _Math.isPowerOfTwo( image.height );\n\n\t\t}\n\n\t\tfunction makePowerOfTwo( image ) {\n\n\t\t\tif ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement ) {\n\n\t\t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\t\tcanvas.width = _Math.nearestPowerOfTwo( image.width );\n\t\t\t\tcanvas.height = _Math.nearestPowerOfTwo( image.height );\n\n\t\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\t\tcontext.drawImage( image, 0, 0, canvas.width, canvas.height );\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\n\n\t\t\t\treturn canvas;\n\n\t\t\t}\n\n\t\t\treturn image;\n\n\t\t}\n\n\t\tfunction textureNeedsPowerOfTwo( texture ) {\n\n\t\t\treturn ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||\n\t\t\t\t( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );\n\n\t\t}\n\n\t\tfunction textureNeedsGenerateMipmaps( texture, isPowerOfTwo ) {\n\n\t\t\treturn texture.generateMipmaps && isPowerOfTwo &&\n\t\t\t\ttexture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\n\t\t}\n\n\t\t// Fallback filters for non-power-of-2 textures\n\n\t\tfunction filterFallback( f ) {\n\n\t\t\tif ( f === NearestFilter || f === NearestMipMapNearestFilter || f === NearestMipMapLinearFilter ) {\n\n\t\t\t\treturn _gl.NEAREST;\n\n\t\t\t}\n\n\t\t\treturn _gl.LINEAR;\n\n\t\t}\n\n\t\t//\n\n\t\tfunction onTextureDispose( event ) {\n\n\t\t\tvar texture = event.target;\n\n\t\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\t\tdeallocateTexture( texture );\n\n\t\t\tinfoMemory.textures --;\n\n\n\t\t}\n\n\t\tfunction onRenderTargetDispose( event ) {\n\n\t\t\tvar renderTarget = event.target;\n\n\t\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\n\t\t\tdeallocateRenderTarget( renderTarget );\n\n\t\t\tinfoMemory.textures --;\n\n\t\t}\n\n\t\t//\n\n\t\tfunction deallocateTexture( texture ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.image && textureProperties.__image__webglTextureCube ) {\n\n\t\t\t\t// cube texture\n\n\t\t\t\t_gl.deleteTexture( textureProperties.__image__webglTextureCube );\n\n\t\t\t} else {\n\n\t\t\t\t// 2D texture\n\n\t\t\t\tif ( textureProperties.__webglInit === undefined ) return;\n\n\t\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t\t}\n\n\t\t\t// remove all webgl properties\n\t\t\tproperties.remove( texture );\n\n\t\t}\n\n\t\tfunction deallocateRenderTarget( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\t\tif ( ! renderTarget ) return;\n\n\t\t\tif ( textureProperties.__webglTexture !== undefined ) {\n\n\t\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t\t}\n\n\t\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\t\trenderTarget.depthTexture.dispose();\n\n\t\t\t}\n\n\t\t\tif ( renderTarget.isWebGLRenderTargetCube ) {\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );\n\n\t\t\t}\n\n\t\t\tproperties.remove( renderTarget.texture );\n\t\t\tproperties.remove( renderTarget );\n\n\t\t}\n\n\t\t//\n\n\n\n\t\tfunction setTexture2D( texture, slot ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tvar image = texture.image;\n\n\t\t\t\tif ( image === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined', texture );\n\n\t\t\t\t} else if ( image.complete === false ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\n\t\t}\n\n\t\tfunction setTextureCube( texture, slot ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.image.length === 6 ) {\n\n\t\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\t\tif ( ! textureProperties.__image__webglTextureCube ) {\n\n\t\t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\t\t\ttextureProperties.__image__webglTextureCube = _gl.createTexture();\n\n\t\t\t\t\t\tinfoMemory.textures ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\n\t\t\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\n\t\t\t\t\tvar isCompressed = ( texture && texture.isCompressedTexture );\n\t\t\t\t\tvar isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );\n\n\t\t\t\t\tvar cubeImage = [];\n\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\n\n\t\t\t\t\t\t\tcubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar image = cubeImage[ 0 ],\n\t\t\t\t\tisPowerOfTwoImage = isPowerOfTwo( image ),\n\t\t\t\t\tglFormat = paramThreeToGL( texture.format ),\n\t\t\t\t\tglType = paramThreeToGL( texture.type );\n\n\t\t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage );\n\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t\tif ( ! isCompressed ) {\n\n\t\t\t\t\t\t\tif ( isDataTexture ) {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tvar mipmap, mipmaps = cubeImage[ i ].mipmaps;\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t\tmipmap = mipmaps[ j ];\n\n\t\t\t\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n\t\t\t\t\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\n\t\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()\" );\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( textureNeedsGenerateMipmaps( texture, isPowerOfTwoImage ) ) {\n\n\t\t\t\t\t\t_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttextureProperties.__version = texture.version;\n\n\t\t\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setTextureCubeDynamic( texture, slot ) {\n\n\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );\n\n\t\t}\n\n\t\tfunction setTextureParameters( textureType, texture, isPowerOfTwoImage ) {\n\n\t\t\tvar extension;\n\n\t\t\tif ( isPowerOfTwoImage ) {\n\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL( texture.wrapS ) );\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL( texture.wrapT ) );\n\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL( texture.magFilter ) );\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL( texture.minFilter ) );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\n\n\t\t\t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture );\n\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );\n\n\t\t\t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\textension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tif ( extension ) {\n\n\t\t\t\tif ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;\n\t\t\t\tif ( texture.type === HalfFloatType && extensions.get( 'OES_texture_half_float_linear' ) === null ) return;\n\n\t\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n\n\t\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n\t\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction uploadTexture( textureProperties, texture, slot ) {\n\n\t\t\tif ( textureProperties.__webglInit === undefined ) {\n\n\t\t\t\ttextureProperties.__webglInit = true;\n\n\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\t\tinfoMemory.textures ++;\n\n\t\t\t}\n\n\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\n\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\n\n\t\t\tvar image = clampToMaxSize( texture.image, capabilities.maxTextureSize );\n\n\t\t\tif ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( image ) === false ) {\n\n\t\t\t\timage = makePowerOfTwo( image );\n\n\t\t\t}\n\n\t\t\tvar isPowerOfTwoImage = isPowerOfTwo( image ),\n\t\t\tglFormat = paramThreeToGL( texture.format ),\n\t\t\tglType = paramThreeToGL( texture.type );\n\n\t\t\tsetTextureParameters( _gl.TEXTURE_2D, texture, isPowerOfTwoImage );\n\n\t\t\tvar mipmap, mipmaps = texture.mipmaps;\n\n\t\t\tif ( texture.isDepthTexture ) {\n\n\t\t\t\t// populate depth texture with dummy data\n\n\t\t\t\tvar internalFormat = _gl.DEPTH_COMPONENT;\n\n\t\t\t\tif ( texture.type === FloatType ) {\n\n\t\t\t\t\tif ( !_isWebGL2 ) throw new Error('Float Depth Texture only supported in WebGL2.0');\n\t\t\t\t\tinternalFormat = _gl.DEPTH_COMPONENT32F;\n\n\t\t\t\t} else if ( _isWebGL2 ) {\n\n\t\t\t\t\t// WebGL 2.0 requires signed internalformat for glTexImage2D\n\t\t\t\t\tinternalFormat = _gl.DEPTH_COMPONENT16;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texture.format === DepthFormat && internalFormat === _gl.DEPTH_COMPONENT ) {\n\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {\n\n\t\t\t\t\t        console.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );\n\n\t\t\t\t\t\ttexture.type = UnsignedShortType;\n\t\t\t\t\t\tglType = paramThreeToGL( texture.type );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\tif ( texture.format === DepthStencilFormat ) {\n\n\t\t\t\t\tinternalFormat = _gl.DEPTH_STENCIL;\n\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif ( texture.type !== UnsignedInt248Type ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );\n\n\t\t\t\t\t\ttexture.type = UnsignedInt248Type;\n\t\t\t\t\t\tglType = paramThreeToGL( texture.type );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, internalFormat, image.width, image.height, 0, glFormat, glType, null );\n\n\t\t\t} else if ( texture.isDataTexture ) {\n\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\n\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isCompressedTexture ) {\n\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n\t\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\n\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()\" );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// regular Texture (image, video, canvas)\n\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\n\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, image );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, isPowerOfTwoImage ) ) _gl.generateMipmap( _gl.TEXTURE_2D );\n\n\t\t\ttextureProperties.__version = texture.version;\n\n\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t\t}\n\n\t\t// Render targets\n\n\t\t// Setup storage for target texture and bind it to correct framebuffer\n\t\tfunction setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {\n\n\t\t\tvar glFormat = paramThreeToGL( renderTarget.texture.format );\n\t\t\tvar glType = paramThreeToGL( renderTarget.texture.type );\n\t\t\tstate.texImage2D( textureTarget, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\t\t}\n\n\t\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\t\tfunction setupRenderBufferStorage( renderbuffer, renderTarget ) {\n\n\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\n\n\t\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );\n\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n\t\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );\n\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n\t\t\t} else {\n\n\t\t\t\t// FIXME: We don't support !depth !stencil\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\n\n\t\t}\n\n\t\t// Setup resources for a Depth Texture for a FBO (needs an extension)\n\t\tfunction setupDepthTexture( framebuffer, renderTarget ) {\n\n\t\t\tvar isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );\n\t\t\tif ( isCube ) throw new Error('Depth Texture with cube render targets is not supported!');\n\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\t\tif ( !( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {\n\n\t\t\t\tthrow new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');\n\n\t\t\t}\n\n\t\t\t// upload an empty depth texture with framebuffer size\n\t\t\tif ( !properties.get( renderTarget.depthTexture ).__webglTexture ||\n\t\t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\n\t\t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\n\t\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\t\t\t}\n\n\t\t\tsetTexture2D( renderTarget.depthTexture, 0 );\n\n\t\t\tvar webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\n\n\t\t\tif ( renderTarget.depthTexture.format === DepthFormat ) {\n\n\t\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\n\t\t\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\n\n\t\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\n\t\t\t} else {\n\n\t\t\t\tthrow new Error('Unknown depthTexture format')\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Setup GL resources for a non-texture depth buffer\n\t\tfunction setupDepthRenderbuffer( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n\t\t\tvar isCube = ( renderTarget.isWebGLRenderTargetCube === true );\n\n\t\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\t\tif ( isCube ) throw new Error('target.depthTexture not supported in Cube render targets');\n\n\t\t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\n\n\t\t\t} else {\n\n\t\t\t\tif ( isCube ) {\n\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\n\t\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\t\t}\n\n\t\t// Set up GL resources for the render target\n\t\tfunction setupRenderTarget( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\tinfoMemory.textures ++;\n\n\t\t\tvar isCube = ( renderTarget.isWebGLRenderTargetCube === true );\n\t\t\tvar isTargetPowerOfTwo = isPowerOfTwo( renderTarget );\n\n\t\t\t// Setup framebuffer\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t\t}\n\n\t\t\t// Setup color buffer\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );\n\n\t\t\t\t}\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, isTargetPowerOfTwo ) ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, null );\n\n\t\t\t} else {\n\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, isTargetPowerOfTwo ) ) _gl.generateMipmap( _gl.TEXTURE_2D );\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_2D, null );\n\n\t\t\t}\n\n\t\t\t// Setup depth and stencil buffers\n\n\t\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\t\tsetupDepthRenderbuffer( renderTarget );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction updateRenderTargetMipmap( renderTarget ) {\n\n\t\t\tvar texture = renderTarget.texture;\n\t\t\tvar isTargetPowerOfTwo = isPowerOfTwo( renderTarget );\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, isTargetPowerOfTwo ) ) {\n\n\t\t\t\tvar target = renderTarget.isWebGLRenderTargetCube ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\n\t\t\t\tvar webglTexture = properties.get( texture ).__webglTexture;\n\n\t\t\t\tstate.bindTexture( target, webglTexture );\n\t\t\t\t_gl.generateMipmap( target );\n\t\t\t\tstate.bindTexture( target, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.setTexture2D = setTexture2D;\n\t\tthis.setTextureCube = setTextureCube;\n\t\tthis.setTextureCubeDynamic = setTextureCubeDynamic;\n\t\tthis.setupRenderTarget = setupRenderTarget;\n\t\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\n\t}\n\n\t/**\n\t * @author fordacious / fordacious.github.io\n\t */\n\n\tfunction WebGLProperties() {\n\n\t\tvar properties = {};\n\n\t\tfunction get( object ) {\n\n\t\t\tvar uuid = object.uuid;\n\t\t\tvar map = properties[ uuid ];\n\n\t\t\tif ( map === undefined ) {\n\n\t\t\t\tmap = {};\n\t\t\t\tproperties[ uuid ] = map;\n\n\t\t\t}\n\n\t\t\treturn map;\n\n\t\t}\n\n\t\tfunction remove( object ) {\n\n\t\t\tdelete properties[ object.uuid ];\n\n\t\t}\n\n\t\tfunction clear() {\n\n\t\t\tproperties = {};\n\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tclear: clear\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLState( gl, extensions, paramThreeToGL ) {\n\n\t\tfunction ColorBuffer() {\n\n\t\t\tvar locked = false;\n\n\t\t\tvar color = new Vector4();\n\t\t\tvar currentColorMask = null;\n\t\t\tvar currentColorClear = new Vector4();\n\n\t\t\treturn {\n\n\t\t\t\tsetMask: function ( colorMask ) {\n\n\t\t\t\t\tif ( currentColorMask !== colorMask && ! locked ) {\n\n\t\t\t\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\n\t\t\t\t\t\tcurrentColorMask = colorMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\t\tlocked = lock;\n\n\t\t\t\t},\n\n\t\t\t\tsetClear: function ( r, g, b, a, premultipliedAlpha ) {\n\n\t\t\t\t\tif ( premultipliedAlpha === true ) {\n\n\t\t\t\t\t\tr *= a; g *= a; b *= a;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcolor.set( r, g, b, a );\n\n\t\t\t\t\tif ( currentColorClear.equals( color ) === false ) {\n\n\t\t\t\t\t\tgl.clearColor( r, g, b, a );\n\t\t\t\t\t\tcurrentColorClear.copy( color );\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\treset: function () {\n\n\t\t\t\t\tlocked = false;\n\n\t\t\t\t\tcurrentColorMask = null;\n\t\t\t\t\tcurrentColorClear.set( 0, 0, 0, 1 );\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction DepthBuffer() {\n\n\t\t\tvar locked = false;\n\n\t\t\tvar currentDepthMask = null;\n\t\t\tvar currentDepthFunc = null;\n\t\t\tvar currentDepthClear = null;\n\n\t\t\treturn {\n\n\t\t\t\tsetTest: function ( depthTest ) {\n\n\t\t\t\t\tif ( depthTest ) {\n\n\t\t\t\t\t\tenable( gl.DEPTH_TEST );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tdisable( gl.DEPTH_TEST );\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetMask: function ( depthMask ) {\n\n\t\t\t\t\tif ( currentDepthMask !== depthMask && ! locked ) {\n\n\t\t\t\t\t\tgl.depthMask( depthMask );\n\t\t\t\t\t\tcurrentDepthMask = depthMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetFunc: function ( depthFunc ) {\n\n\t\t\t\t\tif ( currentDepthFunc !== depthFunc ) {\n\n\t\t\t\t\t\tif ( depthFunc ) {\n\n\t\t\t\t\t\t\tswitch ( depthFunc ) {\n\n\t\t\t\t\t\t\t\tcase NeverDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.NEVER );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase AlwaysDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.ALWAYS );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.LESS );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessEqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase EqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.EQUAL );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterEqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.GEQUAL );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.GREATER );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase NotEqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.NOTEQUAL );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentDepthFunc = depthFunc;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\t\tlocked = lock;\n\n\t\t\t\t},\n\n\t\t\t\tsetClear: function ( depth ) {\n\n\t\t\t\t\tif ( currentDepthClear !== depth ) {\n\n\t\t\t\t\t\tgl.clearDepth( depth );\n\t\t\t\t\t\tcurrentDepthClear = depth;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\treset: function () {\n\n\t\t\t\t\tlocked = false;\n\n\t\t\t\t\tcurrentDepthMask = null;\n\t\t\t\t\tcurrentDepthFunc = null;\n\t\t\t\t\tcurrentDepthClear = null;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction StencilBuffer() {\n\n\t\t\tvar locked = false;\n\n\t\t\tvar currentStencilMask = null;\n\t\t\tvar currentStencilFunc = null;\n\t\t\tvar currentStencilRef = null;\n\t\t\tvar currentStencilFuncMask = null;\n\t\t\tvar currentStencilFail = null;\n\t\t\tvar currentStencilZFail = null;\n\t\t\tvar currentStencilZPass = null;\n\t\t\tvar currentStencilClear = null;\n\n\t\t\treturn {\n\n\t\t\t\tsetTest: function ( stencilTest ) {\n\n\t\t\t\t\tif ( stencilTest ) {\n\n\t\t\t\t\t\tenable( gl.STENCIL_TEST );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tdisable( gl.STENCIL_TEST );\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetMask: function ( stencilMask ) {\n\n\t\t\t\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\n\n\t\t\t\t\t\tgl.stencilMask( stencilMask );\n\t\t\t\t\t\tcurrentStencilMask = stencilMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetFunc: function ( stencilFunc, stencilRef, stencilMask ) {\n\n\t\t\t\t\tif ( currentStencilFunc !== stencilFunc ||\n\t\t\t\t\t     currentStencilRef \t!== stencilRef \t||\n\t\t\t\t\t     currentStencilFuncMask !== stencilMask ) {\n\n\t\t\t\t\t\tgl.stencilFunc( stencilFunc, stencilRef, stencilMask );\n\n\t\t\t\t\t\tcurrentStencilFunc = stencilFunc;\n\t\t\t\t\t\tcurrentStencilRef = stencilRef;\n\t\t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetOp: function ( stencilFail, stencilZFail, stencilZPass ) {\n\n\t\t\t\t\tif ( currentStencilFail\t !== stencilFail \t||\n\t\t\t\t\t     currentStencilZFail !== stencilZFail ||\n\t\t\t\t\t     currentStencilZPass !== stencilZPass ) {\n\n\t\t\t\t\t\tgl.stencilOp( stencilFail, stencilZFail, stencilZPass );\n\n\t\t\t\t\t\tcurrentStencilFail = stencilFail;\n\t\t\t\t\t\tcurrentStencilZFail = stencilZFail;\n\t\t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\t\tlocked = lock;\n\n\t\t\t\t},\n\n\t\t\t\tsetClear: function ( stencil ) {\n\n\t\t\t\t\tif ( currentStencilClear !== stencil ) {\n\n\t\t\t\t\t\tgl.clearStencil( stencil );\n\t\t\t\t\t\tcurrentStencilClear = stencil;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\treset: function () {\n\n\t\t\t\t\tlocked = false;\n\n\t\t\t\t\tcurrentStencilMask = null;\n\t\t\t\t\tcurrentStencilFunc = null;\n\t\t\t\t\tcurrentStencilRef = null;\n\t\t\t\t\tcurrentStencilFuncMask = null;\n\t\t\t\t\tcurrentStencilFail = null;\n\t\t\t\t\tcurrentStencilZFail = null;\n\t\t\t\t\tcurrentStencilZPass = null;\n\t\t\t\t\tcurrentStencilClear = null;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\t//\n\n\t\tvar colorBuffer = new ColorBuffer();\n\t\tvar depthBuffer = new DepthBuffer();\n\t\tvar stencilBuffer = new StencilBuffer();\n\n\t\tvar maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n\t\tvar newAttributes = new Uint8Array( maxVertexAttributes );\n\t\tvar enabledAttributes = new Uint8Array( maxVertexAttributes );\n\t\tvar attributeDivisors = new Uint8Array( maxVertexAttributes );\n\n\t\tvar capabilities = {};\n\n\t\tvar compressedTextureFormats = null;\n\n\t\tvar currentBlending = null;\n\t\tvar currentBlendEquation = null;\n\t\tvar currentBlendSrc = null;\n\t\tvar currentBlendDst = null;\n\t\tvar currentBlendEquationAlpha = null;\n\t\tvar currentBlendSrcAlpha = null;\n\t\tvar currentBlendDstAlpha = null;\n\t\tvar currentPremultipledAlpha = false;\n\n\t\tvar currentFlipSided = null;\n\t\tvar currentCullFace = null;\n\n\t\tvar currentLineWidth = null;\n\n\t\tvar currentPolygonOffsetFactor = null;\n\t\tvar currentPolygonOffsetUnits = null;\n\n\t\tvar currentScissorTest = null;\n\n\t\tvar maxTextures = gl.getParameter( gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS );\n\n\t\tvar version = parseFloat( /^WebGL\\ ([0-9])/.exec( gl.getParameter( gl.VERSION ) )[ 1 ] );\n\t\tvar lineWidthAvailable = parseFloat( version ) >= 1.0;\n\n\t\tvar currentTextureSlot = null;\n\t\tvar currentBoundTextures = {};\n\n\t\tvar currentScissor = new Vector4();\n\t\tvar currentViewport = new Vector4();\n\n\t\tfunction createTexture( type, target, count ) {\n\n\t\t\tvar data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\n\t\t\tvar texture = gl.createTexture();\n\n\t\t\tgl.bindTexture( type, texture );\n\t\t\tgl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\t\t\tgl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\n\t\t\tfor ( var i = 0; i < count; i ++ ) {\n\n\t\t\t\tgl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t\tvar emptyTextures = {};\n\t\temptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );\n\t\temptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );\n\n\t\t//\n\n\t\tfunction init() {\n\n\t\t\tcolorBuffer.setClear( 0, 0, 0, 1 );\n\t\t\tdepthBuffer.setClear( 1 );\n\t\t\tstencilBuffer.setClear( 0 );\n\n\t\t\tenable( gl.DEPTH_TEST );\n\t\t\tdepthBuffer.setFunc( LessEqualDepth );\n\n\t\t\tsetFlipSided( false );\n\t\t\tsetCullFace( CullFaceBack );\n\t\t\tenable( gl.CULL_FACE );\n\n\t\t\tenable( gl.BLEND );\n\t\t\tsetBlending( NormalBlending );\n\n\t\t}\n\n\t\tfunction initAttributes() {\n\n\t\t\tfor ( var i = 0, l = newAttributes.length; i < l; i ++ ) {\n\n\t\t\t\tnewAttributes[ i ] = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction enableAttribute( attribute ) {\n\n\t\t\tnewAttributes[ attribute ] = 1;\n\n\t\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n\t\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\t\tenabledAttributes[ attribute ] = 1;\n\n\t\t\t}\n\n\t\t\tif ( attributeDivisors[ attribute ] !== 0 ) {\n\n\t\t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\t\textension.vertexAttribDivisorANGLE( attribute, 0 );\n\t\t\t\tattributeDivisors[ attribute ] = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction enableAttributeAndDivisor( attribute, meshPerAttribute ) {\n\n\t\t\tnewAttributes[ attribute ] = 1;\n\n\t\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n\t\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\t\tenabledAttributes[ attribute ] = 1;\n\n\t\t\t}\n\n\t\t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\n\n\t\t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\t\textension.vertexAttribDivisorANGLE( attribute, meshPerAttribute );\n\t\t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction disableUnusedAttributes() {\n\n\t\t\tfor ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {\n\n\t\t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\n\n\t\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction enable( id ) {\n\n\t\t\tif ( capabilities[ id ] !== true ) {\n\n\t\t\t\tgl.enable( id );\n\t\t\t\tcapabilities[ id ] = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction disable( id ) {\n\n\t\t\tif ( capabilities[ id ] !== false ) {\n\n\t\t\t\tgl.disable( id );\n\t\t\t\tcapabilities[ id ] = false;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getCompressedTextureFormats() {\n\n\t\t\tif ( compressedTextureFormats === null ) {\n\n\t\t\t\tcompressedTextureFormats = [];\n\n\t\t\t\tif ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||\n\t\t\t\t     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||\n\t\t\t\t     extensions.get( 'WEBGL_compressed_texture_etc1' ) ) {\n\n\t\t\t\t\tvar formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );\n\n\t\t\t\t\tfor ( var i = 0; i < formats.length; i ++ ) {\n\n\t\t\t\t\t\tcompressedTextureFormats.push( formats[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn compressedTextureFormats;\n\n\t\t}\n\n\t\tfunction setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\n\n\t\t\tif ( blending !== NoBlending ) {\n\n\t\t\t\tenable( gl.BLEND );\n\n\t\t\t} else {\n\n\t\t\t\tdisable( gl.BLEND );\n\n\t\t\t}\n\n\t\t\tif ( ( blending !== CustomBlending ) && ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) ) {\n\n\t\t\t\tif ( blending === AdditiveBlending ) {\n\n\t\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE, gl.ONE, gl.ONE );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t\t\t\t\t\tgl.blendFunc( gl.SRC_ALPHA, gl.ONE );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( blending === SubtractiveBlending ) {\n\n\t\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( blending === MultiplyBlending ) {\n\n\t\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.SRC_COLOR );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\t\tgl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tcurrentBlending = blending;\n\t\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\n\t\t\t}\n\n\t\t\tif ( blending === CustomBlending ) {\n\n\t\t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\t\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\t\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\n\n\t\t\t\t\tgl.blendEquationSeparate( paramThreeToGL( blendEquation ), paramThreeToGL( blendEquationAlpha ) );\n\n\t\t\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\n\t\t\t\t}\n\n\t\t\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\n\n\t\t\t\t\tgl.blendFuncSeparate( paramThreeToGL( blendSrc ), paramThreeToGL( blendDst ), paramThreeToGL( blendSrcAlpha ), paramThreeToGL( blendDstAlpha ) );\n\n\t\t\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\t\t\tcurrentBlendDst = blendDst;\n\t\t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tcurrentBlendEquation = null;\n\t\t\t\tcurrentBlendSrc = null;\n\t\t\t\tcurrentBlendDst = null;\n\t\t\t\tcurrentBlendEquationAlpha = null;\n\t\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\t\tcurrentBlendDstAlpha = null;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setMaterial( material ) {\n\n\t\t\tmaterial.side === DoubleSide\n\t\t\t\t? disable( gl.CULL_FACE )\n\t\t\t\t: enable( gl.CULL_FACE );\n\n\t\t\tsetFlipSided( material.side === BackSide );\n\n\t\t\tmaterial.transparent === true\n\t\t\t\t? setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha )\n\t\t\t\t: setBlending( NoBlending );\n\n\t\t\tdepthBuffer.setFunc( material.depthFunc );\n\t\t\tdepthBuffer.setTest( material.depthTest );\n\t\t\tdepthBuffer.setMask( material.depthWrite );\n\t\t\tcolorBuffer.setMask( material.colorWrite );\n\n\t\t\tsetPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\n\t\t}\n\n\t\t//\n\n\t\tfunction setFlipSided( flipSided ) {\n\n\t\t\tif ( currentFlipSided !== flipSided ) {\n\n\t\t\t\tif ( flipSided ) {\n\n\t\t\t\t\tgl.frontFace( gl.CW );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.frontFace( gl.CCW );\n\n\t\t\t\t}\n\n\t\t\t\tcurrentFlipSided = flipSided;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setCullFace( cullFace ) {\n\n\t\t\tif ( cullFace !== CullFaceNone ) {\n\n\t\t\t\tenable( gl.CULL_FACE );\n\n\t\t\t\tif ( cullFace !== currentCullFace ) {\n\n\t\t\t\t\tif ( cullFace === CullFaceBack ) {\n\n\t\t\t\t\t\tgl.cullFace( gl.BACK );\n\n\t\t\t\t\t} else if ( cullFace === CullFaceFront ) {\n\n\t\t\t\t\t\tgl.cullFace( gl.FRONT );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl.cullFace( gl.FRONT_AND_BACK );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tdisable( gl.CULL_FACE );\n\n\t\t\t}\n\n\t\t\tcurrentCullFace = cullFace;\n\n\t\t}\n\n\t\tfunction setLineWidth( width ) {\n\n\t\t\tif ( width !== currentLineWidth ) {\n\n\t\t\t\tif ( lineWidthAvailable ) gl.lineWidth( width );\n\n\t\t\t\tcurrentLineWidth = width;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setPolygonOffset( polygonOffset, factor, units ) {\n\n\t\t\tif ( polygonOffset ) {\n\n\t\t\t\tenable( gl.POLYGON_OFFSET_FILL );\n\n\t\t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\n\n\t\t\t\t\tgl.polygonOffset( factor, units );\n\n\t\t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\t\t\tcurrentPolygonOffsetUnits = units;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tdisable( gl.POLYGON_OFFSET_FILL );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getScissorTest() {\n\n\t\t\treturn currentScissorTest;\n\n\t\t}\n\n\t\tfunction setScissorTest( scissorTest ) {\n\n\t\t\tcurrentScissorTest = scissorTest;\n\n\t\t\tif ( scissorTest ) {\n\n\t\t\t\tenable( gl.SCISSOR_TEST );\n\n\t\t\t} else {\n\n\t\t\t\tdisable( gl.SCISSOR_TEST );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// texture\n\n\t\tfunction activeTexture( webglSlot ) {\n\n\t\t\tif ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;\n\n\t\t\tif ( currentTextureSlot !== webglSlot ) {\n\n\t\t\t\tgl.activeTexture( webglSlot );\n\t\t\t\tcurrentTextureSlot = webglSlot;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction bindTexture( webglType, webglTexture ) {\n\n\t\t\tif ( currentTextureSlot === null ) {\n\n\t\t\t\tactiveTexture();\n\n\t\t\t}\n\n\t\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\t\tif ( boundTexture === undefined ) {\n\n\t\t\t\tboundTexture = { type: undefined, texture: undefined };\n\t\t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\n\n\t\t\t}\n\n\t\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\n\n\t\t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\n\n\t\t\t\tboundTexture.type = webglType;\n\t\t\t\tboundTexture.texture = webglTexture;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction compressedTexImage2D() {\n\n\t\t\ttry {\n\n\t\t\t\tgl.compressedTexImage2D.apply( gl, arguments );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction texImage2D() {\n\n\t\t\ttry {\n\n\t\t\t\tgl.texImage2D.apply( gl, arguments );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction scissor( scissor ) {\n\n\t\t\tif ( currentScissor.equals( scissor ) === false ) {\n\n\t\t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\n\t\t\t\tcurrentScissor.copy( scissor );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction viewport( viewport ) {\n\n\t\t\tif ( currentViewport.equals( viewport ) === false ) {\n\n\t\t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\n\t\t\t\tcurrentViewport.copy( viewport );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction reset() {\n\n\t\t\tfor ( var i = 0; i < enabledAttributes.length; i ++ ) {\n\n\t\t\t\tif ( enabledAttributes[ i ] === 1 ) {\n\n\t\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tcapabilities = {};\n\n\t\t\tcompressedTextureFormats = null;\n\n\t\t\tcurrentTextureSlot = null;\n\t\t\tcurrentBoundTextures = {};\n\n\t\t\tcurrentBlending = null;\n\n\t\t\tcurrentFlipSided = null;\n\t\t\tcurrentCullFace = null;\n\n\t\t\tcolorBuffer.reset();\n\t\t\tdepthBuffer.reset();\n\t\t\tstencilBuffer.reset();\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tbuffers: {\n\t\t\t\tcolor: colorBuffer,\n\t\t\t\tdepth: depthBuffer,\n\t\t\t\tstencil: stencilBuffer\n\t\t\t},\n\n\t\t\tinit: init,\n\t\t\tinitAttributes: initAttributes,\n\t\t\tenableAttribute: enableAttribute,\n\t\t\tenableAttributeAndDivisor: enableAttributeAndDivisor,\n\t\t\tdisableUnusedAttributes: disableUnusedAttributes,\n\t\t\tenable: enable,\n\t\t\tdisable: disable,\n\t\t\tgetCompressedTextureFormats: getCompressedTextureFormats,\n\n\t\t\tsetBlending: setBlending,\n\t\t\tsetMaterial: setMaterial,\n\n\t\t\tsetFlipSided: setFlipSided,\n\t\t\tsetCullFace: setCullFace,\n\n\t\t\tsetLineWidth: setLineWidth,\n\t\t\tsetPolygonOffset: setPolygonOffset,\n\n\t\t\tgetScissorTest: getScissorTest,\n\t\t\tsetScissorTest: setScissorTest,\n\n\t\t\tactiveTexture: activeTexture,\n\t\t\tbindTexture: bindTexture,\n\t\t\tcompressedTexImage2D: compressedTexImage2D,\n\t\t\ttexImage2D: texImage2D,\n\n\t\t\tscissor: scissor,\n\t\t\tviewport: viewport,\n\n\t\t\treset: reset\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLCapabilities( gl, extensions, parameters ) {\n\n\t\tvar maxAnisotropy;\n\n\t\tfunction getMaxAnisotropy() {\n\n\t\t\tif ( maxAnisotropy !== undefined ) return maxAnisotropy;\n\n\t\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\n\t\t\t} else {\n\n\t\t\t\tmaxAnisotropy = 0;\n\n\t\t\t}\n\n\t\t\treturn maxAnisotropy;\n\n\t\t}\n\n\t\tfunction getMaxPrecision( precision ) {\n\n\t\t\tif ( precision === 'highp' ) {\n\n\t\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\n\t\t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\n\n\t\t\t\t\treturn 'highp';\n\n\t\t\t\t}\n\n\t\t\t\tprecision = 'mediump';\n\n\t\t\t}\n\n\t\t\tif ( precision === 'mediump' ) {\n\n\t\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\n\t\t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\n\n\t\t\t\t\treturn 'mediump';\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn 'lowp';\n\n\t\t}\n\n\t\tvar precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\t\tvar maxPrecision = getMaxPrecision( precision );\n\n\t\tif ( maxPrecision !== precision ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\n\t\t\tprecision = maxPrecision;\n\n\t\t}\n\n\t\tvar logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true && !! extensions.get( 'EXT_frag_depth' );\n\n\t\tvar maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n\t\tvar maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\n\t\tvar maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\n\t\tvar maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\n\n\t\tvar maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n\t\tvar maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\n\t\tvar maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\n\t\tvar maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\n\n\t\tvar vertexTextures = maxVertexTextures > 0;\n\t\tvar floatFragmentTextures = !! extensions.get( 'OES_texture_float' );\n\t\tvar floatVertexTextures = vertexTextures && floatFragmentTextures;\n\n\t\treturn {\n\n\t\t\tgetMaxAnisotropy: getMaxAnisotropy,\n\t\t\tgetMaxPrecision: getMaxPrecision,\n\n\t\t\tprecision: precision,\n\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n\t\t\tmaxTextures: maxTextures,\n\t\t\tmaxVertexTextures: maxVertexTextures,\n\t\t\tmaxTextureSize: maxTextureSize,\n\t\t\tmaxCubemapSize: maxCubemapSize,\n\n\t\t\tmaxAttributes: maxAttributes,\n\t\t\tmaxVertexUniforms: maxVertexUniforms,\n\t\t\tmaxVaryings: maxVaryings,\n\t\t\tmaxFragmentUniforms: maxFragmentUniforms,\n\n\t\t\tvertexTextures: vertexTextures,\n\t\t\tfloatFragmentTextures: floatFragmentTextures,\n\t\t\tfloatVertexTextures: floatVertexTextures\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction ArrayCamera( array ) {\n\n\t\tPerspectiveCamera.call( this );\n\n\t\tthis.cameras = array || [];\n\n\t}\n\n\tArrayCamera.prototype = Object.assign( Object.create( PerspectiveCamera.prototype ), {\n\n\t\tconstructor: ArrayCamera,\n\n\t\tisArrayCamera: true\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebVRManager( renderer ) {\n\n\t\tvar scope = this;\n\n\t\tvar device = null;\n\t\tvar frameData = null;\n\n\t\tif ( 'VRFrameData' in window ) {\n\n\t\t\tframeData = new window.VRFrameData();\n\n\t\t}\n\n\t\tvar matrixWorldInverse = new Matrix4();\n\n\t\tvar standingMatrix = new Matrix4();\n\t\tvar standingMatrixInverse = new Matrix4();\n\n\t\tvar cameraL = new PerspectiveCamera();\n\t\tcameraL.bounds = new Vector4( 0.0, 0.0, 0.5, 1.0 );\n\t\tcameraL.layers.enable( 1 );\n\n\t\tvar cameraR = new PerspectiveCamera();\n\t\tcameraR.bounds = new Vector4( 0.5, 0.0, 0.5, 1.0 );\n\t\tcameraR.layers.enable( 2 );\n\n\t\tvar cameraVR = new ArrayCamera( [ cameraL, cameraR ] );\n\t\tcameraVR.layers.enable( 1 );\n\t\tcameraVR.layers.enable( 2 );\n\n\t\t//\n\n\t\tvar currentSize, currentPixelRatio;\n\n\t\tfunction onVRDisplayPresentChange() {\n\n\t\t\tif ( device.isPresenting ) {\n\n\t\t\t\tvar eyeParameters = device.getEyeParameters( 'left' );\n\t\t\t\tvar renderWidth = eyeParameters.renderWidth;\n\t\t\t\tvar renderHeight = eyeParameters.renderHeight;\n\n\t\t\t\tcurrentPixelRatio = renderer.getPixelRatio();\n\t\t\t\tcurrentSize = renderer.getSize();\n\n\t\t\t\trenderer.setDrawingBufferSize( renderWidth * 2, renderHeight, 1 );\n\n\t\t\t} else if ( scope.enabled ) {\n\n\t\t\t\trenderer.setDrawingBufferSize( currentSize.width, currentSize.height, currentPixelRatio );\n\n\t\t\t}\n\n\t\t}\n\n\t\twindow.addEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange, false );\n\n\t\t//\n\n\t\tthis.enabled = false;\n\t\tthis.standing = false;\n\n\t\tthis.getDevice = function () {\n\n\t\t\treturn device;\n\n\t\t};\n\n\t\tthis.setDevice = function ( value ) {\n\n\t\t\tif ( value !== undefined ) device = value;\n\n\t\t};\n\n\t\tthis.getCamera = function ( camera ) {\n\n\t\t\tif ( device === null ) return camera;\n\n\t\t\tdevice.depthNear = camera.near;\n\t\t\tdevice.depthFar = camera.far;\n\n\t\t\tdevice.getFrameData( frameData );\n\n\t\t\t//\n\n\t\t\tvar pose = frameData.pose;\n\n\t\t\tif ( pose.position !== null ) {\n\n\t\t\t\tcamera.position.fromArray( pose.position );\n\n\t\t\t} else {\n\n\t\t\t\tcamera.position.set( 0, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( pose.orientation !== null ) {\n\n\t\t\t\tcamera.quaternion.fromArray( pose.orientation );\n\n\t\t\t}\n\n\t\t\tcamera.updateMatrixWorld();\n\n\t\t\tvar stageParameters = device.stageParameters;\n\n\t\t\tif ( this.standing && stageParameters ) {\n\n\t\t\t\tstandingMatrix.fromArray( stageParameters.sittingToStandingTransform );\n\t\t\t\tstandingMatrixInverse.getInverse( standingMatrix );\n\n\t\t\t\tcamera.matrixWorld.multiply( standingMatrix );\n\t\t\t\tcamera.matrixWorldInverse.multiply( standingMatrixInverse );\n\n\t\t\t}\n\n\t\t\tif ( device.isPresenting === false ) return camera;\n\n\t\t\t//\n\n\t\t\tcameraVR.matrixWorld.copy( camera.matrixWorld );\n\t\t\tcameraVR.matrixWorldInverse.copy( camera.matrixWorldInverse );\n\n\t\t\tcameraL.matrixWorldInverse.fromArray( frameData.leftViewMatrix );\n\t\t\tcameraR.matrixWorldInverse.fromArray( frameData.rightViewMatrix );\n\n\t\t\tif ( this.standing && stageParameters ) {\n\n\t\t\t\tcameraL.matrixWorldInverse.multiply( standingMatrixInverse );\n\t\t\t\tcameraR.matrixWorldInverse.multiply( standingMatrixInverse );\n\n\t\t\t}\n\n\t\t\tvar parent = camera.parent;\n\n\t\t\tif ( parent !== null ) {\n\n\t\t\t\tmatrixWorldInverse.getInverse( parent.matrixWorld );\n\n\t\t\t\tcameraL.matrixWorldInverse.multiply( matrixWorldInverse );\n\t\t\t\tcameraR.matrixWorldInverse.multiply( matrixWorldInverse );\n\n\t\t\t}\n\n\t\t\t// envMap and Mirror needs camera.matrixWorld\n\n\t\t\tcameraL.matrixWorld.getInverse( cameraL.matrixWorldInverse );\n\t\t\tcameraR.matrixWorld.getInverse( cameraR.matrixWorldInverse );\n\n\t\t\tcameraL.projectionMatrix.fromArray( frameData.leftProjectionMatrix );\n\t\t\tcameraR.projectionMatrix.fromArray( frameData.rightProjectionMatrix );\n\n\t\t\t// HACK @mrdoob\n\t\t\t// https://github.com/w3c/webvr/issues/203\n\n\t\t\tcameraVR.projectionMatrix.copy( cameraL.projectionMatrix );\n\n\t\t\t//\n\n\t\t\tvar layers = device.getLayers();\n\n\t\t\tif ( layers.length ) {\n\n\t\t\t\tvar layer = layers[ 0 ];\n\n\t\t\t\tif ( layer.leftBounds !== null && layer.leftBounds.length === 4 ) {\n\n\t\t\t\t\tcameraL.bounds.fromArray( layer.leftBounds );\n\n\t\t\t\t}\n\n\t\t\t\tif ( layer.rightBounds !== null && layer.rightBounds.length === 4 ) {\n\n\t\t\t\t\tcameraR.bounds.fromArray( layer.rightBounds );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn cameraVR;\n\n\t\t};\n\n\t\tthis.getStandingMatrix = function () {\n\n\t\t\treturn standingMatrix;\n\n\t\t};\n\n\t\tthis.submitFrame = function () {\n\n\t\t\tif ( device && device.isPresenting ) device.submitFrame();\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLExtensions( gl ) {\n\n\t\tvar extensions = {};\n\n\t\treturn {\n\n\t\t\tget: function ( name ) {\n\n\t\t\t\tif ( extensions[ name ] !== undefined ) {\n\n\t\t\t\t\treturn extensions[ name ];\n\n\t\t\t\t}\n\n\t\t\t\tvar extension;\n\n\t\t\t\tswitch ( name ) {\n\n\t\t\t\t\tcase 'WEBGL_depth_texture':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'WEBGL_compressed_texture_etc1':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_etc1' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\textension = gl.getExtension( name );\n\n\t\t\t\t}\n\n\t\t\t\tif ( extension === null ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\n\t\t\t\t}\n\n\t\t\t\textensions[ name ] = extension;\n\n\t\t\t\treturn extension;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author tschw\n\t */\n\n\tfunction WebGLClipping() {\n\n\t\tvar scope = this,\n\n\t\t\tglobalState = null,\n\t\t\tnumGlobalPlanes = 0,\n\t\t\tlocalClippingEnabled = false,\n\t\t\trenderingShadows = false,\n\n\t\t\tplane = new Plane(),\n\t\t\tviewNormalMatrix = new Matrix3(),\n\n\t\t\tuniform = { value: null, needsUpdate: false };\n\n\t\tthis.uniform = uniform;\n\t\tthis.numPlanes = 0;\n\t\tthis.numIntersection = 0;\n\n\t\tthis.init = function( planes, enableLocalClipping, camera ) {\n\n\t\t\tvar enabled =\n\t\t\t\tplanes.length !== 0 ||\n\t\t\t\tenableLocalClipping ||\n\t\t\t\t// enable state of previous frame - the clipping code has to\n\t\t\t\t// run another frame in order to reset the state:\n\t\t\t\tnumGlobalPlanes !== 0 ||\n\t\t\t\tlocalClippingEnabled;\n\n\t\t\tlocalClippingEnabled = enableLocalClipping;\n\n\t\t\tglobalState = projectPlanes( planes, camera, 0 );\n\t\t\tnumGlobalPlanes = planes.length;\n\n\t\t\treturn enabled;\n\n\t\t};\n\n\t\tthis.beginShadows = function() {\n\n\t\t\trenderingShadows = true;\n\t\t\tprojectPlanes( null );\n\n\t\t};\n\n\t\tthis.endShadows = function() {\n\n\t\t\trenderingShadows = false;\n\t\t\tresetGlobalState();\n\n\t\t};\n\n\t\tthis.setState = function( planes, clipIntersection, clipShadows, camera, cache, fromCache ) {\n\n\t\t\tif ( ! localClippingEnabled ||\n\t\t\t\t\tplanes === null || planes.length === 0 ||\n\t\t\t\t\trenderingShadows && ! clipShadows ) {\n\t\t\t\t// there's no local clipping\n\n\t\t\t\tif ( renderingShadows ) {\n\t\t\t\t\t// there's no global clipping\n\n\t\t\t\t\tprojectPlanes( null );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tresetGlobalState();\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t\t\t\t\tlGlobal = nGlobal * 4,\n\n\t\t\t\t\tdstArray = cache.clippingState || null;\n\n\t\t\t\tuniform.value = dstArray; // ensure unique state\n\n\t\t\t\tdstArray = projectPlanes( planes, camera, lGlobal, fromCache );\n\n\t\t\t\tfor ( var i = 0; i !== lGlobal; ++ i ) {\n\n\t\t\t\t\tdstArray[ i ] = globalState[ i ];\n\n\t\t\t\t}\n\n\t\t\t\tcache.clippingState = dstArray;\n\t\t\t\tthis.numIntersection = clipIntersection ? this.numPlanes : 0;\n\t\t\t\tthis.numPlanes += nGlobal;\n\n\t\t\t}\n\n\n\t\t};\n\n\t\tfunction resetGlobalState() {\n\n\t\t\tif ( uniform.value !== globalState ) {\n\n\t\t\t\tuniform.value = globalState;\n\t\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\n\t\t\t}\n\n\t\t\tscope.numPlanes = numGlobalPlanes;\n\t\t\tscope.numIntersection = 0;\n\n\t\t}\n\n\t\tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\n\n\t\t\tvar nPlanes = planes !== null ? planes.length : 0,\n\t\t\t\tdstArray = null;\n\n\t\t\tif ( nPlanes !== 0 ) {\n\n\t\t\t\tdstArray = uniform.value;\n\n\t\t\t\tif ( skipTransform !== true || dstArray === null ) {\n\n\t\t\t\t\tvar flatSize = dstOffset + nPlanes * 4,\n\t\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\n\t\t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\n\n\t\t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\n\n\t\t\t\t\t\tdstArray = new Float32Array( flatSize );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i = 0, i4 = dstOffset;\n\t\t\t\t\t\t\t\t\t\ti !== nPlanes; ++ i, i4 += 4 ) {\n\n\t\t\t\t\t\tplane.copy( planes[ i ] ).\n\t\t\t\t\t\t\t\tapplyMatrix4( viewMatrix, viewNormalMatrix );\n\n\t\t\t\t\t\tplane.normal.toArray( dstArray, i4 );\n\t\t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tuniform.value = dstArray;\n\t\t\t\tuniform.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tscope.numPlanes = nPlanes;\n\t\t\t\n\t\t\treturn dstArray;\n\n\t\t}\n\n\t}\n\n\t// import { Sphere } from '../math/Sphere';\n\t/**\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author szimek / https://github.com/szimek/\n\t * @author tschw\n\t */\n\n\tfunction WebGLRenderer( parameters ) {\n\n\t\tconsole.log( 'THREE.WebGLRenderer', REVISION );\n\n\t\tparameters = parameters || {};\n\n\t\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),\n\t\t\t_context = parameters.context !== undefined ? parameters.context : null,\n\n\t\t\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t\t\t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t\t\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t\t\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t\t\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t\t\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false;\n\n\t\tvar lights = [];\n\n\t\tvar currentRenderList = null;\n\n\t\tvar morphInfluences = new Float32Array( 8 );\n\n\t\tvar sprites = [];\n\t\tvar lensFlares = [];\n\n\t\t// public properties\n\n\t\tthis.domElement = _canvas;\n\t\tthis.context = null;\n\n\t\t// clearing\n\n\t\tthis.autoClear = true;\n\t\tthis.autoClearColor = true;\n\t\tthis.autoClearDepth = true;\n\t\tthis.autoClearStencil = true;\n\n\t\t// scene graph\n\n\t\tthis.sortObjects = true;\n\n\t\t// user-defined clipping\n\n\t\tthis.clippingPlanes = [];\n\t\tthis.localClippingEnabled = false;\n\n\t\t// physically based shading\n\n\t\tthis.gammaFactor = 2.0;\t// for backwards compatibility\n\t\tthis.gammaInput = false;\n\t\tthis.gammaOutput = false;\n\n\t\t// physical lights\n\n\t\tthis.physicallyCorrectLights = false;\n\n\t\t// tone mapping\n\n\t\tthis.toneMapping = LinearToneMapping;\n\t\tthis.toneMappingExposure = 1.0;\n\t\tthis.toneMappingWhitePoint = 1.0;\n\n\t\t// morphs\n\n\t\tthis.maxMorphTargets = 8;\n\t\tthis.maxMorphNormals = 4;\n\n\t\t// internal properties\n\n\t\tvar _this = this,\n\n\t\t\t// internal state cache\n\n\t\t\t_currentProgram = null,\n\t\t\t_currentRenderTarget = null,\n\t\t\t_currentFramebuffer = null,\n\t\t\t_currentMaterialId = - 1,\n\t\t\t_currentGeometryProgram = '',\n\n\t\t\t_currentCamera = null,\n\t\t\t_currentArrayCamera = null,\n\n\t\t\t_currentScissor = new Vector4(),\n\t\t\t_currentScissorTest = null,\n\n\t\t\t_currentViewport = new Vector4(),\n\n\t\t\t//\n\n\t\t\t_usedTextureUnits = 0,\n\n\t\t\t//\n\n\t\t\t_width = _canvas.width,\n\t\t\t_height = _canvas.height,\n\n\t\t\t_pixelRatio = 1,\n\n\t\t\t_scissor = new Vector4( 0, 0, _width, _height ),\n\t\t\t_scissorTest = false,\n\n\t\t\t_viewport = new Vector4( 0, 0, _width, _height ),\n\n\t\t\t// frustum\n\n\t\t\t_frustum = new Frustum(),\n\n\t\t\t// clipping\n\n\t\t\t_clipping = new WebGLClipping(),\n\t\t\t_clippingEnabled = false,\n\t\t\t_localClippingEnabled = false,\n\n\t\t\t// camera matrices cache\n\n\t\t\t_projScreenMatrix = new Matrix4(),\n\n\t\t\t_vector3 = new Vector3(),\n\t\t\t_matrix4 = new Matrix4(),\n\t\t\t_matrix42 = new Matrix4(),\n\n\t\t\t// light arrays cache\n\n\t\t\t_lights = {\n\n\t\t\t\thash: '',\n\n\t\t\t\tambient: [ 0, 0, 0 ],\n\t\t\t\tdirectional: [],\n\t\t\t\tdirectionalShadowMap: [],\n\t\t\t\tdirectionalShadowMatrix: [],\n\t\t\t\tspot: [],\n\t\t\t\tspotShadowMap: [],\n\t\t\t\tspotShadowMatrix: [],\n\t\t\t\trectArea: [],\n\t\t\t\tpoint: [],\n\t\t\t\tpointShadowMap: [],\n\t\t\t\tpointShadowMatrix: [],\n\t\t\t\themi: [],\n\n\t\t\t\tshadows: []\n\n\t\t\t},\n\n\t\t\t// info\n\n\t\t\t_infoMemory = {\n\t\t\t\tgeometries: 0,\n\t\t\t\ttextures: 0\n\t\t\t},\n\n\t\t\t_infoRender = {\n\n\t\t\t\tframe: 0,\n\t\t\t\tcalls: 0,\n\t\t\t\tvertices: 0,\n\t\t\t\tfaces: 0,\n\t\t\t\tpoints: 0\n\n\t\t\t};\n\n\t\tthis.info = {\n\n\t\t\trender: _infoRender,\n\t\t\tmemory: _infoMemory,\n\t\t\tprograms: null\n\n\t\t};\n\n\n\t\t// initialize\n\n\t\tvar _gl;\n\n\t\ttry {\n\n\t\t\tvar contextAttributes = {\n\t\t\t\talpha: _alpha,\n\t\t\t\tdepth: _depth,\n\t\t\t\tstencil: _stencil,\n\t\t\t\tantialias: _antialias,\n\t\t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer\n\t\t\t};\n\n\t\t\t_gl = _context || _canvas.getContext( 'webgl', contextAttributes ) || _canvas.getContext( 'experimental-webgl', contextAttributes );\n\n\t\t\tif ( _gl === null ) {\n\n\t\t\t\tif ( _canvas.getContext( 'webgl' ) !== null ) {\n\n\t\t\t\t\tthrow 'Error creating WebGL context with your selected attributes.';\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow 'Error creating WebGL context.';\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\t\t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\n\n\t\t\t\t_gl.getShaderPrecisionFormat = function () {\n\n\t\t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer: ' + error );\n\n\t\t}\n\n\t\tvar extensions = new WebGLExtensions( _gl );\n\n\t\textensions.get( 'WEBGL_depth_texture' );\n\t\textensions.get( 'OES_texture_float' );\n\t\textensions.get( 'OES_texture_float_linear' );\n\t\textensions.get( 'OES_texture_half_float' );\n\t\textensions.get( 'OES_texture_half_float_linear' );\n\t\textensions.get( 'OES_standard_derivatives' );\n\t\textensions.get( 'ANGLE_instanced_arrays' );\n\n\t\tif ( extensions.get( 'OES_element_index_uint' ) ) {\n\n\t\t\tBufferGeometry.MaxIndex = 4294967296;\n\n\t\t}\n\n\t\tvar capabilities = new WebGLCapabilities( _gl, extensions, parameters );\n\n\t\tvar state = new WebGLState( _gl, extensions, paramThreeToGL );\n\n\t\tvar properties = new WebGLProperties();\n\t\tvar textures = new WebGLTextures( _gl, extensions, state, properties, capabilities, paramThreeToGL, _infoMemory );\n\t\tvar attributes = new WebGLAttributes( _gl );\n\t\tvar geometries = new WebGLGeometries( _gl, attributes, _infoMemory );\n\t\tvar objects = new WebGLObjects( _gl, geometries, _infoRender );\n\t\tvar programCache = new WebGLPrograms( this, capabilities );\n\t\tvar lightCache = new WebGLLights();\n\t\tvar renderLists = new WebGLRenderLists();\n\n\t\tvar background = new WebGLBackground( this, state, objects, _premultipliedAlpha );\n\t\tvar vr = new WebVRManager( this );\n\n\t\tthis.info.programs = programCache.programs;\n\n\t\tvar bufferRenderer = new WebGLBufferRenderer( _gl, extensions, _infoRender );\n\t\tvar indexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, _infoRender );\n\n\t\t//\n\n\t\tfunction getTargetPixelRatio() {\n\n\t\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\n\t\t}\n\n\t\tfunction setDefaultGLState() {\n\n\t\t\tstate.init();\n\n\t\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );\n\t\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );\n\n\t\t}\n\n\t\tfunction resetGLState() {\n\n\t\t\t_currentProgram = null;\n\t\t\t_currentCamera = null;\n\n\t\t\t_currentGeometryProgram = '';\n\t\t\t_currentMaterialId = - 1;\n\n\t\t\tstate.reset();\n\n\t\t}\n\n\t\tsetDefaultGLState();\n\n\t\tthis.context = _gl;\n\t\tthis.capabilities = capabilities;\n\t\tthis.extensions = extensions;\n\t\tthis.properties = properties;\n\t\tthis.renderLists = renderLists;\n\t\tthis.state = state;\n\t\tthis.vr = vr;\n\n\t\t// shadow map\n\n\t\tvar shadowMap = new WebGLShadowMap( this, _lights, objects, capabilities );\n\n\t\tthis.shadowMap = shadowMap;\n\n\n\t\t// Plugins\n\n\t\tvar spritePlugin = new SpritePlugin( this, sprites );\n\t\tvar lensFlarePlugin = new LensFlarePlugin( this, lensFlares );\n\n\t\t// API\n\n\t\tthis.getContext = function () {\n\n\t\t\treturn _gl;\n\n\t\t};\n\n\t\tthis.getContextAttributes = function () {\n\n\t\t\treturn _gl.getContextAttributes();\n\n\t\t};\n\n\t\tthis.forceContextLoss = function () {\n\n\t\t\tvar extension = extensions.get( 'WEBGL_lose_context' );\n\t\t\tif ( extension ) extension.loseContext();\n\n\t\t};\n\n\t\tthis.getMaxAnisotropy = function () {\n\n\t\t\treturn capabilities.getMaxAnisotropy();\n\n\t\t};\n\n\t\tthis.getPrecision = function () {\n\n\t\t\treturn capabilities.precision;\n\n\t\t};\n\n\t\tthis.getPixelRatio = function () {\n\n\t\t\treturn _pixelRatio;\n\n\t\t};\n\n\t\tthis.setPixelRatio = function ( value ) {\n\n\t\t\tif ( value === undefined ) return;\n\n\t\t\t_pixelRatio = value;\n\n\t\t\tthis.setSize( _width, _height, false );\n\n\t\t};\n\n\t\tthis.getSize = function () {\n\n\t\t\treturn {\n\t\t\t\twidth: _width,\n\t\t\t\theight: _height\n\t\t\t};\n\n\t\t};\n\n\t\tthis.setSize = function ( width, height, updateStyle ) {\n\n\t\t\tvar device = vr.getDevice();\n\n\t\t\tif ( device && device.isPresenting ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\n\t\t\t_canvas.width = width * _pixelRatio;\n\t\t\t_canvas.height = height * _pixelRatio;\n\n\t\t\tif ( updateStyle !== false ) {\n\n\t\t\t\t_canvas.style.width = width + 'px';\n\t\t\t\t_canvas.style.height = height + 'px';\n\n\t\t\t}\n\n\t\t\tthis.setViewport( 0, 0, width, height );\n\n\t\t};\n\n\t\tthis.getDrawingBufferSize = function () {\n\n\t\t\treturn {\n\t\t\t\twidth: _width * _pixelRatio,\n\t\t\t\theight: _height * _pixelRatio\n\t\t\t};\n\n\t\t};\n\n\t\tthis.setDrawingBufferSize = function ( width, height, pixelRatio ) {\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\n\t\t\t_pixelRatio = pixelRatio;\n\n\t\t\t_canvas.width = width * pixelRatio;\n\t\t\t_canvas.height = height * pixelRatio;\n\n\t\t\tthis.setViewport( 0, 0, width, height );\n\n\t\t};\n\n\t\tthis.setViewport = function ( x, y, width, height ) {\n\n\t\t\t_viewport.set( x, _height - y - height, width, height );\n\t\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );\n\n\t\t};\n\n\t\tthis.setScissor = function ( x, y, width, height ) {\n\n\t\t\t_scissor.set( x, _height - y - height, width, height );\n\t\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );\n\n\t\t};\n\n\t\tthis.setScissorTest = function ( boolean ) {\n\n\t\t\tstate.setScissorTest( _scissorTest = boolean );\n\n\t\t};\n\n\t\t// Clearing\n\n\t\tthis.getClearColor = background.getClearColor;\n\t\tthis.setClearColor = background.setClearColor;\n\t\tthis.getClearAlpha = background.getClearAlpha;\n\t\tthis.setClearAlpha = background.setClearAlpha;\n\n\t\tthis.clear = function ( color, depth, stencil ) {\n\n\t\t\tvar bits = 0;\n\n\t\t\tif ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;\n\t\t\tif ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;\n\t\t\tif ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;\n\n\t\t\t_gl.clear( bits );\n\n\t\t};\n\n\t\tthis.clearColor = function () {\n\n\t\t\tthis.clear( true, false, false );\n\n\t\t};\n\n\t\tthis.clearDepth = function () {\n\n\t\t\tthis.clear( false, true, false );\n\n\t\t};\n\n\t\tthis.clearStencil = function () {\n\n\t\t\tthis.clear( false, false, true );\n\n\t\t};\n\n\t\tthis.clearTarget = function ( renderTarget, color, depth, stencil ) {\n\n\t\t\tthis.setRenderTarget( renderTarget );\n\t\t\tthis.clear( color, depth, stencil );\n\n\t\t};\n\n\t\t// Reset\n\n\t\tthis.resetGLState = resetGLState;\n\n\t\tthis.dispose = function () {\n\n\t\t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\n\n\t\t\trenderLists.dispose();\n\n\t\t};\n\n\t\t// Events\n\n\t\tfunction onContextLost( event ) {\n\n\t\t\tevent.preventDefault();\n\n\t\t\tresetGLState();\n\t\t\tsetDefaultGLState();\n\n\t\t\tproperties.clear();\n\t\t\tobjects.clear();\n\n\t\t}\n\n\t\tfunction onMaterialDispose( event ) {\n\n\t\t\tvar material = event.target;\n\n\t\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\n\n\t\t\tdeallocateMaterial( material );\n\n\t\t}\n\n\t\t// Buffer deallocation\n\n\t\tfunction deallocateMaterial( material ) {\n\n\t\t\treleaseMaterialProgramReference( material );\n\n\t\t\tproperties.remove( material );\n\n\t\t}\n\n\n\t\tfunction releaseMaterialProgramReference( material ) {\n\n\t\t\tvar programInfo = properties.get( material ).program;\n\n\t\t\tmaterial.program = undefined;\n\n\t\t\tif ( programInfo !== undefined ) {\n\n\t\t\t\tprogramCache.releaseProgram( programInfo );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Buffer rendering\n\n\t\tfunction renderObjectImmediate( object, program, material ) {\n\n\t\t\tobject.render( function ( object ) {\n\n\t\t\t\t_this.renderBufferImmediate( object, program, material );\n\n\t\t\t} );\n\n\t\t}\n\n\t\tthis.renderBufferImmediate = function ( object, program, material ) {\n\n\t\t\tstate.initAttributes();\n\n\t\t\tvar buffers = properties.get( object );\n\n\t\t\tif ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();\n\t\t\tif ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();\n\t\t\tif ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();\n\t\t\tif ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();\n\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tif ( object.hasPositions ) {\n\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );\n\n\t\t\t\tstate.enableAttribute( programAttributes.position );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.position, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasNormals ) {\n\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );\n\n\t\t\t\tif ( ! material.isMeshPhongMaterial &&\n\t\t\t\t\t! material.isMeshStandardMaterial &&\n\t\t\t\t\t! material.isMeshNormalMaterial &&\n\t\t\t\t\tmaterial.shading === FlatShading ) {\n\n\t\t\t\t\tfor ( var i = 0, l = object.count * 3; i < l; i += 9 ) {\n\n\t\t\t\t\t\tvar array = object.normalArray;\n\n\t\t\t\t\t\tvar nx = ( array[ i + 0 ] + array[ i + 3 ] + array[ i + 6 ] ) / 3;\n\t\t\t\t\t\tvar ny = ( array[ i + 1 ] + array[ i + 4 ] + array[ i + 7 ] ) / 3;\n\t\t\t\t\t\tvar nz = ( array[ i + 2 ] + array[ i + 5 ] + array[ i + 8 ] ) / 3;\n\n\t\t\t\t\t\tarray[ i + 0 ] = nx;\n\t\t\t\t\t\tarray[ i + 1 ] = ny;\n\t\t\t\t\t\tarray[ i + 2 ] = nz;\n\n\t\t\t\t\t\tarray[ i + 3 ] = nx;\n\t\t\t\t\t\tarray[ i + 4 ] = ny;\n\t\t\t\t\t\tarray[ i + 5 ] = nz;\n\n\t\t\t\t\t\tarray[ i + 6 ] = nx;\n\t\t\t\t\t\tarray[ i + 7 ] = ny;\n\t\t\t\t\t\tarray[ i + 8 ] = nz;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );\n\n\t\t\t\tstate.enableAttribute( programAttributes.normal );\n\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.normal, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasUvs && material.map ) {\n\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );\n\n\t\t\t\tstate.enableAttribute( programAttributes.uv );\n\n\t\t\t\t_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasColors && material.vertexColors !== NoColors ) {\n\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );\n\n\t\t\t\tstate.enableAttribute( programAttributes.color );\n\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.color, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tstate.disableUnusedAttributes();\n\n\t\t\t_gl.drawArrays( _gl.TRIANGLES, 0, object.count );\n\n\t\t\tobject.count = 0;\n\n\t\t};\n\n\t\tfunction absNumericalSort( a, b ) {\n\n\t\t\treturn Math.abs( b[ 0 ] ) - Math.abs( a[ 0 ] );\n\n\t\t}\n\n\t\tthis.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {\n\n\t\t\tstate.setMaterial( material );\n\n\t\t\tvar program = setProgram( camera, fog, material, object );\n\t\t\tvar geometryProgram = geometry.id + '_' + program.id + '_' + ( material.wireframe === true );\n\n\t\t\tvar updateBuffers = false;\n\n\t\t\tif ( geometryProgram !== _currentGeometryProgram ) {\n\n\t\t\t\t_currentGeometryProgram = geometryProgram;\n\t\t\t\tupdateBuffers = true;\n\n\t\t\t}\n\n\t\t\t// morph targets\n\n\t\t\tvar morphTargetInfluences = object.morphTargetInfluences;\n\n\t\t\tif ( morphTargetInfluences !== undefined ) {\n\n\t\t\t\t// TODO Remove allocations\n\n\t\t\t\tvar activeInfluences = [];\n\n\t\t\t\tfor ( var i = 0, l = morphTargetInfluences.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar influence = morphTargetInfluences[ i ];\n\t\t\t\t\tactiveInfluences.push( [ influence, i ] );\n\n\t\t\t\t}\n\n\t\t\t\tactiveInfluences.sort( absNumericalSort );\n\n\t\t\t\tif ( activeInfluences.length > 8 ) {\n\n\t\t\t\t\tactiveInfluences.length = 8;\n\n\t\t\t\t}\n\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\n\t\t\t\tfor ( var i = 0, l = activeInfluences.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar influence = activeInfluences[ i ];\n\t\t\t\t\tmorphInfluences[ i ] = influence[ 0 ];\n\n\t\t\t\t\tif ( influence[ 0 ] !== 0 ) {\n\n\t\t\t\t\t\tvar index = influence[ 1 ];\n\n\t\t\t\t\t\tif ( material.morphTargets === true && morphAttributes.position ) geometry.addAttribute( 'morphTarget' + i, morphAttributes.position[ index ] );\n\t\t\t\t\t\tif ( material.morphNormals === true && morphAttributes.normal ) geometry.addAttribute( 'morphNormal' + i, morphAttributes.normal[ index ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( material.morphTargets === true ) geometry.removeAttribute( 'morphTarget' + i );\n\t\t\t\t\t\tif ( material.morphNormals === true ) geometry.removeAttribute( 'morphNormal' + i );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i = activeInfluences.length, il = morphInfluences.length; i < il; i ++ ) {\n\n\t\t\t\t\tmorphInfluences[ i ] = 0.0;\n\n\t\t\t\t}\n\n\t\t\t\tprogram.getUniforms().setValue( _gl, 'morphTargetInfluences', morphInfluences );\n\n\t\t\t\tupdateBuffers = true;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar index = geometry.index;\n\t\t\tvar position = geometry.attributes.position;\n\t\t\tvar rangeFactor = 1;\n\n\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\tindex = geometries.getWireframeAttribute( geometry );\n\t\t\t\trangeFactor = 2;\n\n\t\t\t}\n\n\t\t\tvar attribute;\n\t\t\tvar renderer = bufferRenderer;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tattribute = attributes.get( index );\n\n\t\t\t\trenderer = indexedBufferRenderer;\n\t\t\t\trenderer.setIndex( attribute );\n\n\t\t\t}\n\n\t\t\tif ( updateBuffers ) {\n\n\t\t\t\tsetupVertexAttributes( material, program, geometry );\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, attribute.buffer );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar dataCount = 0;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tdataCount = index.count;\n\n\t\t\t} else if ( position !== undefined ) {\n\n\t\t\t\tdataCount = position.count;\n\n\t\t\t}\n\n\t\t\tvar rangeStart = geometry.drawRange.start * rangeFactor;\n\t\t\tvar rangeCount = geometry.drawRange.count * rangeFactor;\n\n\t\t\tvar groupStart = group !== null ? group.start * rangeFactor : 0;\n\t\t\tvar groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\n\t\t\tvar drawStart = Math.max( rangeStart, groupStart );\n\t\t\tvar drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\n\n\t\t\tvar drawCount = Math.max( 0, drawEnd - drawStart + 1 );\n\n\t\t\tif ( drawCount === 0 ) return;\n\n\t\t\t//\n\n\t\t\tif ( object.isMesh ) {\n\n\t\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\n\t\t\t\t\trenderer.setMode( _gl.LINES );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tswitch ( object.drawMode ) {\n\n\t\t\t\t\t\tcase TrianglesDrawMode:\n\t\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLES );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase TriangleStripDrawMode:\n\t\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_STRIP );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase TriangleFanDrawMode:\n\t\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_FAN );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\n\t\t\t} else if ( object.isLine ) {\n\n\t\t\t\tvar lineWidth = material.linewidth;\n\n\t\t\t\tif ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material\n\n\t\t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\n\n\t\t\t\tif ( object.isLineSegments ) {\n\n\t\t\t\t\trenderer.setMode( _gl.LINES );\n\n\t\t\t\t} else if ( object.isLineLoop ) {\n\n\t\t\t\t\trenderer.setMode( _gl.LINE_LOOP );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderer.setMode( _gl.LINE_STRIP );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isPoints ) {\n\n\t\t\t\trenderer.setMode( _gl.POINTS );\n\n\t\t\t}\n\n\t\t\tif ( geometry && geometry.isInstancedBufferGeometry ) {\n\n\t\t\t\tif ( geometry.maxInstancedCount > 0 ) {\n\n\t\t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\trenderer.render( drawStart, drawCount );\n\n\t\t\t}\n\n\t\t};\n\n\t\tfunction setupVertexAttributes( material, program, geometry, startIndex ) {\n\n\t\t\tif ( geometry && geometry.isInstancedBufferGeometry ) {\n\n\t\t\t\tif ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( startIndex === undefined ) startIndex = 0;\n\n\t\t\tstate.initAttributes();\n\n\t\t\tvar geometryAttributes = geometry.attributes;\n\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\n\n\t\t\tfor ( var name in programAttributes ) {\n\n\t\t\t\tvar programAttribute = programAttributes[ name ];\n\n\t\t\t\tif ( programAttribute >= 0 ) {\n\n\t\t\t\t\tvar geometryAttribute = geometryAttributes[ name ];\n\n\t\t\t\t\tif ( geometryAttribute !== undefined ) {\n\n\t\t\t\t\t\tvar normalized = geometryAttribute.normalized;\n\t\t\t\t\t\tvar size = geometryAttribute.itemSize;\n\n\t\t\t\t\t\tvar attribute = attributes.get( geometryAttribute );\n\n\t\t\t\t\t\tvar buffer = attribute.buffer;\n\t\t\t\t\t\tvar type = attribute.type;\n\t\t\t\t\t\tvar bytesPerElement = attribute.bytesPerElement;\n\n\t\t\t\t\t\tif ( geometryAttribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\t\t\tvar data = geometryAttribute.data;\n\t\t\t\t\t\t\tvar stride = data.stride;\n\t\t\t\t\t\t\tvar offset = geometryAttribute.offset;\n\n\t\t\t\t\t\t\tif ( data && data.isInstancedInterleavedBuffer ) {\n\n\t\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute );\n\n\t\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n\t\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = data.meshPerAttribute * data.count;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * bytesPerElement, ( startIndex * stride + offset ) * bytesPerElement );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( geometryAttribute.isInstancedBufferAttribute ) {\n\n\t\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute );\n\n\t\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n\t\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, startIndex * size * bytesPerElement );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\n\n\t\t\t\t\t\tvar value = materialDefaultAttributeValues[ name ];\n\n\t\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\t\tswitch ( value.length ) {\n\n\t\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib2fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib3fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib4fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib1fv( programAttribute, value );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.disableUnusedAttributes();\n\n\t\t}\n\n\t\t// Compile\n\n\t\tthis.compile = function ( scene, camera ) {\n\n\t\t\tlights = [];\n\n\t\t\tscene.traverse( function ( object ) {\n\n\t\t\t\tif ( object.isLight ) {\n\n\t\t\t\t\tlights.push( object );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tsetupLights( lights, camera );\n\n\t\t\tscene.traverse( function ( object ) {\n\n\t\t\t\tif ( object.material ) {\n\n\t\t\t\t\tif ( Array.isArray( object.material ) ) {\n\n\t\t\t\t\t\tfor ( var i = 0; i < object.material.length; i ++ ) {\n\n\t\t\t\t\t\t\tinitMaterial( object.material[ i ], scene.fog, object );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tinitMaterial( object.material, scene.fog, object );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t};\n\n\t\t// Rendering\n\n\t\tthis.animate = function ( callback ) {\n\n\t\t\tfunction onFrame() {\n\n\t\t\t\tcallback();\n\n\t\t\t\t( vr.getDevice() || window ).requestAnimationFrame( onFrame );\n\n\t\t\t}\n\n\t\t\t( vr.getDevice() || window ).requestAnimationFrame( onFrame );\n\n\t\t};\n\n\t\tthis.render = function ( scene, camera, renderTarget, forceClear ) {\n\n\t\t\tif ( ! ( camera && camera.isCamera ) ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// reset caching for this frame\n\n\t\t\t_currentGeometryProgram = '';\n\t\t\t_currentMaterialId = - 1;\n\t\t\t_currentCamera = null;\n\n\t\t\t// update scene graph\n\n\t\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\n\t\t\t// update camera matrices and frustum\n\n\t\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\n\t\t\tif ( vr.enabled ) {\n\n\t\t\t\tcamera = vr.getCamera( camera );\n\n\t\t\t}\n\n\t\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\n\n\t\t\tlights.length = 0;\n\t\t\tsprites.length = 0;\n\t\t\tlensFlares.length = 0;\n\n\t\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t\t_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );\n\n\t\t\tcurrentRenderList = renderLists.get( scene, camera );\n\t\t\tcurrentRenderList.init();\n\n\t\t\tprojectObject( scene, camera, _this.sortObjects );\n\n\t\t\tcurrentRenderList.finish();\n\n\t\t\tif ( _this.sortObjects === true ) {\n\n\t\t\t\tcurrentRenderList.sort();\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( _clippingEnabled ) _clipping.beginShadows();\n\n\t\t\tsetupShadows( lights );\n\n\t\t\tshadowMap.render( scene, camera );\n\n\t\t\tsetupLights( lights, camera );\n\n\t\t\tif ( _clippingEnabled ) _clipping.endShadows();\n\n\t\t\t//\n\n\t\t\t_infoRender.frame ++;\n\t\t\t_infoRender.calls = 0;\n\t\t\t_infoRender.vertices = 0;\n\t\t\t_infoRender.faces = 0;\n\t\t\t_infoRender.points = 0;\n\n\t\t\tif ( renderTarget === undefined ) {\n\n\t\t\t\trenderTarget = null;\n\n\t\t\t}\n\n\t\t\tthis.setRenderTarget( renderTarget );\n\n\t\t\t//\n\n\t\t\tbackground.render( scene, camera, forceClear );\n\n\t\t\t// render scene\n\n\t\t\tvar opaqueObjects = currentRenderList.opaque;\n\t\t\tvar transparentObjects = currentRenderList.transparent;\n\n\t\t\tif ( scene.overrideMaterial ) {\n\n\t\t\t\tvar overrideMaterial = scene.overrideMaterial;\n\n\t\t\t\tif ( opaqueObjects.length ) renderObjects( opaqueObjects, scene, camera, overrideMaterial );\n\t\t\t\tif ( transparentObjects.length ) renderObjects( transparentObjects, scene, camera, overrideMaterial );\n\n\t\t\t} else {\n\n\t\t\t\t// opaque pass (front-to-back order)\n\n\t\t\t\tif ( opaqueObjects.length ) renderObjects( opaqueObjects, scene, camera );\n\n\t\t\t\t// transparent pass (back-to-front order)\n\n\t\t\t\tif ( transparentObjects.length ) renderObjects( transparentObjects, scene, camera );\n\n\t\t\t}\n\n\t\t\t// custom render plugins (post pass)\n\n\t\t\tspritePlugin.render( scene, camera );\n\t\t\tlensFlarePlugin.render( scene, camera, _currentViewport );\n\n\t\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\n\t\t\tif ( renderTarget ) {\n\n\t\t\t\ttextures.updateRenderTargetMipmap( renderTarget );\n\n\t\t\t}\n\n\t\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\t\t\tstate.buffers.depth.setTest( true );\n\t\t\tstate.buffers.depth.setMask( true );\n\t\t\tstate.buffers.color.setMask( true );\n\n\t\t\tif ( camera.isArrayCamera ) {\n\n\t\t\t\t_this.setScissorTest( false );\n\n\t\t\t}\n\n\t\t\tif ( vr.enabled ) {\n\n\t\t\t\tvr.submitFrame();\n\n\t\t\t}\n\n\t\t\t// _gl.finish();\n\n\t\t};\n\n\t\t/*\n\t\t// TODO Duplicated code (Frustum)\n\n\t\tvar _sphere = new Sphere();\n\n\t\tfunction isObjectViewable( object ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( geometry.boundingSphere === null )\n\t\t\t\tgeometry.computeBoundingSphere();\n\n\t\t\t_sphere.copy( geometry.boundingSphere ).\n\t\t\tapplyMatrix4( object.matrixWorld );\n\n\t\t\treturn isSphereViewable( _sphere );\n\n\t\t}\n\n\t\tfunction isSpriteViewable( sprite ) {\n\n\t\t\t_sphere.center.set( 0, 0, 0 );\n\t\t\t_sphere.radius = 0.7071067811865476;\n\t\t\t_sphere.applyMatrix4( sprite.matrixWorld );\n\n\t\t\treturn isSphereViewable( _sphere );\n\n\t\t}\n\n\t\tfunction isSphereViewable( sphere ) {\n\n\t\t\tif ( ! _frustum.intersectsSphere( sphere ) ) return false;\n\n\t\t\tvar numPlanes = _clipping.numPlanes;\n\n\t\t\tif ( numPlanes === 0 ) return true;\n\n\t\t\tvar planes = _this.clippingPlanes,\n\n\t\t\t\tcenter = sphere.center,\n\t\t\t\tnegRad = - sphere.radius,\n\t\t\t\ti = 0;\n\n\t\t\tdo {\n\n\t\t\t\t// out when deeper than radius in the negative halfspace\n\t\t\t\tif ( planes[ i ].distanceToPoint( center ) < negRad ) return false;\n\n\t\t\t} while ( ++ i !== numPlanes );\n\n\t\t\treturn true;\n\n\t\t}\n\t\t*/\n\n\t\tfunction projectObject( object, camera, sortObjects ) {\n\n\t\t\tif ( ! object.visible ) return;\n\n\t\t\tvar visible = object.layers.test( camera.layers );\n\n\t\t\tif ( visible ) {\n\n\t\t\t\tif ( object.isLight ) {\n\n\t\t\t\t\tlights.push( object );\n\n\t\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {\n\n\t\t\t\t\t\tsprites.push( object );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( object.isLensFlare ) {\n\n\t\t\t\t\tlensFlares.push( object );\n\n\t\t\t\t} else if ( object.isImmediateRenderObject ) {\n\n\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentRenderList.push( object, null, object.material, _vector3.z, null );\n\n\t\t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\n\n\t\t\t\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\t\t\t\tobject.skeleton.update();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {\n\n\t\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar geometry = objects.update( object );\n\t\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\t\tvar group = groups[ i ];\n\t\t\t\t\t\t\t\tvar groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, groupMaterial, _vector3.z, group );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, _vector3.z, null );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tprojectObject( children[ i ], camera, sortObjects );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction renderObjects( renderList, scene, camera, overrideMaterial ) {\n\n\t\t\tfor ( var i = 0, l = renderList.length; i < l; i ++ ) {\n\n\t\t\t\tvar renderItem = renderList[ i ];\n\n\t\t\t\tvar object = renderItem.object;\n\t\t\t\tvar geometry = renderItem.geometry;\n\t\t\t\tvar material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\n\t\t\t\tvar group = renderItem.group;\n\n\t\t\t\tif ( camera.isArrayCamera ) {\n\n\t\t\t\t\t_currentArrayCamera = camera;\n\n\t\t\t\t\tvar cameras = camera.cameras;\n\n\t\t\t\t\tfor ( var j = 0, jl = cameras.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar camera2 = cameras[ j ];\n\n\t\t\t\t\t\tif ( object.layers.test( camera2.layers ) ) {\n\n\t\t\t\t\t\t\tvar bounds = camera2.bounds;\n\n\t\t\t\t\t\t\tvar x = bounds.x * _width;\n\t\t\t\t\t\t\tvar y = bounds.y * _height;\n\t\t\t\t\t\t\tvar width = bounds.z * _width;\n\t\t\t\t\t\t\tvar height = bounds.w * _height;\n\n\t\t\t\t\t\t\t_this.setViewport( x, y, width, height );\n\t\t\t\t\t\t\t_this.setScissor( x, y, width, height );\n\t\t\t\t\t\t\t_this.setScissorTest( true );\n\n\t\t\t\t\t\t\trenderObject( object, scene, camera2, geometry, material, group );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_currentArrayCamera = null;\n\n\t\t\t\t\trenderObject( object, scene, camera, geometry, material, group );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction renderObject( object, scene, camera, geometry, material, group ) {\n\n\t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\n\t\t\tobject.onBeforeRender( _this, scene, camera, geometry, material, group );\n\n\t\t\tif ( object.isImmediateRenderObject ) {\n\n\t\t\t\tstate.setMaterial( material );\n\n\t\t\t\tvar program = setProgram( camera, scene.fog, material, object );\n\n\t\t\t\t_currentGeometryProgram = '';\n\n\t\t\t\trenderObjectImmediate( object, program, material );\n\n\t\t\t} else {\n\n\t\t\t\t_this.renderBufferDirect( camera, scene.fog, geometry, material, object, group );\n\n\t\t\t}\n\n\t\t\tobject.onAfterRender( _this, scene, camera, geometry, material, group );\n\n\t\t}\n\n\t\tfunction initMaterial( material, fog, object ) {\n\n\t\t\tvar materialProperties = properties.get( material );\n\n\t\t\tvar parameters = programCache.getParameters(\n\t\t\t\tmaterial, _lights, fog, _clipping.numPlanes, _clipping.numIntersection, object );\n\n\t\t\tvar code = programCache.getProgramCode( material, parameters );\n\n\t\t\tvar program = materialProperties.program;\n\t\t\tvar programChange = true;\n\n\t\t\tif ( program === undefined ) {\n\n\t\t\t\t// new material\n\t\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\n\n\t\t\t} else if ( program.code !== code ) {\n\n\t\t\t\t// changed glsl or parameters\n\t\t\t\treleaseMaterialProgramReference( material );\n\n\t\t\t} else if ( parameters.shaderID !== undefined ) {\n\n\t\t\t\t// same glsl and uniform list\n\t\t\t\treturn;\n\n\t\t\t} else {\n\n\t\t\t\t// only rebuild uniform list\n\t\t\t\tprogramChange = false;\n\n\t\t\t}\n\n\t\t\tif ( programChange ) {\n\n\t\t\t\tif ( parameters.shaderID ) {\n\n\t\t\t\t\tvar shader = ShaderLib[ parameters.shaderID ];\n\n\t\t\t\t\tmaterialProperties.shader = {\n\t\t\t\t\t\tname: material.type,\n\t\t\t\t\t\tuniforms: UniformsUtils.clone( shader.uniforms ),\n\t\t\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\t\t\tfragmentShader: shader.fragmentShader\n\t\t\t\t\t};\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmaterialProperties.shader = {\n\t\t\t\t\t\tname: material.type,\n\t\t\t\t\t\tuniforms: material.uniforms,\n\t\t\t\t\t\tvertexShader: material.vertexShader,\n\t\t\t\t\t\tfragmentShader: material.fragmentShader\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\tmaterial.onBeforeCompile( materialProperties.shader );\n\n\t\t\t\tprogram = programCache.acquireProgram( material, materialProperties.shader, parameters, code );\n\n\t\t\t\tmaterialProperties.program = program;\n\t\t\t\tmaterial.program = program;\n\n\t\t\t}\n\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tif ( material.morphTargets ) {\n\n\t\t\t\tmaterial.numSupportedMorphTargets = 0;\n\n\t\t\t\tfor ( var i = 0; i < _this.maxMorphTargets; i ++ ) {\n\n\t\t\t\t\tif ( programAttributes[ 'morphTarget' + i ] >= 0 ) {\n\n\t\t\t\t\t\tmaterial.numSupportedMorphTargets ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.morphNormals ) {\n\n\t\t\t\tmaterial.numSupportedMorphNormals = 0;\n\n\t\t\t\tfor ( var i = 0; i < _this.maxMorphNormals; i ++ ) {\n\n\t\t\t\t\tif ( programAttributes[ 'morphNormal' + i ] >= 0 ) {\n\n\t\t\t\t\t\tmaterial.numSupportedMorphNormals ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar uniforms = materialProperties.shader.uniforms;\n\n\t\t\tif ( ! material.isShaderMaterial &&\n\t\t\t\t! material.isRawShaderMaterial ||\n\t\t\t\tmaterial.clipping === true ) {\n\n\t\t\t\tmaterialProperties.numClippingPlanes = _clipping.numPlanes;\n\t\t\t\tmaterialProperties.numIntersection = _clipping.numIntersection;\n\t\t\t\tuniforms.clippingPlanes = _clipping.uniform;\n\n\t\t\t}\n\n\t\t\tmaterialProperties.fog = fog;\n\n\t\t\t// store the light setup it was created for\n\n\t\t\tmaterialProperties.lightsHash = _lights.hash;\n\n\t\t\tif ( material.lights ) {\n\n\t\t\t\t// wire up the material to this renderer's lighting state\n\n\t\t\t\tuniforms.ambientLightColor.value = _lights.ambient;\n\t\t\t\tuniforms.directionalLights.value = _lights.directional;\n\t\t\t\tuniforms.spotLights.value = _lights.spot;\n\t\t\t\tuniforms.rectAreaLights.value = _lights.rectArea;\n\t\t\t\tuniforms.pointLights.value = _lights.point;\n\t\t\t\tuniforms.hemisphereLights.value = _lights.hemi;\n\n\t\t\t\tuniforms.directionalShadowMap.value = _lights.directionalShadowMap;\n\t\t\t\tuniforms.directionalShadowMatrix.value = _lights.directionalShadowMatrix;\n\t\t\t\tuniforms.spotShadowMap.value = _lights.spotShadowMap;\n\t\t\t\tuniforms.spotShadowMatrix.value = _lights.spotShadowMatrix;\n\t\t\t\tuniforms.pointShadowMap.value = _lights.pointShadowMap;\n\t\t\t\tuniforms.pointShadowMatrix.value = _lights.pointShadowMatrix;\n\t\t\t\t// TODO (abelnation): add area lights shadow info to uniforms\n\n\t\t\t}\n\n\t\t\tvar progUniforms = materialProperties.program.getUniforms(),\n\t\t\t\tuniformsList =\n\t\t\t\t\tWebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\n\n\t\t\tmaterialProperties.uniformsList = uniformsList;\n\n\t\t}\n\n\t\tfunction setProgram( camera, fog, material, object ) {\n\n\t\t\t_usedTextureUnits = 0;\n\n\t\t\tvar materialProperties = properties.get( material );\n\n\t\t\tif ( _clippingEnabled ) {\n\n\t\t\t\tif ( _localClippingEnabled || camera !== _currentCamera ) {\n\n\t\t\t\t\tvar useCache =\n\t\t\t\t\t\tcamera === _currentCamera &&\n\t\t\t\t\t\tmaterial.id === _currentMaterialId;\n\n\t\t\t\t\t// we might want to call this function with some ClippingGroup\n\t\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t\t// (#8465, #8379)\n\t\t\t\t\t_clipping.setState(\n\t\t\t\t\t\tmaterial.clippingPlanes, material.clipIntersection, material.clipShadows,\n\t\t\t\t\t\tcamera, materialProperties, useCache );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.needsUpdate === false ) {\n\n\t\t\t\tif ( materialProperties.program === undefined ) {\n\n\t\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t\t} else if ( material.fog && materialProperties.fog !== fog ) {\n\n\t\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t\t} else if ( material.lights && materialProperties.lightsHash !== _lights.hash ) {\n\n\t\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t\t} else if ( materialProperties.numClippingPlanes !== undefined &&\n\t\t\t\t\t( materialProperties.numClippingPlanes !== _clipping.numPlanes ||\n\t\t\t\t\tmaterialProperties.numIntersection !== _clipping.numIntersection ) ) {\n\n\t\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.needsUpdate ) {\n\n\t\t\t\tinitMaterial( material, fog, object );\n\t\t\t\tmaterial.needsUpdate = false;\n\n\t\t\t}\n\n\t\t\tvar refreshProgram = false;\n\t\t\tvar refreshMaterial = false;\n\t\t\tvar refreshLights = false;\n\n\t\t\tvar program = materialProperties.program,\n\t\t\t\tp_uniforms = program.getUniforms(),\n\t\t\t\tm_uniforms = materialProperties.shader.uniforms;\n\n\t\t\tif ( program.id !== _currentProgram ) {\n\n\t\t\t\t_gl.useProgram( program.program );\n\t\t\t\t_currentProgram = program.id;\n\n\t\t\t\trefreshProgram = true;\n\t\t\t\trefreshMaterial = true;\n\t\t\t\trefreshLights = true;\n\n\t\t\t}\n\n\t\t\tif ( material.id !== _currentMaterialId ) {\n\n\t\t\t\t_currentMaterialId = material.id;\n\n\t\t\t\trefreshMaterial = true;\n\n\t\t\t}\n\n\t\t\tif ( refreshProgram || camera !== _currentCamera ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );\n\n\t\t\t\tif ( capabilities.logarithmicDepthBuffer ) {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\n\t\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\n\n\t\t\t\t}\n\n\t\t\t\t// Avoid unneeded uniform updates per ArrayCamera's sub-camera\n\n\t\t\t\tif ( _currentCamera !== ( _currentArrayCamera || camera ) ) {\n\n\t\t\t\t\t_currentCamera = ( _currentArrayCamera || camera );\n\n\t\t\t\t\t// lighting uniforms depend on the camera so enforce an update\n\t\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t\t// the next material that does gets activated:\n\n\t\t\t\t\trefreshMaterial = true;\t\t// set to true on material change\n\t\t\t\t\trefreshLights = true;\t\t// remains set until update done\n\n\t\t\t\t}\n\n\t\t\t\t// load material specific uniforms\n\t\t\t\t// (shader material also gets them for the sake of genericity)\n\n\t\t\t\tif ( material.isShaderMaterial ||\n\t\t\t\t\tmaterial.isMeshPhongMaterial ||\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\t\tmaterial.envMap ) {\n\n\t\t\t\t\tvar uCamPos = p_uniforms.map.cameraPosition;\n\n\t\t\t\t\tif ( uCamPos !== undefined ) {\n\n\t\t\t\t\t\tuCamPos.setValue( _gl,\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\t\tmaterial.isMeshBasicMaterial ||\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\t\tmaterial.isShaderMaterial ||\n\t\t\t\t\tmaterial.skinning ) {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// skinning uniforms must be set even if material didn't change\n\t\t\t// auto-setting of texture unit for bone texture must go before other textures\n\t\t\t// not sure why, but otherwise weird things happen\n\n\t\t\tif ( material.skinning ) {\n\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\n\n\t\t\t\tvar skeleton = object.skeleton;\n\n\t\t\t\tif ( skeleton ) {\n\n\t\t\t\t\tvar bones = skeleton.bones;\n\n\t\t\t\t\tif ( capabilities.floatVertexTextures ) {\n\n\t\t\t\t\t\tif ( skeleton.boneTexture === undefined ) {\n\n\t\t\t\t\t\t\t// layout (1 matrix = 4 pixels)\n\t\t\t\t\t\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t\t\t\t\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n\t\t\t\t\t\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n\t\t\t\t\t\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n\t\t\t\t\t\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\n\n\t\t\t\t\t\t\tvar size = Math.sqrt( bones.length * 4 ); // 4 pixels needed for 1 matrix\n\t\t\t\t\t\t\tsize = _Math.nextPowerOfTwo( Math.ceil( size ) );\n\t\t\t\t\t\t\tsize = Math.max( size, 4 );\n\n\t\t\t\t\t\t\tvar boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel\n\t\t\t\t\t\t\tboneMatrices.set( skeleton.boneMatrices ); // copy current values\n\n\t\t\t\t\t\t\tvar boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );\n\n\t\t\t\t\t\t\tskeleton.boneMatrices = boneMatrices;\n\t\t\t\t\t\t\tskeleton.boneTexture = boneTexture;\n\t\t\t\t\t\t\tskeleton.boneTextureSize = size;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture );\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tp_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( refreshMaterial ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );\n\t\t\t\tp_uniforms.setValue( _gl, 'toneMappingWhitePoint', _this.toneMappingWhitePoint );\n\n\t\t\t\tif ( material.lights ) {\n\n\t\t\t\t\t// the current material requires lighting info\n\n\t\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t\t// values\n\t\t\t\t\t//\n\t\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t\t// the GL state when required\n\n\t\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\n\n\t\t\t\t}\n\n\t\t\t\t// refresh uniforms common to several materials\n\n\t\t\t\tif ( fog && material.fog ) {\n\n\t\t\t\t\trefreshUniformsFog( m_uniforms, fog );\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.isMeshBasicMaterial ||\n\t\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\t\tmaterial.isMeshPhongMaterial ||\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\t\tmaterial.isMeshNormalMaterial ||\n\t\t\t\t\tmaterial.isMeshDepthMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n\t\t\t\t}\n\n\t\t\t\t// refresh single material specific uniforms\n\n\t\t\t\tif ( material.isLineBasicMaterial ) {\n\n\t\t\t\t\trefreshUniformsLine( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isLineDashedMaterial ) {\n\n\t\t\t\t\trefreshUniformsLine( m_uniforms, material );\n\t\t\t\t\trefreshUniformsDash( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isPointsMaterial ) {\n\n\t\t\t\t\trefreshUniformsPoints( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshLambertMaterial ) {\n\n\t\t\t\t\trefreshUniformsLambert( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshToonMaterial ) {\n\n\t\t\t\t\trefreshUniformsToon( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshPhongMaterial ) {\n\n\t\t\t\t\trefreshUniformsPhong( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshPhysicalMaterial ) {\n\n\t\t\t\t\trefreshUniformsPhysical( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshStandardMaterial ) {\n\n\t\t\t\t\trefreshUniformsStandard( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshDepthMaterial ) {\n\n\t\t\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\t\t\tm_uniforms.displacementMap.value = material.displacementMap;\n\t\t\t\t\t\tm_uniforms.displacementScale.value = material.displacementScale;\n\t\t\t\t\t\tm_uniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( material.isMeshNormalMaterial ) {\n\n\t\t\t\t\trefreshUniformsNormal( m_uniforms, material );\n\n\t\t\t\t}\n\n\t\t\t\t// RectAreaLight Texture\n\t\t\t\t// TODO (mrdoob): Find a nicer implementation\n\n\t\t\t\tif ( m_uniforms.ltcMat !== undefined ) m_uniforms.ltcMat.value = UniformsLib.LTC_MAT_TEXTURE;\n\t\t\t\tif ( m_uniforms.ltcMag !== undefined ) m_uniforms.ltcMag.value = UniformsLib.LTC_MAG_TEXTURE;\n\n\t\t\t\tWebGLUniforms.upload(\n\t\t\t\t\t_gl, materialProperties.uniformsList, m_uniforms, _this );\n\n\t\t\t}\n\n\n\t\t\t// common matrices\n\n\t\t\tp_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );\n\t\t\tp_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );\n\t\t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\n\n\t\t\treturn program;\n\n\t\t}\n\n\t\t// Uniforms (refresh uniforms objects)\n\n\t\tfunction refreshUniformsCommon( uniforms, material ) {\n\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t\tuniforms.diffuse.value = material.color;\n\n\t\t\tif ( material.emissive ) {\n\n\t\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\n\t\t\t}\n\n\t\t\tuniforms.map.value = material.map;\n\t\t\tuniforms.specularMap.value = material.specularMap;\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\tif ( material.lightMap ) {\n\n\t\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n\t\t\t}\n\n\t\t\tif ( material.aoMap ) {\n\n\t\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\n\t\t\t}\n\n\t\t\t// uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. specular map\n\t\t\t// 3. normal map\n\t\t\t// 4. bump map\n\t\t\t// 5. alpha map\n\t\t\t// 6. emissive map\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuvScaleMap = material.map;\n\n\t\t\t} else if ( material.specularMap ) {\n\n\t\t\t\tuvScaleMap = material.specularMap;\n\n\t\t\t} else if ( material.displacementMap ) {\n\n\t\t\t\tuvScaleMap = material.displacementMap;\n\n\t\t\t} else if ( material.normalMap ) {\n\n\t\t\t\tuvScaleMap = material.normalMap;\n\n\t\t\t} else if ( material.bumpMap ) {\n\n\t\t\t\tuvScaleMap = material.bumpMap;\n\n\t\t\t} else if ( material.roughnessMap ) {\n\n\t\t\t\tuvScaleMap = material.roughnessMap;\n\n\t\t\t} else if ( material.metalnessMap ) {\n\n\t\t\t\tuvScaleMap = material.metalnessMap;\n\n\t\t\t} else if ( material.alphaMap ) {\n\n\t\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t\t} else if ( material.emissiveMap ) {\n\n\t\t\t\tuvScaleMap = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t\t// backwards compatibility\n\t\t\t\tif ( uvScaleMap.isWebGLRenderTarget ) {\n\n\t\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\n\t\t\t\t}\n\n\t\t\t\tvar offset = uvScaleMap.offset;\n\t\t\t\tvar repeat = uvScaleMap.repeat;\n\n\t\t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\n\n\t\t\t}\n\n\t\t\tuniforms.envMap.value = material.envMap;\n\n\t\t\t// don't flip CubeTexture envMaps, flip everything else:\n\t\t\t//  WebGLRenderTargetCube will be flipped for backwards compatibility\n\t\t\t//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture\n\t\t\t// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future\n\t\t\tuniforms.flipEnvMap.value = ( ! ( material.envMap && material.envMap.isCubeTexture ) ) ? 1 : - 1;\n\n\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t}\n\n\t\tfunction refreshUniformsLine( uniforms, material ) {\n\n\t\t\tuniforms.diffuse.value = material.color;\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t}\n\n\t\tfunction refreshUniformsDash( uniforms, material ) {\n\n\t\t\tuniforms.dashSize.value = material.dashSize;\n\t\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\t\tuniforms.scale.value = material.scale;\n\n\t\t}\n\n\t\tfunction refreshUniformsPoints( uniforms, material ) {\n\n\t\t\tuniforms.diffuse.value = material.color;\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.size.value = material.size * _pixelRatio;\n\t\t\tuniforms.scale.value = _height * 0.5;\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t\tif ( material.map !== null ) {\n\n\t\t\t\tvar offset = material.map.offset;\n\t\t\t\tvar repeat = material.map.repeat;\n\n\t\t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsFog( uniforms, fog ) {\n\n\t\t\tuniforms.fogColor.value = fog.color;\n\n\t\t\tif ( fog.isFog ) {\n\n\t\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\t\tuniforms.fogFar.value = fog.far;\n\n\t\t\t} else if ( fog.isFogExp2 ) {\n\n\t\t\t\tuniforms.fogDensity.value = fog.density;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsLambert( uniforms, material ) {\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsPhong( uniforms, material ) {\n\n\t\t\tuniforms.specular.value = material.specular;\n\t\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsToon( uniforms, material ) {\n\n\t\t\trefreshUniformsPhong( uniforms, material );\n\n\t\t\tif ( material.gradientMap ) {\n\n\t\t\t\tuniforms.gradientMap.value = material.gradientMap;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsStandard( uniforms, material ) {\n\n\t\t\tuniforms.roughness.value = material.roughness;\n\t\t\tuniforms.metalness.value = material.metalness;\n\n\t\t\tif ( material.roughnessMap ) {\n\n\t\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\n\t\t\t}\n\n\t\t\tif ( material.metalnessMap ) {\n\n\t\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\n\t\t\t}\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t\tif ( material.envMap ) {\n\n\t\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsPhysical( uniforms, material ) {\n\n\t\t\tuniforms.clearCoat.value = material.clearCoat;\n\t\t\tuniforms.clearCoatRoughness.value = material.clearCoatRoughness;\n\n\t\t\trefreshUniformsStandard( uniforms, material );\n\n\t\t}\n\n\t\tfunction refreshUniformsNormal( uniforms, material ) {\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\t\tfunction markUniformsLightsNeedsUpdate( uniforms, value ) {\n\n\t\t\tuniforms.ambientLightColor.needsUpdate = value;\n\n\t\t\tuniforms.directionalLights.needsUpdate = value;\n\t\t\tuniforms.pointLights.needsUpdate = value;\n\t\t\tuniforms.spotLights.needsUpdate = value;\n\t\t\tuniforms.rectAreaLights.needsUpdate = value;\n\t\t\tuniforms.hemisphereLights.needsUpdate = value;\n\n\t\t}\n\n\t\t// Lighting\n\n\t\tfunction setupShadows( lights ) {\n\n\t\t\tvar lightShadowsLength = 0;\n\n\t\t\tfor ( var i = 0, l = lights.length; i < l; i ++ ) {\n\n\t\t\t\tvar light = lights[ i ];\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t_lights.shadows[ lightShadowsLength ] = light;\n\t\t\t\t\tlightShadowsLength ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_lights.shadows.length = lightShadowsLength;\n\n\t\t}\n\n\t\tfunction setupLights( lights, camera ) {\n\n\t\t\tvar l, ll, light, shadow,\n\t\t\t\tr = 0, g = 0, b = 0,\n\t\t\t\tcolor,\n\t\t\t\tintensity,\n\t\t\t\tdistance,\n\t\t\t\tshadowMap,\n\n\t\t\t\tviewMatrix = camera.matrixWorldInverse,\n\n\t\t\t\tdirectionalLength = 0,\n\t\t\t\tpointLength = 0,\n\t\t\t\tspotLength = 0,\n\t\t\t\trectAreaLength = 0,\n\t\t\t\themiLength = 0;\n\n\t\t\tfor ( l = 0, ll = lights.length; l < ll; l ++ ) {\n\n\t\t\t\tlight = lights[ l ];\n\n\t\t\t\tcolor = light.color;\n\t\t\t\tintensity = light.intensity;\n\t\t\t\tdistance = light.distance;\n\n\t\t\t\tshadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\n\n\t\t\t\tif ( light.isAmbientLight ) {\n\n\t\t\t\t\tr += color.r * intensity;\n\t\t\t\t\tg += color.g * intensity;\n\t\t\t\t\tb += color.b * intensity;\n\n\t\t\t\t} else if ( light.isDirectionalLight ) {\n\n\t\t\t\t\tvar uniforms = lightCache.get( light );\n\n\t\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\tuniforms.direction.sub( _vector3 );\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tshadow = light.shadow;\n\n\t\t\t\t\t\tuniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_lights.directionalShadowMap[ directionalLength ] = shadowMap;\n\t\t\t\t\t_lights.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\n\t\t\t\t\t_lights.directional[ directionalLength ] = uniforms;\n\n\t\t\t\t\tdirectionalLength ++;\n\n\t\t\t\t} else if ( light.isSpotLight ) {\n\n\t\t\t\t\tvar uniforms = lightCache.get( light );\n\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\t\t\t\t\tuniforms.distance = distance;\n\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\tuniforms.direction.sub( _vector3 );\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\t\tuniforms.coneCos = Math.cos( light.angle );\n\t\t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\n\t\t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\n\n\t\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tshadow = light.shadow;\n\n\t\t\t\t\t\tuniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_lights.spotShadowMap[ spotLength ] = shadowMap;\n\t\t\t\t\t_lights.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\n\t\t\t\t\t_lights.spot[ spotLength ] = uniforms;\n\n\t\t\t\t\tspotLength ++;\n\n\t\t\t\t} else if ( light.isRectAreaLight ) {\n\n\t\t\t\t\tvar uniforms = lightCache.get( light );\n\n\t\t\t\t\t// (a) intensity controls irradiance of entire light\n\t\t\t\t\tuniforms.color\n\t\t\t\t\t\t.copy( color )\n\t\t\t\t\t\t.multiplyScalar( intensity / ( light.width * light.height ) );\n\n\t\t\t\t\t// (b) intensity controls the radiance per light area\n\t\t\t\t\t// uniforms.color.copy( color ).multiplyScalar( intensity );\n\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t\t// extract local rotation of light to derive width/height half vectors\n\t\t\t\t\t_matrix42.identity();\n\t\t\t\t\t_matrix4.copy( light.matrixWorld );\n\t\t\t\t\t_matrix4.premultiply( viewMatrix );\n\t\t\t\t\t_matrix42.extractRotation( _matrix4 );\n\n\t\t\t\t\tuniforms.halfWidth.set( light.width * 0.5,                0.0, 0.0 );\n\t\t\t\t\tuniforms.halfHeight.set(              0.0, light.height * 0.5, 0.0 );\n\n\t\t\t\t\tuniforms.halfWidth.applyMatrix4( _matrix42 );\n\t\t\t\t\tuniforms.halfHeight.applyMatrix4( _matrix42 );\n\n\t\t\t\t\t// TODO (abelnation): RectAreaLight distance?\n\t\t\t\t\t// uniforms.distance = distance;\n\n\t\t\t\t\t_lights.rectArea[ rectAreaLength ] = uniforms;\n\n\t\t\t\t\trectAreaLength ++;\n\n\t\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\t\tvar uniforms = lightCache.get( light );\n\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\t\tuniforms.distance = light.distance;\n\t\t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\n\n\t\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tshadow = light.shadow;\n\n\t\t\t\t\t\tuniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_lights.pointShadowMap[ pointLength ] = shadowMap;\n\t\t\t\t\t_lights.pointShadowMatrix[ pointLength ] = light.shadow.matrix;\n\t\t\t\t\t_lights.point[ pointLength ] = uniforms;\n\n\t\t\t\t\tpointLength ++;\n\n\t\t\t\t} else if ( light.isHemisphereLight ) {\n\n\t\t\t\t\tvar uniforms = lightCache.get( light );\n\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\t\t\t\t\tuniforms.direction.normalize();\n\n\t\t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity );\n\t\t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );\n\n\t\t\t\t\t_lights.hemi[ hemiLength ] = uniforms;\n\n\t\t\t\t\themiLength ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_lights.ambient[ 0 ] = r;\n\t\t\t_lights.ambient[ 1 ] = g;\n\t\t\t_lights.ambient[ 2 ] = b;\n\n\t\t\t_lights.directional.length = directionalLength;\n\t\t\t_lights.spot.length = spotLength;\n\t\t\t_lights.rectArea.length = rectAreaLength;\n\t\t\t_lights.point.length = pointLength;\n\t\t\t_lights.hemi.length = hemiLength;\n\n\t\t\t// TODO (sam-g-steel) why aren't we using join\n\t\t\t_lights.hash = directionalLength + ',' + pointLength + ',' + spotLength + ',' + rectAreaLength + ',' + hemiLength + ',' + _lights.shadows.length;\n\n\t\t}\n\n\t\t// GL state setting\n\n\t\tthis.setFaceCulling = function ( cullFace, frontFaceDirection ) {\n\n\t\t\tstate.setCullFace( cullFace );\n\t\t\tstate.setFlipSided( frontFaceDirection === FrontFaceDirectionCW );\n\n\t\t};\n\n\t\t// Textures\n\n\t\tfunction allocTextureUnit() {\n\n\t\t\tvar textureUnit = _usedTextureUnits;\n\n\t\t\tif ( textureUnit >= capabilities.maxTextures ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );\n\n\t\t\t}\n\n\t\t\t_usedTextureUnits += 1;\n\n\t\t\treturn textureUnit;\n\n\t\t}\n\n\t\tthis.allocTextureUnit = allocTextureUnit;\n\n\t\t// this.setTexture2D = setTexture2D;\n\t\tthis.setTexture2D = ( function () {\n\n\t\t\tvar warned = false;\n\n\t\t\t// backwards compatibility: peel texture.texture\n\t\t\treturn function setTexture2D( texture, slot ) {\n\n\t\t\t\tif ( texture && texture.isWebGLRenderTarget ) {\n\n\t\t\t\t\tif ( ! warned ) {\n\n\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\t\twarned = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture = texture.texture;\n\n\t\t\t\t}\n\n\t\t\t\ttextures.setTexture2D( texture, slot );\n\n\t\t\t};\n\n\t\t}() );\n\n\t\tthis.setTexture = ( function () {\n\n\t\t\tvar warned = false;\n\n\t\t\treturn function setTexture( texture, slot ) {\n\n\t\t\t\tif ( ! warned ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead.\" );\n\t\t\t\t\twarned = true;\n\n\t\t\t\t}\n\n\t\t\t\ttextures.setTexture2D( texture, slot );\n\n\t\t\t};\n\n\t\t}() );\n\n\t\tthis.setTextureCube = ( function () {\n\n\t\t\tvar warned = false;\n\n\t\t\treturn function setTextureCube( texture, slot ) {\n\n\t\t\t\t// backwards compatibility: peel texture.texture\n\t\t\t\tif ( texture && texture.isWebGLRenderTargetCube ) {\n\n\t\t\t\t\tif ( ! warned ) {\n\n\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\t\twarned = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture = texture.texture;\n\n\t\t\t\t}\n\n\t\t\t\t// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture\n\t\t\t\t// TODO: unify these code paths\n\t\t\t\tif ( ( texture && texture.isCubeTexture ) ||\n\t\t\t\t\t( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {\n\n\t\t\t\t\t// CompressedTexture can have Array in image :/\n\n\t\t\t\t\t// this function alone should take care of cube textures\n\t\t\t\t\ttextures.setTextureCube( texture, slot );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// assumed: texture property of THREE.WebGLRenderTargetCube\n\n\t\t\t\t\ttextures.setTextureCubeDynamic( texture, slot );\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}() );\n\n\t\tthis.getRenderTarget = function () {\n\n\t\t\treturn _currentRenderTarget;\n\n\t\t};\n\n\t\tthis.setRenderTarget = function ( renderTarget ) {\n\n\t\t\t_currentRenderTarget = renderTarget;\n\n\t\t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\n\n\t\t\t\ttextures.setupRenderTarget( renderTarget );\n\n\t\t\t}\n\n\t\t\tvar isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );\n\t\t\tvar framebuffer;\n\n\t\t\tif ( renderTarget ) {\n\n\t\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n\t\t\t\tif ( isCube ) {\n\n\t\t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer[ renderTarget.activeCubeFace ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer;\n\n\t\t\t\t}\n\n\t\t\t\t_currentScissor.copy( renderTarget.scissor );\n\t\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\n\t\t\t\t_currentViewport.copy( renderTarget.viewport );\n\n\t\t\t} else {\n\n\t\t\t\tframebuffer = null;\n\n\t\t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio );\n\t\t\t\t_currentScissorTest = _scissorTest;\n\n\t\t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio );\n\n\t\t\t}\n\n\t\t\tif ( _currentFramebuffer !== framebuffer ) {\n\n\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\t\t\t_currentFramebuffer = framebuffer;\n\n\t\t\t}\n\n\t\t\tstate.scissor( _currentScissor );\n\t\t\tstate.setScissorTest( _currentScissorTest );\n\n\t\t\tstate.viewport( _currentViewport );\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\t\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {\n\n\t\t\tif ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar framebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\t\tif ( framebuffer ) {\n\n\t\t\t\tvar restore = false;\n\n\t\t\t\tif ( framebuffer !== _currentFramebuffer ) {\n\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\t\t\t\trestore = true;\n\n\t\t\t\t}\n\n\t\t\t\ttry {\n\n\t\t\t\t\tvar texture = renderTarget.texture;\n\t\t\t\t\tvar textureFormat = texture.format;\n\t\t\t\t\tvar textureType = texture.type;\n\n\t\t\t\t\tif ( textureFormat !== RGBAFormat && paramThreeToGL( textureFormat ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( textureType !== UnsignedByteType && paramThreeToGL( textureType ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) && // IE11, Edge and Chrome Mac < 52 (#9513)\n\t\t\t\t\t\t! ( textureType === FloatType && ( extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox\n\t\t\t\t\t\t! ( textureType === HalfFloatType && extensions.get( 'EXT_color_buffer_half_float' ) ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {\n\n\t\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\n\t\t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\n\n\t\t\t\t\t\t\t_gl.readPixels( x, y, width, height, paramThreeToGL( textureFormat ), paramThreeToGL( textureType ), buffer );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t} finally {\n\n\t\t\t\t\tif ( restore ) {\n\n\t\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\t// Map three.js constants to WebGL constants\n\n\t\tfunction paramThreeToGL( p ) {\n\n\t\t\tvar extension;\n\n\t\t\tif ( p === RepeatWrapping ) return _gl.REPEAT;\n\t\t\tif ( p === ClampToEdgeWrapping ) return _gl.CLAMP_TO_EDGE;\n\t\t\tif ( p === MirroredRepeatWrapping ) return _gl.MIRRORED_REPEAT;\n\n\t\t\tif ( p === NearestFilter ) return _gl.NEAREST;\n\t\t\tif ( p === NearestMipMapNearestFilter ) return _gl.NEAREST_MIPMAP_NEAREST;\n\t\t\tif ( p === NearestMipMapLinearFilter ) return _gl.NEAREST_MIPMAP_LINEAR;\n\n\t\t\tif ( p === LinearFilter ) return _gl.LINEAR;\n\t\t\tif ( p === LinearMipMapNearestFilter ) return _gl.LINEAR_MIPMAP_NEAREST;\n\t\t\tif ( p === LinearMipMapLinearFilter ) return _gl.LINEAR_MIPMAP_LINEAR;\n\n\t\t\tif ( p === UnsignedByteType ) return _gl.UNSIGNED_BYTE;\n\t\t\tif ( p === UnsignedShort4444Type ) return _gl.UNSIGNED_SHORT_4_4_4_4;\n\t\t\tif ( p === UnsignedShort5551Type ) return _gl.UNSIGNED_SHORT_5_5_5_1;\n\t\t\tif ( p === UnsignedShort565Type ) return _gl.UNSIGNED_SHORT_5_6_5;\n\n\t\t\tif ( p === ByteType ) return _gl.BYTE;\n\t\t\tif ( p === ShortType ) return _gl.SHORT;\n\t\t\tif ( p === UnsignedShortType ) return _gl.UNSIGNED_SHORT;\n\t\t\tif ( p === IntType ) return _gl.INT;\n\t\t\tif ( p === UnsignedIntType ) return _gl.UNSIGNED_INT;\n\t\t\tif ( p === FloatType ) return _gl.FLOAT;\n\n\t\t\tif ( p === HalfFloatType ) {\n\n\t\t\t\textension = extensions.get( 'OES_texture_half_float' );\n\n\t\t\t\tif ( extension !== null ) return extension.HALF_FLOAT_OES;\n\n\t\t\t}\n\n\t\t\tif ( p === AlphaFormat ) return _gl.ALPHA;\n\t\t\tif ( p === RGBFormat ) return _gl.RGB;\n\t\t\tif ( p === RGBAFormat ) return _gl.RGBA;\n\t\t\tif ( p === LuminanceFormat ) return _gl.LUMINANCE;\n\t\t\tif ( p === LuminanceAlphaFormat ) return _gl.LUMINANCE_ALPHA;\n\t\t\tif ( p === DepthFormat ) return _gl.DEPTH_COMPONENT;\n\t\t\tif ( p === DepthStencilFormat ) return _gl.DEPTH_STENCIL;\n\n\t\t\tif ( p === AddEquation ) return _gl.FUNC_ADD;\n\t\t\tif ( p === SubtractEquation ) return _gl.FUNC_SUBTRACT;\n\t\t\tif ( p === ReverseSubtractEquation ) return _gl.FUNC_REVERSE_SUBTRACT;\n\n\t\t\tif ( p === ZeroFactor ) return _gl.ZERO;\n\t\t\tif ( p === OneFactor ) return _gl.ONE;\n\t\t\tif ( p === SrcColorFactor ) return _gl.SRC_COLOR;\n\t\t\tif ( p === OneMinusSrcColorFactor ) return _gl.ONE_MINUS_SRC_COLOR;\n\t\t\tif ( p === SrcAlphaFactor ) return _gl.SRC_ALPHA;\n\t\t\tif ( p === OneMinusSrcAlphaFactor ) return _gl.ONE_MINUS_SRC_ALPHA;\n\t\t\tif ( p === DstAlphaFactor ) return _gl.DST_ALPHA;\n\t\t\tif ( p === OneMinusDstAlphaFactor ) return _gl.ONE_MINUS_DST_ALPHA;\n\n\t\t\tif ( p === DstColorFactor ) return _gl.DST_COLOR;\n\t\t\tif ( p === OneMinusDstColorFactor ) return _gl.ONE_MINUS_DST_COLOR;\n\t\t\tif ( p === SrcAlphaSaturateFactor ) return _gl.SRC_ALPHA_SATURATE;\n\n\t\t\tif ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||\n\t\t\t\tp === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||\n\t\t\t\tp === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n\t\t\t\t\tif ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n\t\t\t\t\tif ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n\t\t\t\t\tif ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGB_ETC1_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\n\n\t\t\t\tif ( extension !== null ) return extension.COMPRESSED_RGB_ETC1_WEBGL;\n\n\t\t\t}\n\n\t\t\tif ( p === MinEquation || p === MaxEquation ) {\n\n\t\t\t\textension = extensions.get( 'EXT_blend_minmax' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === MinEquation ) return extension.MIN_EXT;\n\t\t\t\t\tif ( p === MaxEquation ) return extension.MAX_EXT;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === UnsignedInt248Type ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_depth_texture' );\n\n\t\t\t\tif ( extension !== null ) return extension.UNSIGNED_INT_24_8_WEBGL;\n\n\t\t\t}\n\n\t\t\treturn 0;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction FogExp2 ( color, density ) {\n\n\t\tthis.name = '';\n\n\t\tthis.color = new Color( color );\n\t\tthis.density = ( density !== undefined ) ? density : 0.00025;\n\n\t}\n\n\tFogExp2.prototype.isFogExp2 = true;\n\n\tFogExp2.prototype.clone = function () {\n\n\t\treturn new FogExp2( this.color.getHex(), this.density );\n\n\t};\n\n\tFogExp2.prototype.toJSON = function ( meta ) {\n\n\t\treturn {\n\t\t\ttype: 'FogExp2',\n\t\t\tcolor: this.color.getHex(),\n\t\t\tdensity: this.density\n\t\t};\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Fog ( color, near, far ) {\n\n\t\tthis.name = '';\n\n\t\tthis.color = new Color( color );\n\n\t\tthis.near = ( near !== undefined ) ? near : 1;\n\t\tthis.far = ( far !== undefined ) ? far : 1000;\n\n\t}\n\n\tFog.prototype.isFog = true;\n\n\tFog.prototype.clone = function () {\n\n\t\treturn new Fog( this.color.getHex(), this.near, this.far );\n\n\t};\n\n\tFog.prototype.toJSON = function ( meta ) {\n\n\t\treturn {\n\t\t\ttype: 'Fog',\n\t\t\tcolor: this.color.getHex(),\n\t\t\tnear: this.near,\n\t\t\tfar: this.far\n\t\t};\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Scene () {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Scene';\n\n\t\tthis.background = null;\n\t\tthis.fog = null;\n\t\tthis.overrideMaterial = null;\n\n\t\tthis.autoUpdate = true; // checked by the renderer\n\n\t}\n\n\tScene.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Scene,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source, recursive );\n\n\t\t\tif ( source.background !== null ) this.background = source.background.clone();\n\t\t\tif ( source.fog !== null ) this.fog = source.fog.clone();\n\t\t\tif ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();\n\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tif ( this.background !== null ) data.object.background = this.background.toJSON( meta );\n\t\t\tif ( this.fog !== null ) data.object.fog = this.fog.toJSON();\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction LensFlare( texture, size, distance, blending, color ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.lensFlares = [];\n\n\t\tthis.positionScreen = new Vector3();\n\t\tthis.customUpdateCallback = undefined;\n\n\t\tif ( texture !== undefined ) {\n\n\t\t\tthis.add( texture, size, distance, blending, color );\n\n\t\t}\n\n\t}\n\n\tLensFlare.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: LensFlare,\n\n\t\tisLensFlare: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tthis.positionScreen.copy( source.positionScreen );\n\t\t\tthis.customUpdateCallback = source.customUpdateCallback;\n\n\t\t\tfor ( var i = 0, l = source.lensFlares.length; i < l; i ++ ) {\n\n\t\t\t\tthis.lensFlares.push( source.lensFlares[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( texture, size, distance, blending, color, opacity ) {\n\n\t\t\tif ( size === undefined ) size = - 1;\n\t\t\tif ( distance === undefined ) distance = 0;\n\t\t\tif ( opacity === undefined ) opacity = 1;\n\t\t\tif ( color === undefined ) color = new Color( 0xffffff );\n\t\t\tif ( blending === undefined ) blending = NormalBlending;\n\n\t\t\tdistance = Math.min( distance, Math.max( 0, distance ) );\n\n\t\t\tthis.lensFlares.push( {\n\t\t\t\ttexture: texture,\t// THREE.Texture\n\t\t\t\tsize: size, \t\t// size in pixels (-1 = use texture.width)\n\t\t\t\tdistance: distance, \t// distance (0-1) from light source (0=at light source)\n\t\t\t\tx: 0, y: 0, z: 0,\t// screen position (-1 => 1) z = 0 is in front z = 1 is back\n\t\t\t\tscale: 1, \t\t// scale\n\t\t\t\trotation: 0, \t\t// rotation\n\t\t\t\topacity: opacity,\t// opacity\n\t\t\t\tcolor: color,\t\t// color\n\t\t\t\tblending: blending\t// blending\n\t\t\t} );\n\n\t\t},\n\n\t\t/*\n\t\t * Update lens flares update positions on all flares based on the screen position\n\t\t * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.\n\t\t */\n\n\t\tupdateLensFlares: function () {\n\n\t\t\tvar f, fl = this.lensFlares.length;\n\t\t\tvar flare;\n\t\t\tvar vecX = - this.positionScreen.x * 2;\n\t\t\tvar vecY = - this.positionScreen.y * 2;\n\n\t\t\tfor ( f = 0; f < fl; f ++ ) {\n\n\t\t\t\tflare = this.lensFlares[ f ];\n\n\t\t\t\tflare.x = this.positionScreen.x + vecX * flare.distance;\n\t\t\t\tflare.y = this.positionScreen.y + vecY * flare.distance;\n\n\t\t\t\tflare.wantedRotation = flare.x * Math.PI * 0.25;\n\t\t\t\tflare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *\tuvOffset: new THREE.Vector2(),\n\t *\tuvScale: new THREE.Vector2()\n\t * }\n\t */\n\n\tfunction SpriteMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'SpriteMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\t\tthis.map = null;\n\n\t\tthis.rotation = 0;\n\n\t\tthis.fog = false;\n\t\tthis.lights = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tSpriteMaterial.prototype = Object.create( Material.prototype );\n\tSpriteMaterial.prototype.constructor = SpriteMaterial;\n\tSpriteMaterial.prototype.isSpriteMaterial = true;\n\n\tSpriteMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.map = source.map;\n\n\t\tthis.rotation = source.rotation;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Sprite( material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Sprite';\n\n\t\tthis.material = ( material !== undefined ) ? material : new SpriteMaterial();\n\n\t}\n\n\tSprite.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Sprite,\n\n\t\tisSprite: true,\n\n\t\traycast: ( function () {\n\n\t\t\tvar intersectPoint = new Vector3();\n\t\t\tvar worldPosition = new Vector3();\n\t\t\tvar worldScale = new Vector3();\n\n\t\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\t\tworldPosition.setFromMatrixPosition( this.matrixWorld );\n\t\t\t\traycaster.ray.closestPointToPoint( worldPosition, intersectPoint );\n\n\t\t\t\tworldScale.setFromMatrixScale( this.matrixWorld );\n\t\t\t\tvar guessSizeSq = worldScale.x * worldScale.y / 4;\n\n\t\t\t\tif ( worldPosition.distanceToSquared( intersectPoint ) > guessSizeSq ) return;\n\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\n\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\t\t\t\tintersects.push( {\n\n\t\t\t\t\tdistance: distance,\n\t\t\t\t\tpoint: intersectPoint.clone(),\n\t\t\t\t\tface: null,\n\t\t\t\t\tobject: this\n\n\t\t\t\t} );\n\n\t\t\t};\n\n\t\t}() ),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction LOD() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'LOD';\n\n\t\tObject.defineProperties( this, {\n\t\t\tlevels: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: []\n\t\t\t}\n\t\t} );\n\n\t}\n\n\tLOD.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: LOD,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source, false );\n\n\t\t\tvar levels = source.levels;\n\n\t\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tvar level = levels[ i ];\n\n\t\t\t\tthis.addLevel( level.object.clone(), level.distance );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddLevel: function ( object, distance ) {\n\n\t\t\tif ( distance === undefined ) distance = 0;\n\n\t\t\tdistance = Math.abs( distance );\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\tif ( distance < levels[ l ].distance ) {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlevels.splice( l, 0, { distance: distance, object: object } );\n\n\t\t\tthis.add( object );\n\n\t\t},\n\n\t\tgetObjectForDistance: function ( distance ) {\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tif ( distance < levels[ i ].distance ) {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn levels[ i - 1 ].object;\n\n\t\t},\n\n\t\traycast: ( function () {\n\n\t\t\tvar matrixPosition = new Vector3();\n\n\t\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( matrixPosition );\n\n\t\t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\n\t\t\t};\n\n\t\t}() ),\n\n\t\tupdate: function () {\n\n\t\t\tvar v1 = new Vector3();\n\t\t\tvar v2 = new Vector3();\n\n\t\t\treturn function update( camera ) {\n\n\t\t\t\tvar levels = this.levels;\n\n\t\t\t\tif ( levels.length > 1 ) {\n\n\t\t\t\t\tv1.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\t\tv2.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\t\t\tvar distance = v1.distanceTo( v2 );\n\n\t\t\t\t\tlevels[ 0 ].object.visible = true;\n\n\t\t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tif ( distance >= levels[ i ].distance ) {\n\n\t\t\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\n\t\t\t\t\t\t\tlevels[ i ].object.visible = true;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( ; i < l; i ++ ) {\n\n\t\t\t\t\t\tlevels[ i ].object.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.levels = [];\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tvar level = levels[ i ];\n\n\t\t\t\tdata.object.levels.push( {\n\t\t\t\t\tobject: level.object.uuid,\n\t\t\t\t\tdistance: level.distance\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author michael guerrero / http://realitymeltdown.com\n\t * @author ikerr / http://verold.com\n\t */\n\n\tfunction Skeleton( bones, boneInverses ) {\n\n\t\t// copy the bone array\n\n\t\tbones = bones || [];\n\n\t\tthis.bones = bones.slice( 0 );\n\t\tthis.boneMatrices = new Float32Array( this.bones.length * 16 );\n\n\t\t// use the supplied bone inverses or calculate the inverses\n\n\t\tif ( boneInverses === undefined ) {\n\n\t\t\tthis.calculateInverses();\n\n\t\t} else {\n\n\t\t\tif ( this.bones.length === boneInverses.length ) {\n\n\t\t\t\tthis.boneInverses = boneInverses.slice( 0 );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.Skeleton boneInverses is the wrong length.' );\n\n\t\t\t\tthis.boneInverses = [];\n\n\t\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\t\tthis.boneInverses.push( new Matrix4() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tObject.assign( Skeleton.prototype, {\n\n\t\tcalculateInverses: function () {\n\n\t\t\tthis.boneInverses = [];\n\n\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tvar inverse = new Matrix4();\n\n\t\t\t\tif ( this.bones[ i ] ) {\n\n\t\t\t\t\tinverse.getInverse( this.bones[ i ].matrixWorld );\n\n\t\t\t\t}\n\n\t\t\t\tthis.boneInverses.push( inverse );\n\n\t\t\t}\n\n\t\t},\n\n\t\tpose: function () {\n\n\t\t\tvar bone, i, il;\n\n\t\t\t// recover the bind-time world matrices\n\n\t\t\tfor ( i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tbone = this.bones[ i ];\n\n\t\t\t\tif ( bone ) {\n\n\t\t\t\t\tbone.matrixWorld.getInverse( this.boneInverses[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// compute the local matrices, positions, rotations and scales\n\n\t\t\tfor ( i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tbone = this.bones[ i ];\n\n\t\t\t\tif ( bone ) {\n\n\t\t\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t\t\tbone.matrix.getInverse( bone.parent.matrixWorld );\n\t\t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdate: ( function () {\n\n\t\t\tvar offsetMatrix = new Matrix4();\n\t\t\tvar identityMatrix = new Matrix4();\n\n\t\t\treturn function update() {\n\n\t\t\t\tvar bones = this.bones;\n\t\t\t\tvar boneInverses = this.boneInverses;\n\t\t\t\tvar boneMatrices = this.boneMatrices;\n\t\t\t\tvar boneTexture = this.boneTexture;\n\n\t\t\t\t// flatten bone matrices to array\n\n\t\t\t\tfor ( var i = 0, il = bones.length; i < il; i ++ ) {\n\n\t\t\t\t\t// compute the offset between the current and the original transform\n\n\t\t\t\t\tvar matrix = bones[ i ] ? bones[ i ].matrixWorld : identityMatrix;\n\n\t\t\t\t\toffsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );\n\t\t\t\t\toffsetMatrix.toArray( boneMatrices, i * 16 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( boneTexture !== undefined ) {\n\n\t\t\t\t\tboneTexture.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t} )(),\n\n\t\tclone: function () {\n\n\t\t\treturn new Skeleton( this.bones, this.boneInverses );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author ikerr / http://verold.com\n\t */\n\n\tfunction Bone() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Bone';\n\n\t}\n\n\tBone.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Bone,\n\n\t\tisBone: true\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author ikerr / http://verold.com\n\t */\n\n\tfunction SkinnedMesh( geometry, material ) {\n\n\t\tMesh.call( this, geometry, material );\n\n\t\tthis.type = 'SkinnedMesh';\n\n\t\tthis.bindMode = 'attached';\n\t\tthis.bindMatrix = new Matrix4();\n\t\tthis.bindMatrixInverse = new Matrix4();\n\n\t\tvar bones = this.initBones();\n\t\tvar skeleton = new Skeleton( bones );\n\n\t\tthis.bind( skeleton, this.matrixWorld );\n\n\t\tthis.normalizeSkinWeights();\n\n\t}\n\n\tSkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {\n\n\t\tconstructor: SkinnedMesh,\n\n\t\tisSkinnedMesh: true,\n\n\t\tinitBones: function () {\n\n\t\t\tvar bones = [], bone, gbone;\n\t\t\tvar i, il;\n\n\t\t\tif ( this.geometry && this.geometry.bones !== undefined ) {\n\n\t\t\t\t// first, create array of 'Bone' objects from geometry data\n\n\t\t\t\tfor ( i = 0, il = this.geometry.bones.length; i < il; i ++ ) {\n\n\t\t\t\t\tgbone = this.geometry.bones[ i ];\n\n\t\t\t\t\t// create new 'Bone' object\n\n\t\t\t\t\tbone = new Bone();\n\t\t\t\t\tbones.push( bone );\n\n\t\t\t\t\t// apply values\n\n\t\t\t\t\tbone.name = gbone.name;\n\t\t\t\t\tbone.position.fromArray( gbone.pos );\n\t\t\t\t\tbone.quaternion.fromArray( gbone.rotq );\n\t\t\t\t\tif ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );\n\n\t\t\t\t}\n\n\t\t\t\t// second, create bone hierarchy\n\n\t\t\t\tfor ( i = 0, il = this.geometry.bones.length; i < il; i ++ ) {\n\n\t\t\t\t\tgbone = this.geometry.bones[ i ];\n\n\t\t\t\t\tif ( ( gbone.parent !== - 1 ) && ( gbone.parent !== null ) && ( bones[ gbone.parent ] !== undefined ) ) {\n\n\t\t\t\t\t\t// subsequent bones in the hierarchy\n\n\t\t\t\t\t\tbones[ gbone.parent ].add( bones[ i ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// topmost bone, immediate child of the skinned mesh\n\n\t\t\t\t\t\tthis.add( bones[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// now the bones are part of the scene graph and children of the skinned mesh.\n\t\t\t// let's update the corresponding matrices\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\treturn bones;\n\n\t\t},\n\n\t\tbind: function ( skeleton, bindMatrix ) {\n\n\t\t\tthis.skeleton = skeleton;\n\n\t\t\tif ( bindMatrix === undefined ) {\n\n\t\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\t\tthis.skeleton.calculateInverses();\n\n\t\t\t\tbindMatrix = this.matrixWorld;\n\n\t\t\t}\n\n\t\t\tthis.bindMatrix.copy( bindMatrix );\n\t\t\tthis.bindMatrixInverse.getInverse( bindMatrix );\n\n\t\t},\n\n\t\tpose: function () {\n\n\t\t\tthis.skeleton.pose();\n\n\t\t},\n\n\t\tnormalizeSkinWeights: function () {\n\n\t\t\tvar scale, i;\n\n\t\t\tif ( this.geometry && this.geometry.isGeometry ) {\n\n\t\t\t\tfor ( i = 0; i < this.geometry.skinWeights.length; i ++ ) {\n\n\t\t\t\t\tvar sw = this.geometry.skinWeights[ i ];\n\n\t\t\t\t\tscale = 1.0 / sw.lengthManhattan();\n\n\t\t\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\t\t\tsw.multiplyScalar( scale );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tsw.set( 1, 0, 0, 0 ); // do something reasonable\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( this.geometry && this.geometry.isBufferGeometry ) {\n\n\t\t\t\tvar vec = new Vector4();\n\n\t\t\t\tvar skinWeight = this.geometry.attributes.skinWeight;\n\n\t\t\t\tfor ( i = 0; i < skinWeight.count; i ++ ) {\n\n\t\t\t\t\tvec.x = skinWeight.getX( i );\n\t\t\t\t\tvec.y = skinWeight.getY( i );\n\t\t\t\t\tvec.z = skinWeight.getZ( i );\n\t\t\t\t\tvec.w = skinWeight.getW( i );\n\n\t\t\t\t\tscale = 1.0 / vec.lengthManhattan();\n\n\t\t\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\t\t\tvec.multiplyScalar( scale );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvec.set( 1, 0, 0, 0 ); // do something reasonable\n\n\t\t\t\t\t}\n\n\t\t\t\t\tskinWeight.setXYZW( i, vec.x, vec.y, vec.z, vec.w );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tMesh.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tif ( this.bindMode === 'attached' ) {\n\n\t\t\t\tthis.bindMatrixInverse.getInverse( this.matrixWorld );\n\n\t\t\t} else if ( this.bindMode === 'detached' ) {\n\n\t\t\t\tthis.bindMatrixInverse.getInverse( this.bindMatrix );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  linewidth: <float>,\n\t *  linecap: \"round\",\n\t *  linejoin: \"round\"\n\t * }\n\t */\n\n\tfunction LineBasicMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'LineBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.linewidth = 1;\n\t\tthis.linecap = 'round';\n\t\tthis.linejoin = 'round';\n\n\t\tthis.lights = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tLineBasicMaterial.prototype = Object.create( Material.prototype );\n\tLineBasicMaterial.prototype.constructor = LineBasicMaterial;\n\n\tLineBasicMaterial.prototype.isLineBasicMaterial = true;\n\n\tLineBasicMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.linewidth = source.linewidth;\n\t\tthis.linecap = source.linecap;\n\t\tthis.linejoin = source.linejoin;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Line( geometry, material, mode ) {\n\n\t\tif ( mode === 1 ) {\n\n\t\t\tconsole.warn( 'THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.' );\n\t\t\treturn new LineSegments( geometry, material );\n\n\t\t}\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Line';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new LineBasicMaterial( { color: Math.random() * 0xffffff } );\n\n\t}\n\n\tLine.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Line,\n\n\t\tisLine: true,\n\n\t\traycast: ( function () {\n\n\t\t\tvar inverseMatrix = new Matrix4();\n\t\t\tvar ray = new Ray();\n\t\t\tvar sphere = new Sphere();\n\n\t\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\t\tvar precision = raycaster.linePrecision;\n\t\t\t\tvar precisionSq = precision * precision;\n\n\t\t\t\tvar geometry = this.geometry;\n\t\t\t\tvar matrixWorld = this.matrixWorld;\n\n\t\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\t\tsphere.copy( geometry.boundingSphere );\n\t\t\t\tsphere.applyMatrix4( matrixWorld );\n\n\t\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n\t\t\t\t//\n\n\t\t\t\tinverseMatrix.getInverse( matrixWorld );\n\t\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n\t\t\t\tvar vStart = new Vector3();\n\t\t\t\tvar vEnd = new Vector3();\n\t\t\t\tvar interSegment = new Vector3();\n\t\t\t\tvar interRay = new Vector3();\n\t\t\t\tvar step = (this && this.isLineSegments) ? 2 : 1;\n\n\t\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\t\tvar index = geometry.index;\n\t\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\t\tfor ( var i = 0, l = indices.length - 1; i < l; i += step ) {\n\n\t\t\t\t\t\t\tvar a = indices[ i ];\n\t\t\t\t\t\t\tvar b = indices[ i + 1 ];\n\n\t\t\t\t\t\t\tvStart.fromArray( positions, a * 3 );\n\t\t\t\t\t\t\tvEnd.fromArray( positions, b * 3 );\n\n\t\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n\t\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {\n\n\t\t\t\t\t\t\tvStart.fromArray( positions, 3 * i );\n\t\t\t\t\t\t\tvEnd.fromArray( positions, 3 * i + 3 );\n\n\t\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n\t\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\t\tvar nbVertices = vertices.length;\n\n\t\t\t\t\tfor ( var i = 0; i < nbVertices - 1; i += step ) {\n\n\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );\n\n\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}() ),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction LineSegments( geometry, material ) {\n\n\t\tLine.call( this, geometry, material );\n\n\t\tthis.type = 'LineSegments';\n\n\t}\n\n\tLineSegments.prototype = Object.assign( Object.create( Line.prototype ), {\n\n\t\tconstructor: LineSegments,\n\n\t\tisLineSegments: true\n\n\t} );\n\n\t/**\n\t * @author mgreter / http://github.com/mgreter\n\t */\n\n\tfunction LineLoop( geometry, material ) {\n\n\t\tLine.call( this, geometry, material );\n\n\t\tthis.type = 'LineLoop';\n\n\t}\n\n\tLineLoop.prototype = Object.assign( Object.create( Line.prototype ), {\n\n\t\tconstructor: LineLoop,\n\n\t\tisLineLoop: true,\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  size: <float>,\n\t *  sizeAttenuation: <bool>\n\t * }\n\t */\n\n\tfunction PointsMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'PointsMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\n\t\tthis.size = 1;\n\t\tthis.sizeAttenuation = true;\n\n\t\tthis.lights = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tPointsMaterial.prototype = Object.create( Material.prototype );\n\tPointsMaterial.prototype.constructor = PointsMaterial;\n\n\tPointsMaterial.prototype.isPointsMaterial = true;\n\n\tPointsMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.size = source.size;\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Points( geometry, material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Points';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new PointsMaterial( { color: Math.random() * 0xffffff } );\n\n\t}\n\n\tPoints.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Points,\n\n\t\tisPoints: true,\n\n\t\traycast: ( function () {\n\n\t\t\tvar inverseMatrix = new Matrix4();\n\t\t\tvar ray = new Ray();\n\t\t\tvar sphere = new Sphere();\n\n\t\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\t\tvar object = this;\n\t\t\t\tvar geometry = this.geometry;\n\t\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\t\tvar threshold = raycaster.params.Points.threshold;\n\n\t\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\t\tsphere.copy( geometry.boundingSphere );\n\t\t\t\tsphere.applyMatrix4( matrixWorld );\n\t\t\t\tsphere.radius += threshold;\n\n\t\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n\t\t\t\t//\n\n\t\t\t\tinverseMatrix.getInverse( matrixWorld );\n\t\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n\t\t\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\t\t\tvar localThresholdSq = localThreshold * localThreshold;\n\t\t\t\tvar position = new Vector3();\n\n\t\t\t\tfunction testPoint( point, index ) {\n\n\t\t\t\t\tvar rayPointDistanceSq = ray.distanceSqToPoint( point );\n\n\t\t\t\t\tif ( rayPointDistanceSq < localThresholdSq ) {\n\n\t\t\t\t\t\tvar intersectPoint = ray.closestPointToPoint( point );\n\t\t\t\t\t\tintersectPoint.applyMatrix4( matrixWorld );\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\n\t\t\t\t\t\t\tpoint: intersectPoint.clone(),\n\t\t\t\t\t\t\tindex: index,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tobject: object\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\t\tvar index = geometry.index;\n\t\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\t\tfor ( var i = 0, il = indices.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tvar a = indices[ i ];\n\n\t\t\t\t\t\t\tposition.fromArray( positions, a * 3 );\n\n\t\t\t\t\t\t\ttestPoint( position, a );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tposition.fromArray( positions, i * 3 );\n\n\t\t\t\t\t\t\ttestPoint( position, i );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar vertices = geometry.vertices;\n\n\t\t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\t\t\ttestPoint( vertices[ i ], i );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}() ),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Group() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Group';\n\n\t}\n\n\tGroup.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Group\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tTexture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.generateMipmaps = false;\n\n\t\tvar scope = this;\n\n\t\tfunction update() {\n\n\t\t\trequestAnimationFrame( update );\n\n\t\t\tif ( video.readyState >= video.HAVE_CURRENT_DATA ) {\n\n\t\t\t\tscope.needsUpdate = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tupdate();\n\n\t}\n\n\tVideoTexture.prototype = Object.create( Texture.prototype );\n\tVideoTexture.prototype.constructor = VideoTexture;\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.image = { width: width, height: height };\n\t\tthis.mipmaps = mipmaps;\n\n\t\t// no flipping for cube textures\n\t\t// (also flipping doesn't work for compressed textures )\n\n\t\tthis.flipY = false;\n\n\t\t// can't generate mipmaps for compressed textures\n\t\t// mips must be embedded in DDS files\n\n\t\tthis.generateMipmaps = false;\n\n\t}\n\n\tCompressedTexture.prototype = Object.create( Texture.prototype );\n\tCompressedTexture.prototype.constructor = CompressedTexture;\n\n\tCompressedTexture.prototype.isCompressedTexture = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tTexture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tCanvasTexture.prototype = Object.create( Texture.prototype );\n\tCanvasTexture.prototype.constructor = CanvasTexture;\n\n\t/**\n\t * @author Matt DesLauriers / @mattdesl\n\t * @author atix / arthursilber.de\n\t */\n\n\tfunction DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {\n\n\t\tformat = format !== undefined ? format : DepthFormat;\n\n\t\tif ( format !== DepthFormat && format !== DepthStencilFormat ) {\n\n\t\t\tthrow new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' )\n\n\t\t}\n\n\t\tif ( type === undefined && format === DepthFormat ) type = UnsignedShortType;\n\t\tif ( type === undefined && format === DepthStencilFormat ) type = UnsignedInt248Type;\n\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.image = { width: width, height: height };\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n\t\tthis.flipY = false;\n\t\tthis.generateMipmaps\t= false;\n\n\t}\n\n\tDepthTexture.prototype = Object.create( Texture.prototype );\n\tDepthTexture.prototype.constructor = DepthTexture;\n\tDepthTexture.prototype.isDepthTexture = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction WireframeGeometry( geometry ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'WireframeGeometry';\n\n\t\t// buffer\n\n\t\tvar vertices = [];\n\n\t\t// helper variables\n\n\t\tvar i, j, l, o, ol;\n\t\tvar edge = [ 0, 0 ], edges = {}, e, edge1, edge2;\n\t\tvar key, keys = [ 'a', 'b', 'c' ];\n\t\tvar vertex;\n\n\t\t// different logic for Geometry and BufferGeometry\n\n\t\tif ( geometry && geometry.isGeometry ) {\n\n\t\t\t// create a data structure that contains all edges without duplicates\n\n\t\t\tvar faces = geometry.faces;\n\n\t\t\tfor ( i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\tedge1 = face[ keys[ j ] ];\n\t\t\t\t\tedge2 = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates\n\t\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// generate vertices\n\n\t\t\tfor ( key in edges ) {\n\n\t\t\t\te = edges[ key ];\n\n\t\t\t\tvertex = geometry.vertices[ e.index1 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\tvertex = geometry.vertices[ e.index2 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t} else if ( geometry && geometry.isBufferGeometry ) {\n\n\t\t\tvar position, indices, groups;\n\t\t\tvar group, start, count;\n\t\t\tvar index1, index2;\n\n\t\t\tvertex = new Vector3();\n\n\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t// indexed BufferGeometry\n\n\t\t\t\tposition = geometry.attributes.position;\n\t\t\t\tindices = geometry.index;\n\t\t\t\tgroups = geometry.groups;\n\n\t\t\t\tif ( groups.length === 0 ) {\n\n\t\t\t\t\tgroups = [ { start: 0, count: indices.count, materialIndex: 0 } ];\n\n\t\t\t\t}\n\n\t\t\t\t// create a data structure that contains all eges without duplicates\n\n\t\t\t\tfor ( o = 0, ol = groups.length; o < ol; ++ o ) {\n\n\t\t\t\t\tgroup = groups[ o ];\n\n\t\t\t\t\tstart = group.start;\n\t\t\t\t\tcount = group.count;\n\n\t\t\t\t\tfor ( i = start, l = ( start + count ); i < l; i += 3 ) {\n\n\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t\tedge1 = indices.getX( i + j );\n\t\t\t\t\t\t\tedge2 = indices.getX( i + ( j + 1 ) % 3 );\n\t\t\t\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates\n\t\t\t\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\t\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\t\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// generate vertices\n\n\t\t\t\tfor ( key in edges ) {\n\n\t\t\t\t\te = edges[ key ];\n\n\t\t\t\t\tvertex.fromBufferAttribute( position, e.index1 );\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\tvertex.fromBufferAttribute( position, e.index2 );\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed BufferGeometry\n\n\t\t\t\tposition = geometry.attributes.position;\n\n\t\t\t\tfor ( i = 0, l = ( position.count / 3 ); i < l; i ++ ) {\n\n\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t// three edges per triangle, an edge is represented as (index1, index2)\n\t\t\t\t\t\t// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\n\n\t\t\t\t\t\tindex1 = 3 * i + j;\n\t\t\t\t\t\tvertex.fromBufferAttribute( position, index1 );\n\t\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t\tindex2 = 3 * i + ( ( j + 1 ) % 3 );\n\t\t\t\t\t\tvertex.fromBufferAttribute( position, index2 );\n\t\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t}\n\n\tWireframeGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tWireframeGeometry.prototype.constructor = WireframeGeometry;\n\n\t/**\n\t * @author zz85 / https://github.com/zz85\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * Parametric Surfaces Geometry\n\t * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\n\t */\n\n\t// ParametricGeometry\n\n\tfunction ParametricGeometry( func, slices, stacks ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'ParametricGeometry';\n\n\t\tthis.parameters = {\n\t\t\tfunc: func,\n\t\t\tslices: slices,\n\t\t\tstacks: stacks\n\t\t};\n\n\t\tthis.fromBufferGeometry( new ParametricBufferGeometry( func, slices, stacks ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tParametricGeometry.prototype = Object.create( Geometry.prototype );\n\tParametricGeometry.prototype.constructor = ParametricGeometry;\n\n\t// ParametricBufferGeometry\n\n\tfunction ParametricBufferGeometry( func, slices, stacks ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'ParametricBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tfunc: func,\n\t\t\tslices: slices,\n\t\t\tstacks: stacks\n\t\t};\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\tvar EPS = 0.00001;\n\n\t\tvar normal = new Vector3();\n\n\t\tvar p0 = new Vector3(), p1 = new Vector3();\n\t\tvar pu = new Vector3(), pv = new Vector3();\n\n\t\tvar i, j;\n\n\t\t// generate vertices, normals and uvs\n\n\t\tvar sliceCount = slices + 1;\n\n\t\tfor ( i = 0; i <= stacks; i ++ ) {\n\n\t\t\tvar v = i / stacks;\n\n\t\t\tfor ( j = 0; j <= slices; j ++ ) {\n\n\t\t\t\tvar u = j / slices;\n\n\t\t\t\t// vertex\n\n\t\t\t\tp0 = func( u, v, p0 );\n\t\t\t\tvertices.push( p0.x, p0.y, p0.z );\n\n\t\t\t\t// normal\n\n\t\t\t\t// approximate tangent vectors via finite differences\n\n\t\t\t\tif ( u - EPS >= 0 ) {\n\n\t\t\t\t\tp1 = func( u - EPS, v, p1 );\n\t\t\t\t\tpu.subVectors( p0, p1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tp1 = func( u + EPS, v, p1 );\n\t\t\t\t\tpu.subVectors( p1, p0 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( v - EPS >= 0 ) {\n\n\t\t\t\t\tp1 = func( u, v - EPS, p1 );\n\t\t\t\t\tpv.subVectors( p0, p1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tp1 = func( u, v + EPS, p1 );\n\t\t\t\t\tpv.subVectors( p1, p0 );\n\n\t\t\t\t}\n\n\t\t\t\t// cross product of tangent vectors returns surface normal\n\n\t\t\t\tnormal.crossVectors( pu, pv ).normalize();\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( u, v );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( i = 0; i < stacks; i ++ ) {\n\n\t\t\tfor ( j = 0; j < slices; j ++ ) {\n\n\t\t\t\tvar a = i * sliceCount + j;\n\t\t\t\tvar b = i * sliceCount + j + 1;\n\t\t\t\tvar c = ( i + 1 ) * sliceCount + j + 1;\n\t\t\t\tvar d = ( i + 1 ) * sliceCount + j;\n\n\t\t\t\t// faces one and two\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tParametricBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;\n\n\t/**\n\t * @author clockworkgeek / https://github.com/clockworkgeek\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// PolyhedronGeometry\n\n\tfunction PolyhedronGeometry( vertices, indices, radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'PolyhedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tvertices: vertices,\n\t\t\tindices: indices,\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new PolyhedronBufferGeometry( vertices, indices, radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tPolyhedronGeometry.prototype = Object.create( Geometry.prototype );\n\tPolyhedronGeometry.prototype.constructor = PolyhedronGeometry;\n\n\t// PolyhedronBufferGeometry\n\n\tfunction PolyhedronBufferGeometry( vertices, indices, radius, detail ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'PolyhedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tvertices: vertices,\n\t\t\tindices: indices,\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tradius = radius || 1;\n\t\tdetail = detail || 0;\n\n\t\t// default buffer data\n\n\t\tvar vertexBuffer = [];\n\t\tvar uvBuffer = [];\n\n\t\t// the subdivision creates the vertex buffer data\n\n\t\tsubdivide( detail );\n\n\t\t// all vertices should lie on a conceptual sphere with a given radius\n\n\t\tappplyRadius( radius );\n\n\t\t// finally, create the uv data\n\n\t\tgenerateUVs();\n\n\t\t// build non-indexed geometry\n\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );\n\n\t\tif ( detail === 0 ) {\n\n\t\t\tthis.computeVertexNormals(); // flat normals\n\n\t\t} else {\n\n\t\t\tthis.normalizeNormals(); // smooth normals\n\n\t\t}\n\n\t\t// helper functions\n\n\t\tfunction subdivide( detail ) {\n\n\t\t\tvar a = new Vector3();\n\t\t\tvar b = new Vector3();\n\t\t\tvar c = new Vector3();\n\n\t\t\t// iterate over all faces and apply a subdivison with the given detail value\n\n\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t\t// get the vertices of the face\n\n\t\t\t\tgetVertexByIndex( indices[ i + 0 ], a );\n\t\t\t\tgetVertexByIndex( indices[ i + 1 ], b );\n\t\t\t\tgetVertexByIndex( indices[ i + 2 ], c );\n\n\t\t\t\t// perform subdivision\n\n\t\t\t\tsubdivideFace( a, b, c, detail );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction subdivideFace( a, b, c, detail ) {\n\n\t\t\tvar cols = Math.pow( 2, detail );\n\n\t\t\t// we use this multidimensional array as a data structure for creating the subdivision\n\n\t\t\tvar v = [];\n\n\t\t\tvar i, j;\n\n\t\t\t// construct all of the vertices for this subdivision\n\n\t\t\tfor ( i = 0; i <= cols; i ++ ) {\n\n\t\t\t\tv[ i ] = [];\n\n\t\t\t\tvar aj = a.clone().lerp( c, i / cols );\n\t\t\t\tvar bj = b.clone().lerp( c, i / cols );\n\n\t\t\t\tvar rows = cols - i;\n\n\t\t\t\tfor ( j = 0; j <= rows; j ++ ) {\n\n\t\t\t\t\tif ( j === 0 && i === cols ) {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj.clone().lerp( bj, j / rows );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// construct all of the faces\n\n\t\t\tfor ( i = 0; i < cols; i ++ ) {\n\n\t\t\t\tfor ( j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\n\n\t\t\t\t\tvar k = Math.floor( j / 2 );\n\n\t\t\t\t\tif ( j % 2 === 0 ) {\n\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\t\t\t\t\t\tpushVertex( v[ i ][ k ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction appplyRadius( radius ) {\n\n\t\t\tvar vertex = new Vector3();\n\n\t\t\t// iterate over the entire buffer and apply the radius to each vertex\n\n\t\t\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\tvertex.normalize().multiplyScalar( radius );\n\n\t\t\t\tvertexBuffer[ i + 0 ] = vertex.x;\n\t\t\t\tvertexBuffer[ i + 1 ] = vertex.y;\n\t\t\t\tvertexBuffer[ i + 2 ] = vertex.z;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateUVs() {\n\n\t\t\tvar vertex = new Vector3();\n\n\t\t\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\tvar u = azimuth( vertex ) / 2 / Math.PI + 0.5;\n\t\t\t\tvar v = inclination( vertex ) / Math.PI + 0.5;\n\t\t\t\tuvBuffer.push( u, 1 - v );\n\n\t\t\t}\n\n\t\t\tcorrectUVs();\n\n\t\t\tcorrectSeam();\n\n\t\t}\n\n\t\tfunction correctSeam() {\n\n\t\t\t// handle case when face straddles the seam, see #3269\n\n\t\t\tfor ( var i = 0; i < uvBuffer.length; i += 6 ) {\n\n\t\t\t\t// uv data of a single face\n\n\t\t\t\tvar x0 = uvBuffer[ i + 0 ];\n\t\t\t\tvar x1 = uvBuffer[ i + 2 ];\n\t\t\t\tvar x2 = uvBuffer[ i + 4 ];\n\n\t\t\t\tvar max = Math.max( x0, x1, x2 );\n\t\t\t\tvar min = Math.min( x0, x1, x2 );\n\n\t\t\t\t// 0.9 is somewhat arbitrary\n\n\t\t\t\tif ( max > 0.9 && min < 0.1 ) {\n\n\t\t\t\t\tif ( x0 < 0.2 ) uvBuffer[ i + 0 ] += 1;\n\t\t\t\t\tif ( x1 < 0.2 ) uvBuffer[ i + 2 ] += 1;\n\t\t\t\t\tif ( x2 < 0.2 ) uvBuffer[ i + 4 ] += 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction pushVertex( vertex ) {\n\n\t\t\tvertexBuffer.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t\tfunction getVertexByIndex( index, vertex ) {\n\n\t\t\tvar stride = index * 3;\n\n\t\t\tvertex.x = vertices[ stride + 0 ];\n\t\t\tvertex.y = vertices[ stride + 1 ];\n\t\t\tvertex.z = vertices[ stride + 2 ];\n\n\t\t}\n\n\t\tfunction correctUVs() {\n\n\t\t\tvar a = new Vector3();\n\t\t\tvar b = new Vector3();\n\t\t\tvar c = new Vector3();\n\n\t\t\tvar centroid = new Vector3();\n\n\t\t\tvar uvA = new Vector2();\n\t\t\tvar uvB = new Vector2();\n\t\t\tvar uvC = new Vector2();\n\n\t\t\tfor ( var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {\n\n\t\t\t\ta.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );\n\t\t\t\tb.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );\n\t\t\t\tc.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );\n\n\t\t\t\tuvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );\n\t\t\t\tuvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );\n\t\t\t\tuvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );\n\n\t\t\t\tcentroid.copy( a ).add( b ).add( c ).divideScalar( 3 );\n\n\t\t\t\tvar azi = azimuth( centroid );\n\n\t\t\t\tcorrectUV( uvA, j + 0, a, azi );\n\t\t\t\tcorrectUV( uvB, j + 2, b, azi );\n\t\t\t\tcorrectUV( uvC, j + 4, c, azi );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction correctUV( uv, stride, vector, azimuth ) {\n\n\t\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {\n\n\t\t\t\tuvBuffer[ stride ] = uv.x - 1;\n\n\t\t\t}\n\n\t\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {\n\n\t\t\t\tuvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Angle around the Y axis, counter-clockwise when looking from above.\n\n\t\tfunction azimuth( vector ) {\n\n\t\t\treturn Math.atan2( vector.z, - vector.x );\n\n\t\t}\n\n\n\t\t// Angle above the XZ plane.\n\n\t\tfunction inclination( vector ) {\n\n\t\t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\n\n\t\t}\n\n\t}\n\n\tPolyhedronBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tPolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;\n\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// TetrahedronGeometry\n\n\tfunction TetrahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TetrahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new TetrahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTetrahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tTetrahedronGeometry.prototype.constructor = TetrahedronGeometry;\n\n\t// TetrahedronBufferGeometry\n\n\tfunction TetrahedronBufferGeometry( radius, detail ) {\n\n\t\tvar vertices = [\n\t\t\t1,  1,  1,   - 1, - 1,  1,   - 1,  1, - 1,    1, - 1, - 1\n\t\t];\n\n\t\tvar indices = [\n\t\t\t2,  1,  0,    0,  3,  2,    1,  3,  0,    2,  3,  1\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'TetrahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tTetrahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tTetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;\n\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// OctahedronGeometry\n\n\tfunction OctahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'OctahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new OctahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tOctahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tOctahedronGeometry.prototype.constructor = OctahedronGeometry;\n\n\t// OctahedronBufferGeometry\n\n\tfunction OctahedronBufferGeometry( radius, detail ) {\n\n\t\tvar vertices = [\n\t\t\t1, 0, 0,   - 1, 0, 0,    0, 1, 0,    0, - 1, 0,    0, 0, 1,    0, 0, - 1\n\t\t];\n\n\t\tvar indices = [\n\t\t\t0, 2, 4,    0, 4, 3,    0, 3, 5,    0, 5, 2,    1, 2, 5,    1, 5, 3,    1, 3, 4,    1, 4, 2\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'OctahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tOctahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tOctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;\n\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// IcosahedronGeometry\n\n\tfunction IcosahedronGeometry( radius, detail ) {\n\n\t \tGeometry.call( this );\n\n\t\tthis.type = 'IcosahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new IcosahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tIcosahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tIcosahedronGeometry.prototype.constructor = IcosahedronGeometry;\n\n\t// IcosahedronBufferGeometry\n\n\tfunction IcosahedronBufferGeometry( radius, detail ) {\n\n\t\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\n\t\tvar vertices = [\n\t\t\t- 1,  t,  0,    1,  t,  0,   - 1, - t,  0,    1, - t,  0,\n\t\t\t 0, - 1,  t,    0,  1,  t,    0, - 1, - t,    0,  1, - t,\n\t\t\t t,  0, - 1,    t,  0,  1,   - t,  0, - 1,   - t,  0,  1\n\t\t];\n\n\t\tvar indices = [\n\t\t\t 0, 11,  5,    0,  5,  1,    0,  1,  7,    0,  7, 10,    0, 10, 11,\n\t\t\t 1,  5,  9,    5, 11,  4,   11, 10,  2,   10,  7,  6,    7,  1,  8,\n\t\t\t 3,  9,  4,    3,  4,  2,    3,  2,  6,    3,  6,  8,    3,  8,  9,\n\t\t\t 4,  9,  5,    2,  4, 11,    6,  2, 10,    8,  6,  7,    9,  8,  1\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'IcosahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tIcosahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tIcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;\n\n\t/**\n\t * @author Abe Pazos / https://hamoid.com\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// DodecahedronGeometry\n\n\tfunction DodecahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'DodecahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new DodecahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tDodecahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tDodecahedronGeometry.prototype.constructor = DodecahedronGeometry;\n\n\t// DodecahedronBufferGeometry\n\n\tfunction DodecahedronBufferGeometry( radius, detail ) {\n\n\t\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\t\tvar r = 1 / t;\n\n\t\tvar vertices = [\n\n\t\t\t// (±1, ±1, ±1)\n\t\t\t- 1, - 1, - 1,    - 1, - 1,  1,\n\t\t\t- 1,  1, - 1,    - 1,  1,  1,\n\t\t\t  1, - 1, - 1,     1, - 1,  1,\n\t\t\t  1,  1, - 1,     1,  1,  1,\n\n\t\t\t// (0, ±1/φ, ±φ)\n\t\t\t 0, - r, - t,     0, - r,  t,\n\t\t\t 0,  r, - t,     0,  r,  t,\n\n\t\t\t// (±1/φ, ±φ, 0)\n\t\t\t- r, - t,  0,    - r,  t,  0,\n\t\t\t r, - t,  0,     r,  t,  0,\n\n\t\t\t// (±φ, 0, ±1/φ)\n\t\t\t- t,  0, - r,     t,  0, - r,\n\t\t\t- t,  0,  r,     t,  0,  r\n\t\t];\n\n\t\tvar indices = [\n\t\t\t 3, 11,  7,      3,  7, 15,      3, 15, 13,\n\t\t\t 7, 19, 17,      7, 17,  6,      7,  6, 15,\n\t\t\t17,  4,  8,     17,  8, 10,     17, 10,  6,\n\t\t\t 8,  0, 16,      8, 16,  2,      8,  2, 10,\n\t\t\t 0, 12,  1,      0,  1, 18,      0, 18, 16,\n\t\t\t 6, 10,  2,      6,  2, 13,      6, 13, 15,\n\t\t\t 2, 16, 18,      2, 18,  3,      2,  3, 13,\n\t\t\t18,  1,  9,     18,  9, 11,     18, 11,  3,\n\t\t\t 4, 14, 12,      4, 12,  0,      4,  0,  8,\n\t\t\t11,  9,  5,     11,  5, 19,     11, 19,  7,\n\t\t\t19,  5, 14,     19, 14,  4,     19,  4, 17,\n\t\t\t 1, 12, 14,      1, 14,  5,      1,  5,  9\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'DodecahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tDodecahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tDodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;\n\n\t/**\n\t * @author oosmoxiecode / https://github.com/oosmoxiecode\n\t * @author WestLangley / https://github.com/WestLangley\n\t * @author zz85 / https://github.com/zz85\n\t * @author miningold / https://github.com/miningold\n\t * @author jonobr1 / https://github.com/jonobr1\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t */\n\n\t// TubeGeometry\n\n\tfunction TubeGeometry( path, tubularSegments, radius, radialSegments, closed, taper ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TubeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpath: path,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradius: radius,\n\t\t\tradialSegments: radialSegments,\n\t\t\tclosed: closed\n\t\t};\n\n\t\tif ( taper !== undefined ) console.warn( 'THREE.TubeGeometry: taper has been removed.' );\n\n\t\tvar bufferGeometry = new TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed );\n\n\t\t// expose internals\n\n\t\tthis.tangents = bufferGeometry.tangents;\n\t\tthis.normals = bufferGeometry.normals;\n\t\tthis.binormals = bufferGeometry.binormals;\n\n\t\t// create geometry\n\n\t\tthis.fromBufferGeometry( bufferGeometry );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTubeGeometry.prototype = Object.create( Geometry.prototype );\n\tTubeGeometry.prototype.constructor = TubeGeometry;\n\n\t// TubeBufferGeometry\n\n\tfunction TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'TubeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpath: path,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradius: radius,\n\t\t\tradialSegments: radialSegments,\n\t\t\tclosed: closed\n\t\t};\n\n\t\ttubularSegments = tubularSegments || 64;\n\t\tradius = radius || 1;\n\t\tradialSegments = radialSegments || 8;\n\t\tclosed = closed || false;\n\n\t\tvar frames = path.computeFrenetFrames( tubularSegments, closed );\n\n\t\t// expose internals\n\n\t\tthis.tangents = frames.tangents;\n\t\tthis.normals = frames.normals;\n\t\tthis.binormals = frames.binormals;\n\n\t\t// helper variables\n\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\t\tvar uv = new Vector2();\n\n\t\tvar i, j;\n\n\t\t// buffer\n\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\t\tvar indices = [];\n\n\t\t// create buffer data\n\n\t\tgenerateBufferData();\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// functions\n\n\t\tfunction generateBufferData() {\n\n\t\t\tfor ( i = 0; i < tubularSegments; i ++ ) {\n\n\t\t\t\tgenerateSegment( i );\n\n\t\t\t}\n\n\t\t\t// if the geometry is not closed, generate the last row of vertices and normals\n\t\t\t// at the regular position on the given path\n\t\t\t//\n\t\t\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\n\t\t\tgenerateSegment( ( closed === false ) ? tubularSegments : 0 );\n\n\t\t\t// uvs are generated in a separate function.\n\t\t\t// this makes it easy compute correct values for closed geometries\n\n\t\t\tgenerateUVs();\n\n\t\t\t// finally create faces\n\n\t\t\tgenerateIndices();\n\n\t\t}\n\n\t\tfunction generateSegment( i ) {\n\n\t\t\t// we use getPointAt to sample evenly distributed points from the given path\n\n\t\t\tvar P = path.getPointAt( i / tubularSegments );\n\n\t\t\t// retrieve corresponding normal and binormal\n\n\t\t\tvar N = frames.normals[ i ];\n\t\t\tvar B = frames.binormals[ i ];\n\n\t\t\t// generate normals and vertices for the current segment\n\n\t\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\tvar sin =   Math.sin( v );\n\t\t\t\tvar cos = - Math.cos( v );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.x = ( cos * N.x + sin * B.x );\n\t\t\t\tnormal.y = ( cos * N.y + sin * B.y );\n\t\t\t\tnormal.z = ( cos * N.z + sin * B.z );\n\t\t\t\tnormal.normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = P.x + radius * normal.x;\n\t\t\t\tvertex.y = P.y + radius * normal.y;\n\t\t\t\tvertex.z = P.z + radius * normal.z;\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateIndices() {\n\n\t\t\tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\t\tvar c = ( radialSegments + 1 ) * j + i;\n\t\t\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateUVs() {\n\n\t\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\t\tuv.x = i / tubularSegments;\n\t\t\t\t\tuv.y = j / radialSegments;\n\n\t\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tTubeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tTubeBufferGeometry.prototype.constructor = TubeBufferGeometry;\n\n\t/**\n\t * @author oosmoxiecode\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * based on http://www.blackpawn.com/texts/pqtorus/\n\t */\n\n\t// TorusKnotGeometry\n\n\tfunction TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TorusKnotGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t\tp: p,\n\t\t\tq: q\n\t\t};\n\n\t\tif ( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );\n\n\t\tthis.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTorusKnotGeometry.prototype = Object.create( Geometry.prototype );\n\tTorusKnotGeometry.prototype.constructor = TorusKnotGeometry;\n\n\t// TorusKnotBufferGeometry\n\n\tfunction TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'TorusKnotBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t\tp: p,\n\t\t\tq: q\n\t\t};\n\n\t\tradius = radius || 100;\n\t\ttube = tube || 40;\n\t\ttubularSegments = Math.floor( tubularSegments ) || 64;\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\tp = p || 2;\n\t\tq = q || 3;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar i, j;\n\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\n\t\tvar P1 = new Vector3();\n\t\tvar P2 = new Vector3();\n\n\t\tvar B = new Vector3();\n\t\tvar T = new Vector3();\n\t\tvar N = new Vector3();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( i = 0; i <= tubularSegments; ++ i ) {\n\n\t\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\n\t\t\tvar u = i / tubularSegments * p * Math.PI * 2;\n\n\t\t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n\t\t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\n\t\t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\n\n\t\t\t// calculate orthonormal basis\n\n\t\t\tT.subVectors( P2, P1 );\n\t\t\tN.addVectors( P2, P1 );\n\t\t\tB.crossVectors( T, N );\n\t\t\tN.crossVectors( B, T );\n\n\t\t\t// normalize B, N. T can be ignored, we don't use it\n\n\t\t\tB.normalize();\n\t\t\tN.normalize();\n\n\t\t\tfor ( j = 0; j <= radialSegments; ++ j ) {\n\n\t\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\t\t\t\tvar cx = - tube * Math.cos( v );\n\t\t\t\tvar cy = tube * Math.sin( v );\n\n\t\t\t\t// now calculate the final vertex position.\n\t\t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\n\t\t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\n\t\t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\n\t\t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\n\t\t\t\tnormal.subVectors( vertex, P1 ).normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\t// indices\n\n\t\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\tvar c = ( radialSegments + 1 ) * j + i;\n\t\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// this function calculates the current position on the torus curve\n\n\t\tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\n\n\t\t\tvar cu = Math.cos( u );\n\t\t\tvar su = Math.sin( u );\n\t\t\tvar quOverP = q / p * u;\n\t\t\tvar cs = Math.cos( quOverP );\n\n\t\t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\n\t\t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\n\t\t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\n\n\t\t}\n\n\t}\n\n\tTorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tTorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;\n\n\t/**\n\t * @author oosmoxiecode\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// TorusGeometry\n\n\tfunction TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TorusGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\tradialSegments: radialSegments,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tarc: arc\n\t\t};\n\n\t\tthis.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTorusGeometry.prototype = Object.create( Geometry.prototype );\n\tTorusGeometry.prototype.constructor = TorusGeometry;\n\n\t// TorusBufferGeometry\n\n\tfunction TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'TorusBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\tradialSegments: radialSegments,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tarc: arc\n\t\t};\n\n\t\tradius = radius || 100;\n\t\ttube = tube || 40;\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\ttubularSegments = Math.floor( tubularSegments ) || 6;\n\t\tarc = arc || Math.PI * 2;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar center = new Vector3();\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\n\t\tvar j, i;\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tvar u = i / tubularSegments * arc;\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n\t\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n\t\t\t\tvertex.z = tube * Math.sin( v );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tcenter.x = radius * Math.cos( u );\n\t\t\t\tcenter.y = radius * Math.sin( u );\n\t\t\t\tnormal.subVectors( vertex, center ).normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( j = 1; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( i = 1; i <= tubularSegments; i ++ ) {\n\n\t\t\t\t// indices\n\n\t\t\t\tvar a = ( tubularSegments + 1 ) * j + i - 1;\n\t\t\t\tvar b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n\t\t\t\tvar c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n\t\t\t\tvar d = ( tubularSegments + 1 ) * j + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tTorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tTorusBufferGeometry.prototype.constructor = TorusBufferGeometry;\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t */\n\n\tvar ShapeUtils = {\n\n\t\t// calculate area of the contour polygon\n\n\t\tarea: function ( contour ) {\n\n\t\t\tvar n = contour.length;\n\t\t\tvar a = 0.0;\n\n\t\t\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\n\n\t\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n\n\t\t\t}\n\n\t\t\treturn a * 0.5;\n\n\t\t},\n\n\t\ttriangulate: ( function () {\n\n\t\t\t/**\n\t\t\t * This code is a quick port of code written in C++ which was submitted to\n\t\t\t * flipcode.com by John W. Ratcliff  // July 22, 2000\n\t\t\t * See original code and more information here:\n\t\t\t * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml\n\t\t\t *\n\t\t\t * ported to actionscript by Zevan Rosser\n\t\t\t * www.actionsnippet.com\n\t\t\t *\n\t\t\t * ported to javascript by Joshua Koo\n\t\t\t * http://www.lab4games.net/zz85/blog\n\t\t\t *\n\t\t\t */\n\n\t\t\tfunction snip( contour, u, v, w, n, verts ) {\n\n\t\t\t\tvar p;\n\t\t\t\tvar ax, ay, bx, by;\n\t\t\t\tvar cx, cy, px, py;\n\n\t\t\t\tax = contour[ verts[ u ] ].x;\n\t\t\t\tay = contour[ verts[ u ] ].y;\n\n\t\t\t\tbx = contour[ verts[ v ] ].x;\n\t\t\t\tby = contour[ verts[ v ] ].y;\n\n\t\t\t\tcx = contour[ verts[ w ] ].x;\n\t\t\t\tcy = contour[ verts[ w ] ].y;\n\n\t\t\t\tif ( ( bx - ax ) * ( cy - ay ) - ( by - ay ) * ( cx - ax ) <= 0 ) return false;\n\n\t\t\t\tvar aX, aY, bX, bY, cX, cY;\n\t\t\t\tvar apx, apy, bpx, bpy, cpx, cpy;\n\t\t\t\tvar cCROSSap, bCROSScp, aCROSSbp;\n\n\t\t\t\taX = cx - bx;  aY = cy - by;\n\t\t\t\tbX = ax - cx;  bY = ay - cy;\n\t\t\t\tcX = bx - ax;  cY = by - ay;\n\n\t\t\t\tfor ( p = 0; p < n; p ++ ) {\n\n\t\t\t\t\tpx = contour[ verts[ p ] ].x;\n\t\t\t\t\tpy = contour[ verts[ p ] ].y;\n\n\t\t\t\t\tif ( ( ( px === ax ) && ( py === ay ) ) ||\n\t\t\t\t\t\t ( ( px === bx ) && ( py === by ) ) ||\n\t\t\t\t\t\t ( ( px === cx ) && ( py === cy ) ) )\tcontinue;\n\n\t\t\t\t\tapx = px - ax;  apy = py - ay;\n\t\t\t\t\tbpx = px - bx;  bpy = py - by;\n\t\t\t\t\tcpx = px - cx;  cpy = py - cy;\n\n\t\t\t\t\t// see if p is inside triangle abc\n\n\t\t\t\t\taCROSSbp = aX * bpy - aY * bpx;\n\t\t\t\t\tcCROSSap = cX * apy - cY * apx;\n\t\t\t\t\tbCROSScp = bX * cpy - bY * cpx;\n\n\t\t\t\t\tif ( ( aCROSSbp >= - Number.EPSILON ) && ( bCROSScp >= - Number.EPSILON ) && ( cCROSSap >= - Number.EPSILON ) ) return false;\n\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\t// takes in an contour array and returns\n\n\t\t\treturn function triangulate( contour, indices ) {\n\n\t\t\t\tvar n = contour.length;\n\n\t\t\t\tif ( n < 3 ) return null;\n\n\t\t\t\tvar result = [],\n\t\t\t\t\tverts = [],\n\t\t\t\t\tvertIndices = [];\n\n\t\t\t\t/* we want a counter-clockwise polygon in verts */\n\n\t\t\t\tvar u, v, w;\n\n\t\t\t\tif ( ShapeUtils.area( contour ) > 0.0 ) {\n\n\t\t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = v;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = ( n - 1 ) - v;\n\n\t\t\t\t}\n\n\t\t\t\tvar nv = n;\n\n\t\t\t\t/*  remove nv - 2 vertices, creating 1 triangle every time */\n\n\t\t\t\tvar count = 2 * nv;   /* error detection */\n\n\t\t\t\tfor ( v = nv - 1; nv > 2; ) {\n\n\t\t\t\t\t/* if we loop, it is probably a non-simple polygon */\n\n\t\t\t\t\tif ( ( count -- ) <= 0 ) {\n\n\t\t\t\t\t\t//** Triangulate: ERROR - probable bad polygon!\n\n\t\t\t\t\t\t//throw ( \"Warning, unable to triangulate polygon!\" );\n\t\t\t\t\t\t//return null;\n\t\t\t\t\t\t// Sometimes warning is fine, especially polygons are triangulated in reverse.\n\t\t\t\t\t\tconsole.warn( 'THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()' );\n\n\t\t\t\t\t\tif ( indices ) return vertIndices;\n\t\t\t\t\t\treturn result;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t/* three consecutive vertices in current polygon, <u,v,w> */\n\n\t\t\t\t\tu = v; \t \tif ( nv <= u ) u = 0;     /* previous */\n\t\t\t\t\tv = u + 1;  if ( nv <= v ) v = 0;     /* new v    */\n\t\t\t\t\tw = v + 1;  if ( nv <= w ) w = 0;     /* next     */\n\n\t\t\t\t\tif ( snip( contour, u, v, w, nv, verts ) ) {\n\n\t\t\t\t\t\tvar a, b, c, s, t;\n\n\t\t\t\t\t\t/* true names of the vertices */\n\n\t\t\t\t\t\ta = verts[ u ];\n\t\t\t\t\t\tb = verts[ v ];\n\t\t\t\t\t\tc = verts[ w ];\n\n\t\t\t\t\t\t/* output Triangle */\n\n\t\t\t\t\t\tresult.push( [ contour[ a ],\n\t\t\t\t\t\t\tcontour[ b ],\n\t\t\t\t\t\t\tcontour[ c ] ] );\n\n\n\t\t\t\t\t\tvertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );\n\n\t\t\t\t\t\t/* remove v from the remaining polygon */\n\n\t\t\t\t\t\tfor ( s = v, t = v + 1; t < nv; s ++, t ++ ) {\n\n\t\t\t\t\t\t\tverts[ s ] = verts[ t ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tnv --;\n\n\t\t\t\t\t\t/* reset error detection counter */\n\n\t\t\t\t\t\tcount = 2 * nv;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( indices ) return vertIndices;\n\t\t\t\treturn result;\n\n\t\t\t}\n\n\t\t} )(),\n\n\t\ttriangulateShape: function ( contour, holes ) {\n\n\t\t\tfunction removeDupEndPts(points) {\n\n\t\t\t\tvar l = points.length;\n\n\t\t\t\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\t\t\tpoints.pop();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tremoveDupEndPts( contour );\n\t\t\tholes.forEach( removeDupEndPts );\n\n\t\t\tfunction point_in_segment_2D_colin( inSegPt1, inSegPt2, inOtherPt ) {\n\n\t\t\t\t// inOtherPt needs to be collinear to the inSegment\n\t\t\t\tif ( inSegPt1.x !== inSegPt2.x ) {\n\n\t\t\t\t\tif ( inSegPt1.x < inSegPt2.x ) {\n\n\t\t\t\t\t\treturn\t( ( inSegPt1.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt2.x ) );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\treturn\t( ( inSegPt2.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt1.x ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( inSegPt1.y < inSegPt2.y ) {\n\n\t\t\t\t\t\treturn\t( ( inSegPt1.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt2.y ) );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\treturn\t( ( inSegPt2.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt1.y ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction intersect_segments_2D( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1, inSeg2Pt2, inExcludeAdjacentSegs ) {\n\n\t\t\t\tvar seg1dx = inSeg1Pt2.x - inSeg1Pt1.x,   seg1dy = inSeg1Pt2.y - inSeg1Pt1.y;\n\t\t\t\tvar seg2dx = inSeg2Pt2.x - inSeg2Pt1.x,   seg2dy = inSeg2Pt2.y - inSeg2Pt1.y;\n\n\t\t\t\tvar seg1seg2dx = inSeg1Pt1.x - inSeg2Pt1.x;\n\t\t\t\tvar seg1seg2dy = inSeg1Pt1.y - inSeg2Pt1.y;\n\n\t\t\t\tvar limit\t\t= seg1dy * seg2dx - seg1dx * seg2dy;\n\t\t\t\tvar perpSeg1\t= seg1dy * seg1seg2dx - seg1dx * seg1seg2dy;\n\n\t\t\t\tif ( Math.abs( limit ) > Number.EPSILON ) {\n\n\t\t\t\t\t// not parallel\n\n\t\t\t\t\tvar perpSeg2;\n\t\t\t\t\tif ( limit > 0 ) {\n\n\t\t\t\t\t\tif ( ( perpSeg1 < 0 ) || ( perpSeg1 > limit ) ) \t\treturn [];\n\t\t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\n\t\t\t\t\t\tif ( ( perpSeg2 < 0 ) || ( perpSeg2 > limit ) ) \t\treturn [];\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( ( perpSeg1 > 0 ) || ( perpSeg1 < limit ) ) \t\treturn [];\n\t\t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\n\t\t\t\t\t\tif ( ( perpSeg2 > 0 ) || ( perpSeg2 < limit ) ) \t\treturn [];\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// i.e. to reduce rounding errors\n\t\t\t\t\t// intersection at endpoint of segment#1?\n\t\t\t\t\tif ( perpSeg2 === 0 ) {\n\n\t\t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\n\t\t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\n\t\t\t\t\t\treturn [ inSeg1Pt1 ];\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( perpSeg2 === limit ) {\n\n\t\t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\n\t\t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\n\t\t\t\t\t\treturn [ inSeg1Pt2 ];\n\n\t\t\t\t\t}\n\t\t\t\t\t// intersection at endpoint of segment#2?\n\t\t\t\t\tif ( perpSeg1 === 0 )\t\treturn [ inSeg2Pt1 ];\n\t\t\t\t\tif ( perpSeg1 === limit )\treturn [ inSeg2Pt2 ];\n\n\t\t\t\t\t// return real intersection point\n\t\t\t\t\tvar factorSeg1 = perpSeg2 / limit;\n\t\t\t\t\treturn\t[ { x: inSeg1Pt1.x + factorSeg1 * seg1dx,\n\t\t\t\t\t\t\t\ty: inSeg1Pt1.y + factorSeg1 * seg1dy } ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// parallel or collinear\n\t\t\t\t\tif ( ( perpSeg1 !== 0 ) ||\n\t\t\t\t\t\t ( seg2dy * seg1seg2dx !== seg2dx * seg1seg2dy ) ) \t\t\treturn [];\n\n\t\t\t\t\t// they are collinear or degenerate\n\t\t\t\t\tvar seg1Pt = ( ( seg1dx === 0 ) && ( seg1dy === 0 ) );\t// segment1 is just a point?\n\t\t\t\t\tvar seg2Pt = ( ( seg2dx === 0 ) && ( seg2dy === 0 ) );\t// segment2 is just a point?\n\t\t\t\t\t// both segments are points\n\t\t\t\t\tif ( seg1Pt && seg2Pt ) {\n\n\t\t\t\t\t\tif ( ( inSeg1Pt1.x !== inSeg2Pt1.x ) ||\n\t\t\t\t\t\t\t ( inSeg1Pt1.y !== inSeg2Pt1.y ) )\t\treturn [];\t// they are distinct  points\n\t\t\t\t\t\treturn [ inSeg1Pt1 ];                 \t\t\t\t\t\t// they are the same point\n\n\t\t\t\t\t}\n\t\t\t\t\t// segment#1  is a single point\n\t\t\t\t\tif ( seg1Pt ) {\n\n\t\t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg2Pt1, inSeg2Pt2, inSeg1Pt1 ) )\t\treturn [];\t\t// but not in segment#2\n\t\t\t\t\t\treturn [ inSeg1Pt1 ];\n\n\t\t\t\t\t}\n\t\t\t\t\t// segment#2  is a single point\n\t\t\t\t\tif ( seg2Pt ) {\n\n\t\t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1 ) )\t\treturn [];\t\t// but not in segment#1\n\t\t\t\t\t\treturn [ inSeg2Pt1 ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// they are collinear segments, which might overlap\n\t\t\t\t\tvar seg1min, seg1max, seg1minVal, seg1maxVal;\n\t\t\t\t\tvar seg2min, seg2max, seg2minVal, seg2maxVal;\n\t\t\t\t\tif ( seg1dx !== 0 ) {\n\n\t\t\t\t\t\t// the segments are NOT on a vertical line\n\t\t\t\t\t\tif ( inSeg1Pt1.x < inSeg1Pt2.x ) {\n\n\t\t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.x;\n\t\t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.x;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.x;\n\t\t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.x;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( inSeg2Pt1.x < inSeg2Pt2.x ) {\n\n\t\t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.x;\n\t\t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.x;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.x;\n\t\t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.x;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// the segments are on a vertical line\n\t\t\t\t\t\tif ( inSeg1Pt1.y < inSeg1Pt2.y ) {\n\n\t\t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.y;\n\t\t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.y;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.y;\n\t\t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.y;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( inSeg2Pt1.y < inSeg2Pt2.y ) {\n\n\t\t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.y;\n\t\t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.y;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.y;\n\t\t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.y;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( seg1minVal <= seg2minVal ) {\n\n\t\t\t\t\t\tif ( seg1maxVal <  seg2minVal )\treturn [];\n\t\t\t\t\t\tif ( seg1maxVal === seg2minVal )\t{\n\n\t\t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\n\t\t\t\t\t\t\treturn [ seg2min ];\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg2min, seg1max ];\n\t\t\t\t\t\treturn\t[ seg2min, seg2max ];\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( seg1minVal >  seg2maxVal )\treturn [];\n\t\t\t\t\t\tif ( seg1minVal === seg2maxVal )\t{\n\n\t\t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\n\t\t\t\t\t\t\treturn [ seg1min ];\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg1min, seg1max ];\n\t\t\t\t\t\treturn\t[ seg1min, seg2max ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction isPointInsideAngle( inVertex, inLegFromPt, inLegToPt, inOtherPt ) {\n\n\t\t\t\t// The order of legs is important\n\n\t\t\t\t// translation of all points, so that Vertex is at (0,0)\n\t\t\t\tvar legFromPtX\t= inLegFromPt.x - inVertex.x,  legFromPtY\t= inLegFromPt.y - inVertex.y;\n\t\t\t\tvar legToPtX\t= inLegToPt.x\t- inVertex.x,  legToPtY\t\t= inLegToPt.y\t- inVertex.y;\n\t\t\t\tvar otherPtX\t= inOtherPt.x\t- inVertex.x,  otherPtY\t\t= inOtherPt.y\t- inVertex.y;\n\n\t\t\t\t// main angle >0: < 180 deg.; 0: 180 deg.; <0: > 180 deg.\n\t\t\t\tvar from2toAngle\t= legFromPtX * legToPtY - legFromPtY * legToPtX;\n\t\t\t\tvar from2otherAngle\t= legFromPtX * otherPtY - legFromPtY * otherPtX;\n\n\t\t\t\tif ( Math.abs( from2toAngle ) > Number.EPSILON ) {\n\n\t\t\t\t\t// angle != 180 deg.\n\n\t\t\t\t\tvar other2toAngle\t\t= otherPtX * legToPtY - otherPtY * legToPtX;\n\t\t\t\t\t// console.log( \"from2to: \" + from2toAngle + \", from2other: \" + from2otherAngle + \", other2to: \" + other2toAngle );\n\n\t\t\t\t\tif ( from2toAngle > 0 ) {\n\n\t\t\t\t\t\t// main angle < 180 deg.\n\t\t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) && ( other2toAngle >= 0 ) );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// main angle > 180 deg.\n\t\t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) || ( other2toAngle >= 0 ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// angle == 180 deg.\n\t\t\t\t\t// console.log( \"from2to: 180 deg., from2other: \" + from2otherAngle  );\n\t\t\t\t\treturn\t( from2otherAngle > 0 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tfunction removeHoles( contour, holes ) {\n\n\t\t\t\tvar shape = contour.concat(); // work on this shape\n\t\t\t\tvar hole;\n\n\t\t\t\tfunction isCutLineInsideAngles( inShapeIdx, inHoleIdx ) {\n\n\t\t\t\t\t// Check if hole point lies within angle around shape point\n\t\t\t\t\tvar lastShapeIdx = shape.length - 1;\n\n\t\t\t\t\tvar prevShapeIdx = inShapeIdx - 1;\n\t\t\t\t\tif ( prevShapeIdx < 0 )\t\t\tprevShapeIdx = lastShapeIdx;\n\n\t\t\t\t\tvar nextShapeIdx = inShapeIdx + 1;\n\t\t\t\t\tif ( nextShapeIdx > lastShapeIdx )\tnextShapeIdx = 0;\n\n\t\t\t\t\tvar insideAngle = isPointInsideAngle( shape[ inShapeIdx ], shape[ prevShapeIdx ], shape[ nextShapeIdx ], hole[ inHoleIdx ] );\n\t\t\t\t\tif ( ! insideAngle ) {\n\n\t\t\t\t\t\t// console.log( \"Vertex (Shape): \" + inShapeIdx + \", Point: \" + hole[inHoleIdx].x + \"/\" + hole[inHoleIdx].y );\n\t\t\t\t\t\treturn\tfalse;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Check if shape point lies within angle around hole point\n\t\t\t\t\tvar lastHoleIdx = hole.length - 1;\n\n\t\t\t\t\tvar prevHoleIdx = inHoleIdx - 1;\n\t\t\t\t\tif ( prevHoleIdx < 0 )\t\t\tprevHoleIdx = lastHoleIdx;\n\n\t\t\t\t\tvar nextHoleIdx = inHoleIdx + 1;\n\t\t\t\t\tif ( nextHoleIdx > lastHoleIdx )\tnextHoleIdx = 0;\n\n\t\t\t\t\tinsideAngle = isPointInsideAngle( hole[ inHoleIdx ], hole[ prevHoleIdx ], hole[ nextHoleIdx ], shape[ inShapeIdx ] );\n\t\t\t\t\tif ( ! insideAngle ) {\n\n\t\t\t\t\t\t// console.log( \"Vertex (Hole): \" + inHoleIdx + \", Point: \" + shape[inShapeIdx].x + \"/\" + shape[inShapeIdx].y );\n\t\t\t\t\t\treturn\tfalse;\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn\ttrue;\n\n\t\t\t\t}\n\n\t\t\t\tfunction intersectsShapeEdge( inShapePt, inHolePt ) {\n\n\t\t\t\t\t// checks for intersections with shape edges\n\t\t\t\t\tvar sIdx, nextIdx, intersection;\n\t\t\t\t\tfor ( sIdx = 0; sIdx < shape.length; sIdx ++ ) {\n\n\t\t\t\t\t\tnextIdx = sIdx + 1; nextIdx %= shape.length;\n\t\t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, shape[ sIdx ], shape[ nextIdx ], true );\n\t\t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn\tfalse;\n\n\t\t\t\t}\n\n\t\t\t\tvar indepHoles = [];\n\n\t\t\t\tfunction intersectsHoleEdge( inShapePt, inHolePt ) {\n\n\t\t\t\t\t// checks for intersections with hole edges\n\t\t\t\t\tvar ihIdx, chkHole,\n\t\t\t\t\t\thIdx, nextIdx, intersection;\n\t\t\t\t\tfor ( ihIdx = 0; ihIdx < indepHoles.length; ihIdx ++ ) {\n\n\t\t\t\t\t\tchkHole = holes[ indepHoles[ ihIdx ]];\n\t\t\t\t\t\tfor ( hIdx = 0; hIdx < chkHole.length; hIdx ++ ) {\n\n\t\t\t\t\t\t\tnextIdx = hIdx + 1; nextIdx %= chkHole.length;\n\t\t\t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, chkHole[ hIdx ], chkHole[ nextIdx ], true );\n\t\t\t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t\treturn\tfalse;\n\n\t\t\t\t}\n\n\t\t\t\tvar holeIndex, shapeIndex,\n\t\t\t\t\tshapePt, holePt,\n\t\t\t\t\tholeIdx, cutKey, failedCuts = [],\n\t\t\t\t\ttmpShape1, tmpShape2,\n\t\t\t\t\ttmpHole1, tmpHole2;\n\n\t\t\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tindepHoles.push( h );\n\n\t\t\t\t}\n\n\t\t\t\tvar minShapeIndex = 0;\n\t\t\t\tvar counter = indepHoles.length * 2;\n\t\t\t\twhile ( indepHoles.length > 0 ) {\n\n\t\t\t\t\tcounter --;\n\t\t\t\t\tif ( counter < 0 ) {\n\n\t\t\t\t\t\tconsole.log( \"Infinite Loop! Holes left:\" + indepHoles.length + \", Probably Hole outside Shape!\" );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// search for shape-vertex and hole-vertex,\n\t\t\t\t\t// which can be connected without intersections\n\t\t\t\t\tfor ( shapeIndex = minShapeIndex; shapeIndex < shape.length; shapeIndex ++ ) {\n\n\t\t\t\t\t\tshapePt = shape[ shapeIndex ];\n\t\t\t\t\t\tholeIndex\t= - 1;\n\n\t\t\t\t\t\t// search for hole which can be reached without intersections\n\t\t\t\t\t\tfor ( var h = 0; h < indepHoles.length; h ++ ) {\n\n\t\t\t\t\t\t\tholeIdx = indepHoles[ h ];\n\n\t\t\t\t\t\t\t// prevent multiple checks\n\t\t\t\t\t\t\tcutKey = shapePt.x + \":\" + shapePt.y + \":\" + holeIdx;\n\t\t\t\t\t\t\tif ( failedCuts[ cutKey ] !== undefined )\t\t\tcontinue;\n\n\t\t\t\t\t\t\thole = holes[ holeIdx ];\n\t\t\t\t\t\t\tfor ( var h2 = 0; h2 < hole.length; h2 ++ ) {\n\n\t\t\t\t\t\t\t\tholePt = hole[ h2 ];\n\t\t\t\t\t\t\t\tif ( ! isCutLineInsideAngles( shapeIndex, h2 ) )\t\tcontinue;\n\t\t\t\t\t\t\t\tif ( intersectsShapeEdge( shapePt, holePt ) )\t\tcontinue;\n\t\t\t\t\t\t\t\tif ( intersectsHoleEdge( shapePt, holePt ) )\t\tcontinue;\n\n\t\t\t\t\t\t\t\tholeIndex = h2;\n\t\t\t\t\t\t\t\tindepHoles.splice( h, 1 );\n\n\t\t\t\t\t\t\t\ttmpShape1 = shape.slice( 0, shapeIndex + 1 );\n\t\t\t\t\t\t\t\ttmpShape2 = shape.slice( shapeIndex );\n\t\t\t\t\t\t\t\ttmpHole1 = hole.slice( holeIndex );\n\t\t\t\t\t\t\t\ttmpHole2 = hole.slice( 0, holeIndex + 1 );\n\n\t\t\t\t\t\t\t\tshape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );\n\n\t\t\t\t\t\t\t\tminShapeIndex = shapeIndex;\n\n\t\t\t\t\t\t\t\t// Debug only, to show the selected cuts\n\t\t\t\t\t\t\t\t// glob_CutLines.push( [ shapePt, holePt ] );\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\n\n\t\t\t\t\t\t\tfailedCuts[ cutKey ] = true;\t\t\t// remember failure\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn shape; \t\t\t/* shape with no holes */\n\n\t\t\t}\n\n\n\t\t\tvar i, il, f, face,\n\t\t\t\tkey, index,\n\t\t\t\tallPointsMap = {};\n\n\t\t\t// To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.\n\n\t\t\tvar allpoints = contour.concat();\n\n\t\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tArray.prototype.push.apply( allpoints, holes[ h ] );\n\n\t\t\t}\n\n\t\t\t//console.log( \"allpoints\",allpoints, allpoints.length );\n\n\t\t\t// prepare all points map\n\n\t\t\tfor ( i = 0, il = allpoints.length; i < il; i ++ ) {\n\n\t\t\t\tkey = allpoints[ i ].x + \":\" + allpoints[ i ].y;\n\n\t\t\t\tif ( allPointsMap[ key ] !== undefined ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.ShapeUtils: Duplicate point\", key, i );\n\n\t\t\t\t}\n\n\t\t\t\tallPointsMap[ key ] = i;\n\n\t\t\t}\n\n\t\t\t// remove holes by cutting paths to holes and adding them to the shape\n\t\t\tvar shapeWithoutHoles = removeHoles( contour, holes );\n\n\t\t\tvar triangles = ShapeUtils.triangulate( shapeWithoutHoles, false ); // True returns indices for points of spooled shape\n\t\t\t//console.log( \"triangles\",triangles, triangles.length );\n\n\t\t\t// check all face vertices against all points map\n\n\t\t\tfor ( i = 0, il = triangles.length; i < il; i ++ ) {\n\n\t\t\t\tface = triangles[ i ];\n\n\t\t\t\tfor ( f = 0; f < 3; f ++ ) {\n\n\t\t\t\t\tkey = face[ f ].x + \":\" + face[ f ].y;\n\n\t\t\t\t\tindex = allPointsMap[ key ];\n\n\t\t\t\t\tif ( index !== undefined ) {\n\n\t\t\t\t\t\tface[ f ] = index;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn triangles.concat();\n\n\t\t},\n\n\t\tisClockWise: function ( pts ) {\n\n\t\t\treturn ShapeUtils.area( pts ) < 0;\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t * Creates extruded geometry from a path shape.\n\t *\n\t * parameters = {\n\t *\n\t *  curveSegments: <int>, // number of points on the curves\n\t *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n\t *  amount: <int>, // Depth to extrude the shape\n\t *\n\t *  bevelEnabled: <bool>, // turn on bevel\n\t *  bevelThickness: <float>, // how deep into the original shape bevel goes\n\t *  bevelSize: <float>, // how far from shape outline is bevel\n\t *  bevelSegments: <int>, // number of bevel layers\n\t *\n\t *  extrudePath: <THREE.Curve> // curve to extrude shape along\n\t *  frames: <Object> // containing arrays of tangents, normals, binormals\n\t *\n\t *  UVGenerator: <Object> // object that provides UV generator functions\n\t *\n\t * }\n\t */\n\n\t// ExtrudeGeometry\n\n\tfunction ExtrudeGeometry( shapes, options ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'ExtrudeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\toptions: options\n\t\t};\n\n\t\tthis.fromBufferGeometry( new ExtrudeBufferGeometry( shapes, options ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tExtrudeGeometry.prototype = Object.create( Geometry.prototype );\n\tExtrudeGeometry.prototype.constructor = ExtrudeGeometry;\n\n\t// ExtrudeBufferGeometry\n\n\tfunction ExtrudeBufferGeometry( shapes, options ) {\n\n\t\tif ( typeof ( shapes ) === \"undefined\" ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'ExtrudeBufferGeometry';\n\n\t\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\n\n\t\tthis.addShapeList( shapes, options );\n\n\t\tthis.computeVertexNormals();\n\n\t\t// can't really use automatic vertex normals\n\t\t// as then front and back sides get smoothed too\n\t\t// should do separate smoothing just for sides\n\n\t\t//this.computeVertexNormals();\n\n\t\t//console.log( \"took\", ( Date.now() - startTime ) );\n\n\t}\n\n\tExtrudeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tExtrudeBufferGeometry.prototype.constructor = ExtrudeBufferGeometry;\n\n\tExtrudeBufferGeometry.prototype.getArrays = function () {\n\n\t\tvar positionAttribute = this.getAttribute( \"position\" );\n\t\tvar verticesArray = positionAttribute ? Array.prototype.slice.call( positionAttribute.array ) : [];\n\n\t\tvar uvAttribute = this.getAttribute( \"uv\" );\n\t\tvar uvArray = uvAttribute ? Array.prototype.slice.call( uvAttribute.array ) : [];\n\n\t\tvar IndexAttribute = this.index;\n\t\tvar indicesArray = IndexAttribute ? Array.prototype.slice.call( IndexAttribute.array ) : [];\n\n\t\treturn {\n\t\t\tposition: verticesArray,\n\t\t\tuv: uvArray,\n\t\t\tindex: indicesArray\n\t\t};\n\n\t};\n\n\tExtrudeBufferGeometry.prototype.addShapeList = function ( shapes, options ) {\n\n\t\tvar sl = shapes.length;\n\t\toptions.arrays = this.getArrays();\n\n\t\tfor ( var s = 0; s < sl; s ++ ) {\n\n\t\t\tvar shape = shapes[ s ];\n\t\t\tthis.addShape( shape, options );\n\n\t\t}\n\n\t\tthis.setIndex( options.arrays.index );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( options.arrays.position, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( options.arrays.uv, 2 ) );\n\n\t};\n\n\tExtrudeBufferGeometry.prototype.addShape = function ( shape, options ) {\n\n\t\tvar arrays = options.arrays ? options.arrays : this.getArrays();\n\t\tvar verticesArray = arrays.position;\n\t\tvar indicesArray = arrays.index;\n\t\tvar uvArray = arrays.uv;\n\n\t\tvar placeholder = [];\n\n\n\t\tvar amount = options.amount !== undefined ? options.amount : 100;\n\n\t\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10\n\t\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8\n\t\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\n\t\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false\n\n\t\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\n\t\tvar steps = options.steps !== undefined ? options.steps : 1;\n\n\t\tvar extrudePath = options.extrudePath;\n\t\tvar extrudePts, extrudeByPath = false;\n\n\t\t// Use default WorldUVGenerator if no UV generators are specified.\n\t\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : ExtrudeGeometry.WorldUVGenerator;\n\n\t\tvar splineTube, binormal, normal, position2;\n\t\tif ( extrudePath ) {\n\n\t\t\textrudePts = extrudePath.getSpacedPoints( steps );\n\n\t\t\textrudeByPath = true;\n\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\n\t\t\t// SETUP TNB variables\n\n\t\t\t// TODO1 - have a .isClosed in spline?\n\n\t\t\tsplineTube = options.frames !== undefined ? options.frames : extrudePath.computeFrenetFrames( steps, false );\n\n\t\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n\t\t\tbinormal = new Vector3();\n\t\t\tnormal = new Vector3();\n\t\t\tposition2 = new Vector3();\n\n\t\t}\n\n\t\t// Safeguards if bevels are not enabled\n\n\t\tif ( ! bevelEnabled ) {\n\n\t\t\tbevelSegments = 0;\n\t\t\tbevelThickness = 0;\n\t\t\tbevelSize = 0;\n\n\t\t}\n\n\t\t// Variables initialization\n\n\t\tvar ahole, h, hl; // looping of holes\n\t\tvar scope = this;\n\n\t\tvar shapePoints = shape.extractPoints( curveSegments );\n\n\t\tvar vertices = shapePoints.shape;\n\t\tvar holes = shapePoints.holes;\n\n\t\tvar reverse = ! ShapeUtils.isClockWise( vertices );\n\n\t\tif ( reverse ) {\n\n\t\t\tvertices = vertices.reverse();\n\n\t\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tahole = holes[ h ];\n\n\t\t\t\tif ( ShapeUtils.isClockWise( ahole ) ) {\n\n\t\t\t\t\tholes[ h ] = ahole.reverse();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\n\t\tvar faces = ShapeUtils.triangulateShape( vertices, holes );\n\n\t\t/* Vertices */\n\n\t\tvar contour = vertices; // vertices has all points but contour has only points of circumference\n\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tahole = holes[ h ];\n\n\t\t\tvertices = vertices.concat( ahole );\n\n\t\t}\n\n\n\t\tfunction scalePt2( pt, vec, size ) {\n\n\t\t\tif ( ! vec ) console.error( \"THREE.ExtrudeGeometry: vec does not exist\" );\n\n\t\t\treturn vec.clone().multiplyScalar( size ).add( pt );\n\n\t\t}\n\n\t\tvar b, bs, t, z,\n\t\t\tvert, vlen = vertices.length,\n\t\t\tface, flen = faces.length;\n\n\n\t\t// Find directions for point movement\n\n\n\t\tfunction getBevelVec( inPt, inPrev, inNext ) {\n\n\t\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t\t//   shifted by 1 unit (length of normalized vector) to the left\n\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t\t//\n\t\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\n\n\t\t\tvar v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\n\n\t\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n\t\t\tvar v_prev_x = inPt.x - inPrev.x,\n\t\t\t\tv_prev_y = inPt.y - inPrev.y;\n\t\t\tvar v_next_x = inNext.x - inPt.x,\n\t\t\t\tv_next_y = inNext.y - inPt.y;\n\n\t\t\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\n\n\t\t\t// check for collinear edges\n\t\t\tvar collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\n\n\t\t\t\t// not collinear\n\n\t\t\t\t// length of vectors for normalizing\n\n\t\t\t\tvar v_prev_len = Math.sqrt( v_prev_lensq );\n\t\t\t\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\n\n\t\t\t\t// shift adjacent points by unit vectors to the left\n\n\t\t\t\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\n\t\t\t\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\n\n\t\t\t\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\n\t\t\t\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\n\n\t\t\t\t// scaling factor for v_prev to intersection point\n\n\t\t\t\tvar sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\n\t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /\n\t\t\t\t\t( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\t// vector from inPt to intersection point\n\n\t\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\n\t\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\n\n\t\t\t\t// Don't normalize!, otherwise sharp corners become ugly\n\t\t\t\t//  but prevent crazy spikes\n\t\t\t\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\n\t\t\t\tif ( v_trans_lensq <= 2 ) {\n\n\t\t\t\t\treturn new Vector2( v_trans_x, v_trans_y );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// handle special case of collinear edges\n\n\t\t\t\tvar direction_eq = false; // assumes: opposite\n\t\t\t\tif ( v_prev_x > Number.EPSILON ) {\n\n\t\t\t\t\tif ( v_next_x > Number.EPSILON ) {\n\n\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\n\n\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( direction_eq ) {\n\n\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\t\tv_trans_x = - v_prev_y;\n\t\t\t\t\tv_trans_y = v_prev_x;\n\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\n\n\t\t}\n\n\n\t\tvar contourMovements = [];\n\n\t\tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\tif ( j === il ) j = 0;\n\t\t\tif ( k === il ) k = 0;\n\n\t\t\t//  (j)---(i)---(k)\n\t\t\t// console.log('i,j,k', i, j , k)\n\n\t\t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\n\n\t\t}\n\n\t\tvar holesMovements = [],\n\t\t\toneHoleMovements, verticesMovements = contourMovements.concat();\n\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tahole = holes[ h ];\n\n\t\t\toneHoleMovements = [];\n\n\t\t\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\t\tif ( j === il ) j = 0;\n\t\t\t\tif ( k === il ) k = 0;\n\n\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\n\n\t\t\t}\n\n\t\t\tholesMovements.push( oneHoleMovements );\n\t\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\n\n\t\t}\n\n\n\t\t// Loop bevelSegments, 1 for the front, 1 for the back\n\n\t\tfor ( b = 0; b < bevelSegments; b ++ ) {\n\n\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\n\t\t\tt = b / bevelSegments;\n\t\t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\tbs = bevelSize * Math.sin( t * Math.PI / 2 );\n\n\t\t\t// contract shape\n\n\t\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\n\t\t\t\tv( vert.x, vert.y, - z );\n\n\t\t\t}\n\n\t\t\t// expand holes\n\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tahole = holes[ h ];\n\t\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\tv( vert.x, vert.y, - z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tbs = bevelSize;\n\n\t\t// Back facing vertices\n\n\t\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\tv( vert.x, vert.y, 0 );\n\n\t\t\t} else {\n\n\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\n\t\t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\n\t\t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\n\n\t\t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\n\n\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Add stepped vertices...\n\t\t// Including front facing vertices\n\n\t\tvar s;\n\n\t\tfor ( s = 1; s <= steps; s ++ ) {\n\n\t\t\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\tv( vert.x, vert.y, amount / steps * s );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\n\t\t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\n\t\t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\n\n\t\t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\n\n\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\n\t\t// Add bevel segments planes\n\n\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\t\tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\n\n\t\t\tt = b / bevelSegments;\n\t\t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\tbs = bevelSize * Math.sin( t * Math.PI / 2 );\n\n\t\t\t// contract shape\n\n\t\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\t\t\t\tv( vert.x, vert.y, amount + z );\n\n\t\t\t}\n\n\t\t\t// expand holes\n\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tahole = holes[ h ];\n\t\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\tv( vert.x, vert.y, amount + z );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t/* Faces */\n\n\t\t// Top and bottom faces\n\n\t\tbuildLidFaces();\n\n\t\t// Sides faces\n\n\t\tbuildSideFaces();\n\n\n\t\t/////  Internal functions\n\n\t\tfunction buildLidFaces() {\n\n\t\t\tvar start = verticesArray.length/3;\n\n\t\t\tif ( bevelEnabled ) {\n\n\t\t\t\tvar layer = 0; // steps + 1\n\t\t\t\tvar offset = vlen * layer;\n\n\t\t\t\t// Bottom faces\n\n\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\n\n\t\t\t\t}\n\n\t\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\t\toffset = vlen * layer;\n\n\t\t\t\t// Top faces\n\n\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// Bottom faces\n\n\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\n\n\t\t\t\t}\n\n\t\t\t\t// Top faces\n\n\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tscope.addGroup( start, verticesArray.length/3 -start, options.material !== undefined ? options.material : 0);\n\n\t\t}\n\n\t\t// Create faces for the z-sides of the shape\n\n\t\tfunction buildSideFaces() {\n\n\t\t\tvar start = verticesArray.length/3;\n\t\t\tvar layeroffset = 0;\n\t\t\tsidewalls( contour, layeroffset );\n\t\t\tlayeroffset += contour.length;\n\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tahole = holes[ h ];\n\t\t\t\tsidewalls( ahole, layeroffset );\n\n\t\t\t\t//, true\n\t\t\t\tlayeroffset += ahole.length;\n\n\t\t\t}\n\n\n\t\t\tscope.addGroup( start, verticesArray.length/3 -start, options.extrudeMaterial !== undefined ? options.extrudeMaterial : 1);\n\n\n\t\t}\n\n\t\tfunction sidewalls( contour, layeroffset ) {\n\n\t\t\tvar j, k;\n\t\t\ti = contour.length;\n\n\t\t\twhile ( -- i >= 0 ) {\n\n\t\t\t\tj = i;\n\t\t\t\tk = i - 1;\n\t\t\t\tif ( k < 0 ) k = contour.length - 1;\n\n\t\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\n\n\t\t\t\tvar s = 0,\n\t\t\t\t\tsl = steps + bevelSegments * 2;\n\n\t\t\t\tfor ( s = 0; s < sl; s ++ ) {\n\n\t\t\t\t\tvar slen1 = vlen * s;\n\t\t\t\t\tvar slen2 = vlen * ( s + 1 );\n\n\t\t\t\t\tvar a = layeroffset + j + slen1,\n\t\t\t\t\t\tb = layeroffset + k + slen1,\n\t\t\t\t\t\tc = layeroffset + k + slen2,\n\t\t\t\t\t\td = layeroffset + j + slen2;\n\n\t\t\t\t\tf4( a, b, c, d, contour, s, sl, j, k );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction v( x, y, z ) {\n\n\t\t\tplaceholder.push( x );\n\t\t\tplaceholder.push( y );\n\t\t\tplaceholder.push( z );\n\n\t\t}\n\n\n\t\tfunction f3( a, b, c ) {\n\n\t\t\taddVertex( a );\n\t\t\taddVertex( b );\n\t\t\taddVertex( c );\n\n\t\t\tvar nextIndex = verticesArray.length / 3;\n\t\t\tvar uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\taddUV( uvs[ 0 ] );\n\t\t\taddUV( uvs[ 1 ] );\n\t\t\taddUV( uvs[ 2 ] );\n\n\t\t}\n\n\t\tfunction f4( a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2 ) {\n\n\t\t\taddVertex( a );\n\t\t\taddVertex( b );\n\t\t\taddVertex( d );\n\n\t\t\taddVertex( b );\n\t\t\taddVertex( c );\n\t\t\taddVertex( d );\n\n\n\t\t\tvar nextIndex = verticesArray.length / 3;\n\t\t\tvar uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\taddUV( uvs[ 0 ] );\n\t\t\taddUV( uvs[ 1 ] );\n\t\t\taddUV( uvs[ 3 ] );\n\n\t\t\taddUV( uvs[ 1 ] );\n\t\t\taddUV( uvs[ 2 ] );\n\t\t\taddUV( uvs[ 3 ] );\n\n\t\t}\n\n\t\tfunction addVertex( index ) {\n\n\t\t\tindicesArray.push( verticesArray.length / 3 );\n\t\t\tverticesArray.push( placeholder[ index * 3 + 0 ] );\n\t\t\tverticesArray.push( placeholder[ index * 3 + 1 ] );\n\t\t\tverticesArray.push( placeholder[ index * 3 + 2 ] );\n\n\t\t}\n\n\n\t\tfunction addUV( vector2 ) {\n\n\t\t\tuvArray.push( vector2.x );\n\t\t\tuvArray.push( vector2.y );\n\n\t\t}\n\n\t\tif ( ! options.arrays ) {\n\n\t\t\tthis.setIndex( indicesArray );\n\t\t\tthis.addAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );\n\t\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( options.arrays.uv, 2 ) );\n\n\t\t}\n\n\t};\n\n\tExtrudeGeometry.WorldUVGenerator = {\n\n\t\tgenerateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {\n\n\t\t\tvar a_x = vertices[ indexA * 3 ];\n\t\t\tvar a_y = vertices[ indexA * 3 + 1 ];\n\t\t\tvar b_x = vertices[ indexB * 3 ];\n\t\t\tvar b_y = vertices[ indexB * 3 + 1 ];\n\t\t\tvar c_x = vertices[ indexC * 3 ];\n\t\t\tvar c_y = vertices[ indexC * 3 + 1 ];\n\n\t\t\treturn [\n\t\t\t\tnew Vector2( a_x, a_y ),\n\t\t\t\tnew Vector2( b_x, b_y ),\n\t\t\t\tnew Vector2( c_x, c_y )\n\t\t\t];\n\n\t\t},\n\n\t\tgenerateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {\n\n\t\t\tvar a_x = vertices[ indexA * 3 ];\n\t\t\tvar a_y = vertices[ indexA * 3 + 1 ];\n\t\t\tvar a_z = vertices[ indexA * 3 + 2 ];\n\t\t\tvar b_x = vertices[ indexB * 3 ];\n\t\t\tvar b_y = vertices[ indexB * 3 + 1 ];\n\t\t\tvar b_z = vertices[ indexB * 3 + 2 ];\n\t\t\tvar c_x = vertices[ indexC * 3 ];\n\t\t\tvar c_y = vertices[ indexC * 3 + 1 ];\n\t\t\tvar c_z = vertices[ indexC * 3 + 2 ];\n\t\t\tvar d_x = vertices[ indexD * 3 ];\n\t\t\tvar d_y = vertices[ indexD * 3 + 1 ];\n\t\t\tvar d_z = vertices[ indexD * 3 + 2 ];\n\n\t\t\tif ( Math.abs( a_y - b_y ) < 0.01 ) {\n\n\t\t\t\treturn [\n\t\t\t\t\tnew Vector2( a_x, 1 - a_z ),\n\t\t\t\t\tnew Vector2( b_x, 1 - b_z ),\n\t\t\t\t\tnew Vector2( c_x, 1 - c_z ),\n\t\t\t\t\tnew Vector2( d_x, 1 - d_z )\n\t\t\t\t];\n\n\t\t\t} else {\n\n\t\t\t\treturn [\n\t\t\t\t\tnew Vector2( a_y, 1 - a_z ),\n\t\t\t\t\tnew Vector2( b_y, 1 - b_z ),\n\t\t\t\t\tnew Vector2( c_y, 1 - c_z ),\n\t\t\t\t\tnew Vector2( d_y, 1 - d_z )\n\t\t\t\t];\n\n\t\t\t}\n\n\t\t}\n\t};\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Text = 3D Text\n\t *\n\t * parameters = {\n\t *  font: <THREE.Font>, // font\n\t *\n\t *  size: <float>, // size of the text\n\t *  height: <float>, // thickness to extrude text\n\t *  curveSegments: <int>, // number of points on the curves\n\t *\n\t *  bevelEnabled: <bool>, // turn on bevel\n\t *  bevelThickness: <float>, // how deep into text bevel goes\n\t *  bevelSize: <float> // how far from text outline is bevel\n\t * }\n\t */\n\n\t// TextGeometry\n\n\tfunction TextGeometry(  text, parameters ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TextGeometry';\n\n\t\tthis.parameters = {\n\t\t\ttext: text,\n\t\t\tparameters: parameters\n\t\t};\n\n\t\tthis.fromBufferGeometry( new TextBufferGeometry( text, parameters ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTextGeometry.prototype = Object.create( Geometry.prototype );\n\tTextGeometry.prototype.constructor = TextGeometry;\n\n\t// TextBufferGeometry\n\n\tfunction TextBufferGeometry( text, parameters ) {\n\n\t\tparameters = parameters || {};\n\n\t\tvar font = parameters.font;\n\n\t\tif ( ! ( font && font.isFont ) ) {\n\n\t\t\tconsole.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );\n\t\t\treturn new Geometry();\n\n\t\t}\n\n\t\tvar shapes = font.generateShapes( text, parameters.size, parameters.curveSegments );\n\n\t\t// translate parameters to ExtrudeGeometry API\n\n\t\tparameters.amount = parameters.height !== undefined ? parameters.height : 50;\n\n\t\t// defaults\n\n\t\tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\n\t\tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\n\t\tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\n\n\t\tExtrudeBufferGeometry.call( this, shapes, parameters );\n\n\t\tthis.type = 'TextBufferGeometry';\n\n\t}\n\n\tTextBufferGeometry.prototype = Object.create( ExtrudeBufferGeometry.prototype );\n\tTextBufferGeometry.prototype.constructor = TextBufferGeometry;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// SphereGeometry\n\n\tfunction SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'SphereGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tSphereGeometry.prototype = Object.create( Geometry.prototype );\n\tSphereGeometry.prototype.constructor = SphereGeometry;\n\n\t// SphereBufferGeometry\n\n\tfunction SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'SphereBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tradius = radius || 50;\n\n\t\twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\n\t\theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\n\n\t\tphiStart = phiStart !== undefined ? phiStart : 0;\n\t\tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\n\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\n\n\t\tvar thetaEnd = thetaStart + thetaLength;\n\n\t\tvar ix, iy;\n\n\t\tvar index = 0;\n\t\tvar grid = [];\n\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( iy = 0; iy <= heightSegments; iy ++ ) {\n\n\t\t\tvar verticesRow = [];\n\n\t\t\tvar v = iy / heightSegments;\n\n\t\t\tfor ( ix = 0; ix <= widthSegments; ix ++ ) {\n\n\t\t\t\tvar u = ix / widthSegments;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t\t\t\tvertex.y = radius * Math.cos( thetaStart + v * thetaLength );\n\t\t\t\tvertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.set( vertex.x, vertex.y, vertex.z ).normalize();\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( u, 1 - v );\n\n\t\t\t\tverticesRow.push( index ++ );\n\n\t\t\t}\n\n\t\t\tgrid.push( verticesRow );\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( iy = 0; iy < heightSegments; iy ++ ) {\n\n\t\t\tfor ( ix = 0; ix < widthSegments; ix ++ ) {\n\n\t\t\t\tvar a = grid[ iy ][ ix + 1 ];\n\t\t\t\tvar b = grid[ iy ][ ix ];\n\t\t\t\tvar c = grid[ iy + 1 ][ ix ];\n\t\t\t\tvar d = grid[ iy + 1 ][ ix + 1 ];\n\n\t\t\t\tif ( iy !== 0 || thetaStart > 0 ) indices.push( a, b, d );\n\t\t\t\tif ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tSphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tSphereBufferGeometry.prototype.constructor = SphereBufferGeometry;\n\n\t/**\n\t * @author Kaleb Murphy\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// RingGeometry\n\n\tfunction RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'RingGeometry';\n\n\t\tthis.parameters = {\n\t\t\tinnerRadius: innerRadius,\n\t\t\touterRadius: outerRadius,\n\t\t\tthetaSegments: thetaSegments,\n\t\t\tphiSegments: phiSegments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tRingGeometry.prototype = Object.create( Geometry.prototype );\n\tRingGeometry.prototype.constructor = RingGeometry;\n\n\t// RingBufferGeometry\n\n\tfunction RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'RingBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tinnerRadius: innerRadius,\n\t\t\touterRadius: outerRadius,\n\t\t\tthetaSegments: thetaSegments,\n\t\t\tphiSegments: phiSegments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tinnerRadius = innerRadius || 20;\n\t\touterRadius = outerRadius || 50;\n\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t\tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\n\t\tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// some helper variables\n\n\t\tvar segment;\n\t\tvar radius = innerRadius;\n\t\tvar radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n\t\tvar vertex = new Vector3();\n\t\tvar uv = new Vector2();\n\t\tvar j, i;\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( j = 0; j <= phiSegments; j ++ ) {\n\n\t\t\tfor ( i = 0; i <= thetaSegments; i ++ ) {\n\n\t\t\t\t// values are generate from the inside of the ring to the outside\n\n\t\t\t\tsegment = thetaStart + i / thetaSegments * thetaLength;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\n\t\t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t}\n\n\t\t\t// increase the radius for next row of vertices\n\n\t\t\tradius += radiusStep;\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( j = 0; j < phiSegments; j ++ ) {\n\n\t\t\tvar thetaSegmentLevel = j * ( thetaSegments + 1 );\n\n\t\t\tfor ( i = 0; i < thetaSegments; i ++ ) {\n\n\t\t\t\tsegment = i + thetaSegmentLevel;\n\n\t\t\t\tvar a = segment;\n\t\t\t\tvar b = segment + thetaSegments + 1;\n\t\t\t\tvar c = segment + thetaSegments + 2;\n\t\t\t\tvar d = segment + 1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tRingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tRingBufferGeometry.prototype.constructor = RingBufferGeometry;\n\n\t/**\n\t * @author astrodud / http://astrodud.isgreat.org/\n\t * @author zz85 / https://github.com/zz85\n\t * @author bhouston / http://clara.io\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// LatheGeometry\n\n\tfunction LatheGeometry( points, segments, phiStart, phiLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'LatheGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpoints: points,\n\t\t\tsegments: segments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tLatheGeometry.prototype = Object.create( Geometry.prototype );\n\tLatheGeometry.prototype.constructor = LatheGeometry;\n\n\t// LatheBufferGeometry\n\n\tfunction LatheBufferGeometry( points, segments, phiStart, phiLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'LatheBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpoints: points,\n\t\t\tsegments: segments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength\n\t\t};\n\n\t\tsegments = Math.floor( segments ) || 12;\n\t\tphiStart = phiStart || 0;\n\t\tphiLength = phiLength || Math.PI * 2;\n\n\t\t// clamp phiLength so it's in range of [ 0, 2PI ]\n\n\t\tphiLength = _Math.clamp( phiLength, 0, Math.PI * 2 );\n\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar base;\n\t\tvar inverseSegments = 1.0 / segments;\n\t\tvar vertex = new Vector3();\n\t\tvar uv = new Vector2();\n\t\tvar i, j;\n\n\t\t// generate vertices and uvs\n\n\t\tfor ( i = 0; i <= segments; i ++ ) {\n\n\t\t\tvar phi = phiStart + i * inverseSegments * phiLength;\n\n\t\t\tvar sin = Math.sin( phi );\n\t\t\tvar cos = Math.cos( phi );\n\n\t\t\tfor ( j = 0; j <= ( points.length - 1 ); j ++ ) {\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = points[ j ].x * sin;\n\t\t\t\tvertex.y = points[ j ].y;\n\t\t\t\tvertex.z = points[ j ].x * cos;\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = i / segments;\n\t\t\t\tuv.y = j / ( points.length - 1 );\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\n\t\t\t}\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( i = 0; i < segments; i ++ ) {\n\n\t\t\tfor ( j = 0; j < ( points.length - 1 ); j ++ ) {\n\n\t\t\t\tbase = j + i * points.length;\n\n\t\t\t\tvar a = base;\n\t\t\t\tvar b = base + points.length;\n\t\t\t\tvar c = base + points.length + 1;\n\t\t\t\tvar d = base + 1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// generate normals\n\n\t\tthis.computeVertexNormals();\n\n\t\t// if the geometry is closed, we need to average the normals along the seam.\n\t\t// because the corresponding vertices are identical (but still have different UVs).\n\n\t\tif ( phiLength === Math.PI * 2 ) {\n\n\t\t\tvar normals = this.attributes.normal.array;\n\t\t\tvar n1 = new Vector3();\n\t\t\tvar n2 = new Vector3();\n\t\t\tvar n = new Vector3();\n\n\t\t\t// this is the buffer offset for the last line of vertices\n\n\t\t\tbase = segments * points.length * 3;\n\n\t\t\tfor ( i = 0, j = 0; i < points.length; i ++, j += 3 ) {\n\n\t\t\t\t// select the normal of the vertex in the first line\n\n\t\t\t\tn1.x = normals[ j + 0 ];\n\t\t\t\tn1.y = normals[ j + 1 ];\n\t\t\t\tn1.z = normals[ j + 2 ];\n\n\t\t\t\t// select the normal of the vertex in the last line\n\n\t\t\t\tn2.x = normals[ base + j + 0 ];\n\t\t\t\tn2.y = normals[ base + j + 1 ];\n\t\t\t\tn2.z = normals[ base + j + 2 ];\n\n\t\t\t\t// average normals\n\n\t\t\t\tn.addVectors( n1, n2 ).normalize();\n\n\t\t\t\t// assign the new values to both normals\n\n\t\t\t\tnormals[ j + 0 ] = normals[ base + j + 0 ] = n.x;\n\t\t\t\tnormals[ j + 1 ] = normals[ base + j + 1 ] = n.y;\n\t\t\t\tnormals[ j + 2 ] = normals[ base + j + 2 ] = n.z;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tLatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tLatheBufferGeometry.prototype.constructor = LatheBufferGeometry;\n\n\t/**\n\t * @author jonobr1 / http://jonobr1.com\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// ShapeGeometry\n\n\tfunction ShapeGeometry( shapes, curveSegments ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'ShapeGeometry';\n\n\t\tif ( typeof curveSegments === 'object' ) {\n\n\t\t\tconsole.warn( 'THREE.ShapeGeometry: Options parameter has been removed.' );\n\n\t\t\tcurveSegments = curveSegments.curveSegments;\n\n\t\t}\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\tcurveSegments: curveSegments\n\t\t};\n\n\t\tthis.fromBufferGeometry( new ShapeBufferGeometry( shapes, curveSegments ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tShapeGeometry.prototype = Object.create( Geometry.prototype );\n\tShapeGeometry.prototype.constructor = ShapeGeometry;\n\n\t// ShapeBufferGeometry\n\n\tfunction ShapeBufferGeometry( shapes, curveSegments ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'ShapeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\tcurveSegments: curveSegments\n\t\t};\n\n\t\tcurveSegments = curveSegments || 12;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar groupStart = 0;\n\t\tvar groupCount = 0;\n\n\t\t// allow single and array values for \"shapes\" parameter\n\n\t\tif ( Array.isArray( shapes ) === false ) {\n\n\t\t\taddShape( shapes );\n\n\t\t} else {\n\n\t\t\tfor ( var i = 0; i < shapes.length; i ++ ) {\n\n\t\t\t\taddShape( shapes[ i ] );\n\n\t\t\t\tthis.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t\tgroupCount = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\n\t\t// helper functions\n\n\t\tfunction addShape( shape ) {\n\n\t\t\tvar i, l, shapeHole;\n\n\t\t\tvar indexOffset = vertices.length / 3;\n\t\t\tvar points = shape.extractPoints( curveSegments );\n\n\t\t\tvar shapeVertices = points.shape;\n\t\t\tvar shapeHoles = points.holes;\n\n\t\t\t// check direction of vertices\n\n\t\t\tif ( ShapeUtils.isClockWise( shapeVertices ) === false ) {\n\n\t\t\t\tshapeVertices = shapeVertices.reverse();\n\n\t\t\t\t// also check if holes are in the opposite direction\n\n\t\t\t\tfor ( i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\t\tshapeHole = shapeHoles[ i ];\n\n\t\t\t\t\tif ( ShapeUtils.isClockWise( shapeHole ) === true ) {\n\n\t\t\t\t\t\tshapeHoles[ i ] = shapeHole.reverse();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );\n\n\t\t\t// join vertices of inner and outer paths to a single array\n\n\t\t\tfor ( i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\tshapeHole = shapeHoles[ i ];\n\t\t\t\tshapeVertices = shapeVertices.concat( shapeHole );\n\n\t\t\t}\n\n\t\t\t// vertices, normals, uvs\n\n\t\t\tfor ( i = 0, l = shapeVertices.length; i < l; i ++ ) {\n\n\t\t\t\tvar vertex = shapeVertices[ i ];\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, 0 );\n\t\t\t\tnormals.push( 0, 0, 1 );\n\t\t\t\tuvs.push( vertex.x, vertex.y ); // world uvs\n\n\t\t\t}\n\n\t\t\t// incides\n\n\t\t\tfor ( i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tvar a = face[ 0 ] + indexOffset;\n\t\t\t\tvar b = face[ 1 ] + indexOffset;\n\t\t\t\tvar c = face[ 2 ] + indexOffset;\n\n\t\t\t\tindices.push( a, b, c );\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tShapeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tShapeBufferGeometry.prototype.constructor = ShapeBufferGeometry;\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction EdgesGeometry( geometry, thresholdAngle ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'EdgesGeometry';\n\n\t\tthis.parameters = {\n\t\t\tthresholdAngle: thresholdAngle\n\t\t};\n\n\t\tthresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;\n\n\t\t// buffer\n\n\t\tvar vertices = [];\n\n\t\t// helper variables\n\n\t\tvar thresholdDot = Math.cos( _Math.DEG2RAD * thresholdAngle );\n\t\tvar edge = [ 0, 0 ], edges = {}, edge1, edge2;\n\t\tvar key, keys = [ 'a', 'b', 'c' ];\n\n\t\t// prepare source geometry\n\n\t\tvar geometry2;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tgeometry2 = new Geometry();\n\t\t\tgeometry2.fromBufferGeometry( geometry );\n\n\t\t} else {\n\n\t\t\tgeometry2 = geometry.clone();\n\n\t\t}\n\n\t\tgeometry2.mergeVertices();\n\t\tgeometry2.computeFaceNormals();\n\n\t\tvar sourceVertices = geometry2.vertices;\n\t\tvar faces = geometry2.faces;\n\n\t\t// now create a data structure where each entry represents an edge with its adjoining faces\n\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\t\tedge1 = face[ keys[ j ] ];\n\t\t\t\tedge2 = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 );\n\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ], face1: i, face2: undefined };\n\n\t\t\t\t} else {\n\n\t\t\t\t\tedges[ key ].face2 = i;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate vertices\n\n\t\tfor ( key in edges ) {\n\n\t\t\tvar e = edges[ key ];\n\n\t\t\t// an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.\n\n\t\t\tif ( e.face2 === undefined || faces[ e.face1 ].normal.dot( faces[ e.face2 ].normal ) <= thresholdDot ) {\n\n\t\t\t\tvar vertex = sourceVertices[ e.index1 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\tvertex = sourceVertices[ e.index2 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t}\n\n\tEdgesGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tEdgesGeometry.prototype.constructor = EdgesGeometry;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// CylinderGeometry\n\n\tfunction CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'CylinderGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradiusTop: radiusTop,\n\t\t\tradiusBottom: radiusBottom,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tCylinderGeometry.prototype = Object.create( Geometry.prototype );\n\tCylinderGeometry.prototype.constructor = CylinderGeometry;\n\n\t// CylinderBufferGeometry\n\n\tfunction CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'CylinderBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradiusTop: radiusTop,\n\t\t\tradiusBottom: radiusBottom,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tvar scope = this;\n\n\t\tradiusTop = radiusTop !== undefined ? radiusTop : 20;\n\t\tradiusBottom = radiusBottom !== undefined ? radiusBottom : 20;\n\t\theight = height !== undefined ? height : 100;\n\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\theightSegments = Math.floor( heightSegments ) || 1;\n\n\t\topenEnded = openEnded !== undefined ? openEnded : false;\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0.0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : 2.0 * Math.PI;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar index = 0;\n\t\tvar indexArray = [];\n\t\tvar halfHeight = height / 2;\n\t\tvar groupStart = 0;\n\n\t\t// generate geometry\n\n\t\tgenerateTorso();\n\n\t\tif ( openEnded === false ) {\n\n\t\t\tif ( radiusTop > 0 ) generateCap( true );\n\t\t\tif ( radiusBottom > 0 ) generateCap( false );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\tfunction generateTorso() {\n\n\t\t\tvar x, y;\n\t\t\tvar normal = new Vector3();\n\t\t\tvar vertex = new Vector3();\n\n\t\t\tvar groupCount = 0;\n\n\t\t\t// this will be used to calculate the normal\n\t\t\tvar slope = ( radiusBottom - radiusTop ) / height;\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( y = 0; y <= heightSegments; y ++ ) {\n\n\t\t\t\tvar indexRow = [];\n\n\t\t\t\tvar v = y / heightSegments;\n\n\t\t\t\t// calculate the radius of the current row\n\n\t\t\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\n\n\t\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\t\tvar u = x / radialSegments;\n\n\t\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\n\t\t\t\t\tvar sinTheta = Math.sin( theta );\n\t\t\t\t\tvar cosTheta = Math.cos( theta );\n\n\t\t\t\t\t// vertex\n\n\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\tvertex.y = - v * height + halfHeight;\n\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t// normal\n\n\t\t\t\t\tnormal.set( sinTheta, slope, cosTheta ).normalize();\n\t\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t\t// uv\n\n\t\t\t\t\tuvs.push( u, 1 - v );\n\n\t\t\t\t\t// save index of vertex in respective row\n\n\t\t\t\t\tindexRow.push( index ++ );\n\n\t\t\t\t}\n\n\t\t\t\t// now save vertices of the row in our index array\n\n\t\t\t\tindexArray.push( indexRow );\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n\t\t\t\tfor ( y = 0; y < heightSegments; y ++ ) {\n\n\t\t\t\t\t// we use the index array to access the correct indices\n\n\t\t\t\t\tvar a = indexArray[ y ][ x ];\n\t\t\t\t\tvar b = indexArray[ y + 1 ][ x ];\n\t\t\t\t\tvar c = indexArray[ y + 1 ][ x + 1 ];\n\t\t\t\t\tvar d = indexArray[ y ][ x + 1 ];\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t// update group counter\n\n\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, 0 );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t\tfunction generateCap( top ) {\n\n\t\t\tvar x, centerIndexStart, centerIndexEnd;\n\n\t\t\tvar uv = new Vector2();\n\t\t\tvar vertex = new Vector3();\n\n\t\t\tvar groupCount = 0;\n\n\t\t\tvar radius = ( top === true ) ? radiusTop : radiusBottom;\n\t\t\tvar sign = ( top === true ) ? 1 : - 1;\n\n\t\t\t// save the index of the first center vertex\n\t\t\tcenterIndexStart = index;\n\n\t\t\t// first we generate the center vertex data of the cap.\n\t\t\t// because the geometry needs one set of uvs per face,\n\t\t\t// we must generate a center vertex per face/segment\n\n\t\t\tfor ( x = 1; x <= radialSegments; x ++ ) {\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertices.push( 0, halfHeight * sign, 0 );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( 0.5, 0.5 );\n\n\t\t\t\t// increase index\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// save the index of the last center vertex\n\n\t\t\tcenterIndexEnd = index;\n\n\t\t\t// now we generate the surrounding vertices, normals and uvs\n\n\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\tvar u = x / radialSegments;\n\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\n\t\t\t\tvar cosTheta = Math.cos( theta );\n\t\t\t\tvar sinTheta = Math.sin( theta );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\tvertex.y = halfHeight * sign;\n\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\n\t\t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t// increase index\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n\t\t\t\tvar c = centerIndexStart + x;\n\t\t\t\tvar i = centerIndexEnd + x;\n\n\t\t\t\tif ( top === true ) {\n\n\t\t\t\t\t// face top\n\n\t\t\t\t\tindices.push( i, i + 1, c );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// face bottom\n\n\t\t\t\t\tindices.push( i + 1, i, c );\n\n\t\t\t\t}\n\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t}\n\n\tCylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tCylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;\n\n\t/**\n\t * @author abelnation / http://github.com/abelnation\n\t */\n\n\t// ConeGeometry\n\n\tfunction ConeGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tCylinderGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\t\tthis.type = 'ConeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t}\n\n\tConeGeometry.prototype = Object.create( CylinderGeometry.prototype );\n\tConeGeometry.prototype.constructor = ConeGeometry;\n\n\t// ConeBufferGeometry\n\n\tfunction ConeBufferGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tCylinderBufferGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\t\tthis.type = 'ConeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t}\n\n\tConeBufferGeometry.prototype = Object.create( CylinderBufferGeometry.prototype );\n\tConeBufferGeometry.prototype.constructor = ConeBufferGeometry;\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t * @author Mugen87 / https://github.com/Mugen87\n\t * @author hughes\n\t */\n\n\t// CircleGeometry\n\n\tfunction CircleGeometry( radius, segments, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'CircleGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tsegments: segments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tCircleGeometry.prototype = Object.create( Geometry.prototype );\n\tCircleGeometry.prototype.constructor = CircleGeometry;\n\n\t// CircleBufferGeometry\n\n\tfunction CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'CircleBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tsegments: segments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tradius = radius || 50;\n\t\tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\n\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar i, s;\n\t\tvar vertex = new Vector3();\n\t\tvar uv = new Vector2();\n\n\t\t// center point\n\n\t\tvertices.push( 0, 0, 0 );\n\t\tnormals.push( 0, 0, 1 );\n\t\tuvs.push( 0.5, 0.5 );\n\n\t\tfor ( s = 0, i = 3; s <= segments; s ++, i += 3 ) {\n\n\t\t\tvar segment = thetaStart + s / segments * thetaLength;\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\n\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t// uvs\n\n\t\t\tuv.x = ( vertices[ i ] / radius + 1 ) / 2;\n\t\t\tuv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;\n\n\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\t\tindices.push( i, i + 1, 0 );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tCircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tCircleBufferGeometry.prototype.constructor = CircleBufferGeometry;\n\n\n\n\tvar Geometries = Object.freeze({\n\t\tWireframeGeometry: WireframeGeometry,\n\t\tParametricGeometry: ParametricGeometry,\n\t\tParametricBufferGeometry: ParametricBufferGeometry,\n\t\tTetrahedronGeometry: TetrahedronGeometry,\n\t\tTetrahedronBufferGeometry: TetrahedronBufferGeometry,\n\t\tOctahedronGeometry: OctahedronGeometry,\n\t\tOctahedronBufferGeometry: OctahedronBufferGeometry,\n\t\tIcosahedronGeometry: IcosahedronGeometry,\n\t\tIcosahedronBufferGeometry: IcosahedronBufferGeometry,\n\t\tDodecahedronGeometry: DodecahedronGeometry,\n\t\tDodecahedronBufferGeometry: DodecahedronBufferGeometry,\n\t\tPolyhedronGeometry: PolyhedronGeometry,\n\t\tPolyhedronBufferGeometry: PolyhedronBufferGeometry,\n\t\tTubeGeometry: TubeGeometry,\n\t\tTubeBufferGeometry: TubeBufferGeometry,\n\t\tTorusKnotGeometry: TorusKnotGeometry,\n\t\tTorusKnotBufferGeometry: TorusKnotBufferGeometry,\n\t\tTorusGeometry: TorusGeometry,\n\t\tTorusBufferGeometry: TorusBufferGeometry,\n\t\tTextGeometry: TextGeometry,\n\t\tTextBufferGeometry: TextBufferGeometry,\n\t\tSphereGeometry: SphereGeometry,\n\t\tSphereBufferGeometry: SphereBufferGeometry,\n\t\tRingGeometry: RingGeometry,\n\t\tRingBufferGeometry: RingBufferGeometry,\n\t\tPlaneGeometry: PlaneGeometry,\n\t\tPlaneBufferGeometry: PlaneBufferGeometry,\n\t\tLatheGeometry: LatheGeometry,\n\t\tLatheBufferGeometry: LatheBufferGeometry,\n\t\tShapeGeometry: ShapeGeometry,\n\t\tShapeBufferGeometry: ShapeBufferGeometry,\n\t\tExtrudeGeometry: ExtrudeGeometry,\n\t\tExtrudeBufferGeometry: ExtrudeBufferGeometry,\n\t\tEdgesGeometry: EdgesGeometry,\n\t\tConeGeometry: ConeGeometry,\n\t\tConeBufferGeometry: ConeBufferGeometry,\n\t\tCylinderGeometry: CylinderGeometry,\n\t\tCylinderBufferGeometry: CylinderBufferGeometry,\n\t\tCircleGeometry: CircleGeometry,\n\t\tCircleBufferGeometry: CircleBufferGeometry,\n\t\tBoxGeometry: BoxGeometry,\n\t\tBoxBufferGeometry: BoxBufferGeometry\n\t});\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t *\n\t * parameters = {\n\t *  opacity: <float>\n\t * }\n\t */\n\n\tfunction ShadowMaterial( parameters ) {\n\n\t\tShaderMaterial.call( this, {\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\topacity: { value: 1.0 }\n\t\t\t\t}\n\t\t\t] ),\n\t\t\tvertexShader: ShaderChunk[ 'shadow_vert' ],\n\t\t\tfragmentShader: ShaderChunk[ 'shadow_frag' ]\n\t\t} );\n\n\t\tthis.lights = true;\n\t\tthis.transparent = true;\n\n\t\tObject.defineProperties( this, {\n\t\t\topacity: {\n\t\t\t\tenumerable: true,\n\t\t\t\tget: function () {\n\t\t\t\t\treturn this.uniforms.opacity.value;\n\t\t\t\t},\n\t\t\t\tset: function ( value ) {\n\t\t\t\t\tthis.uniforms.opacity.value = value;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tShadowMaterial.prototype = Object.create( ShaderMaterial.prototype );\n\tShadowMaterial.prototype.constructor = ShadowMaterial;\n\n\tShadowMaterial.prototype.isShadowMaterial = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction RawShaderMaterial( parameters ) {\n\n\t\tShaderMaterial.call( this, parameters );\n\n\t\tthis.type = 'RawShaderMaterial';\n\n\t}\n\n\tRawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );\n\tRawShaderMaterial.prototype.constructor = RawShaderMaterial;\n\n\tRawShaderMaterial.prototype.isRawShaderMaterial = true;\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  roughness: <float>,\n\t *  metalness: <float>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  roughnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *  metalnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  envMapIntensity: <float>\n\t *\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshStandardMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.type = 'MeshStandardMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\tthis.roughness = 0.5;\n\t\tthis.metalness = 0.5;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.roughnessMap = null;\n\n\t\tthis.metalnessMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.envMapIntensity = 1.0;\n\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshStandardMaterial.prototype = Object.create( Material.prototype );\n\tMeshStandardMaterial.prototype.constructor = MeshStandardMaterial;\n\n\tMeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n\n\tMeshStandardMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.color.copy( source.color );\n\t\tthis.roughness = source.roughness;\n\t\tthis.metalness = source.metalness;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.roughnessMap = source.roughnessMap;\n\n\t\tthis.metalnessMap = source.metalnessMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.envMapIntensity = source.envMapIntensity;\n\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  reflectivity: <float>\n\t * }\n\t */\n\n\tfunction MeshPhysicalMaterial( parameters ) {\n\n\t\tMeshStandardMaterial.call( this );\n\n\t\tthis.defines = { 'PHYSICAL': '' };\n\n\t\tthis.type = 'MeshPhysicalMaterial';\n\n\t\tthis.reflectivity = 0.5; // maps to F0 = 0.04\n\n\t\tthis.clearCoat = 0.0;\n\t\tthis.clearCoatRoughness = 0.0;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );\n\tMeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\n\n\tMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\n\tMeshPhysicalMaterial.prototype.copy = function ( source ) {\n\n\t\tMeshStandardMaterial.prototype.copy.call( this, source );\n\n\t\tthis.defines = { 'PHYSICAL': '' };\n\n\t\tthis.reflectivity = source.reflectivity;\n\n\t\tthis.clearCoat = source.clearCoat;\n\t\tthis.clearCoatRoughness = source.clearCoatRoughness;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  specular: <hex>,\n\t *  shininess: <float>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.Multiply,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshPhongMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshPhongMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\tthis.specular = new Color( 0x111111 );\n\t\tthis.shininess = 30;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshPhongMaterial.prototype = Object.create( Material.prototype );\n\tMeshPhongMaterial.prototype.constructor = MeshPhongMaterial;\n\n\tMeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n\n\tMeshPhongMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.specular.copy( source.specular );\n\t\tthis.shininess = source.shininess;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author takahirox / http://github.com/takahirox\n\t *\n\t * parameters = {\n\t *  gradientMap: new THREE.Texture( <Image> )\n\t * }\n\t */\n\n\tfunction MeshToonMaterial( parameters ) {\n\n\t\tMeshPhongMaterial.call( this );\n\n\t\tthis.defines = { 'TOON': '' };\n\n\t\tthis.type = 'MeshToonMaterial';\n\n\t\tthis.gradientMap = null;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshToonMaterial.prototype = Object.create( MeshPhongMaterial.prototype );\n\tMeshToonMaterial.prototype.constructor = MeshToonMaterial;\n\n\tMeshToonMaterial.prototype.isMeshToonMaterial = true;\n\n\tMeshToonMaterial.prototype.copy = function ( source ) {\n\n\t\tMeshPhongMaterial.prototype.copy.call( this, source );\n\n\t\tthis.gradientMap = source.gradientMap;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  opacity: <float>,\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshNormalMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshNormalMaterial';\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false;\n\t\tthis.lights = false;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshNormalMaterial.prototype = Object.create( Material.prototype );\n\tMeshNormalMaterial.prototype.constructor = MeshNormalMaterial;\n\n\tMeshNormalMaterial.prototype.isMeshNormalMaterial = true;\n\n\tMeshNormalMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.Multiply,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshLambertMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshLambertMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshLambertMaterial.prototype = Object.create( Material.prototype );\n\tMeshLambertMaterial.prototype.constructor = MeshLambertMaterial;\n\n\tMeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n\n\tMeshLambertMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  linewidth: <float>,\n\t *\n\t *  scale: <float>,\n\t *  dashSize: <float>,\n\t *  gapSize: <float>\n\t * }\n\t */\n\n\tfunction LineDashedMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'LineDashedMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.linewidth = 1;\n\n\t\tthis.scale = 1;\n\t\tthis.dashSize = 3;\n\t\tthis.gapSize = 1;\n\n\t\tthis.lights = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tLineDashedMaterial.prototype = Object.create( Material.prototype );\n\tLineDashedMaterial.prototype.constructor = LineDashedMaterial;\n\n\tLineDashedMaterial.prototype.isLineDashedMaterial = true;\n\n\tLineDashedMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.linewidth = source.linewidth;\n\n\t\tthis.scale = source.scale;\n\t\tthis.dashSize = source.dashSize;\n\t\tthis.gapSize = source.gapSize;\n\n\t\treturn this;\n\n\t};\n\n\n\n\tvar Materials = Object.freeze({\n\t\tShadowMaterial: ShadowMaterial,\n\t\tSpriteMaterial: SpriteMaterial,\n\t\tRawShaderMaterial: RawShaderMaterial,\n\t\tShaderMaterial: ShaderMaterial,\n\t\tPointsMaterial: PointsMaterial,\n\t\tMeshPhysicalMaterial: MeshPhysicalMaterial,\n\t\tMeshStandardMaterial: MeshStandardMaterial,\n\t\tMeshPhongMaterial: MeshPhongMaterial,\n\t\tMeshToonMaterial: MeshToonMaterial,\n\t\tMeshNormalMaterial: MeshNormalMaterial,\n\t\tMeshLambertMaterial: MeshLambertMaterial,\n\t\tMeshDepthMaterial: MeshDepthMaterial,\n\t\tMeshBasicMaterial: MeshBasicMaterial,\n\t\tLineDashedMaterial: LineDashedMaterial,\n\t\tLineBasicMaterial: LineBasicMaterial,\n\t\tMaterial: Material\n\t});\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar Cache = {\n\n\t\tenabled: false,\n\n\t\tfiles: {},\n\n\t\tadd: function ( key, file ) {\n\n\t\t\tif ( this.enabled === false ) return;\n\n\t\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\t\tthis.files[ key ] = file;\n\n\t\t},\n\n\t\tget: function ( key ) {\n\n\t\t\tif ( this.enabled === false ) return;\n\n\t\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\t\treturn this.files[ key ];\n\n\t\t},\n\n\t\tremove: function ( key ) {\n\n\t\t\tdelete this.files[ key ];\n\n\t\t},\n\n\t\tclear: function () {\n\n\t\t\tthis.files = {};\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction LoadingManager( onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar isLoading = false, itemsLoaded = 0, itemsTotal = 0;\n\n\t\tthis.onStart = undefined;\n\t\tthis.onLoad = onLoad;\n\t\tthis.onProgress = onProgress;\n\t\tthis.onError = onError;\n\n\t\tthis.itemStart = function ( url ) {\n\n\t\t\titemsTotal ++;\n\n\t\t\tif ( isLoading === false ) {\n\n\t\t\t\tif ( scope.onStart !== undefined ) {\n\n\t\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tisLoading = true;\n\n\t\t};\n\n\t\tthis.itemEnd = function ( url ) {\n\n\t\t\titemsLoaded ++;\n\n\t\t\tif ( scope.onProgress !== undefined ) {\n\n\t\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\n\n\t\t\t}\n\n\t\t\tif ( itemsLoaded === itemsTotal ) {\n\n\t\t\t\tisLoading = false;\n\n\t\t\t\tif ( scope.onLoad !== undefined ) {\n\n\t\t\t\t\tscope.onLoad();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.itemError = function ( url ) {\n\n\t\t\tif ( scope.onError !== undefined ) {\n\n\t\t\t\tscope.onError( url );\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tvar DefaultLoadingManager = new LoadingManager();\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction FileLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t}\n\n\tObject.assign( FileLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( url === undefined ) url = '';\n\n\t\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\t\tvar scope = this;\n\n\t\t\tvar cached = Cache.get( url );\n\n\t\t\tif ( cached !== undefined ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t\treturn cached;\n\n\t\t\t}\n\n\t\t\t// Check for data: URI\n\t\t\tvar dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\n\t\t\tvar dataUriRegexResult = url.match( dataUriRegex );\n\n\t\t\t// Safari can not handle Data URIs through XMLHttpRequest so process manually\n\t\t\tif ( dataUriRegexResult ) {\n\n\t\t\t\tvar mimeType = dataUriRegexResult[ 1 ];\n\t\t\t\tvar isBase64 = !! dataUriRegexResult[ 2 ];\n\t\t\t\tvar data = dataUriRegexResult[ 3 ];\n\n\t\t\t\tdata = window.decodeURIComponent( data );\n\n\t\t\t\tif ( isBase64 ) data = window.atob( data );\n\n\t\t\t\ttry {\n\n\t\t\t\t\tvar response;\n\t\t\t\t\tvar responseType = ( this.responseType || '' ).toLowerCase();\n\n\t\t\t\t\tswitch ( responseType ) {\n\n\t\t\t\t\t\tcase 'arraybuffer':\n\t\t\t\t\t\tcase 'blob':\n\n\t\t\t\t\t\t \tresponse = new ArrayBuffer( data.length );\n\n\t\t\t\t\t\t\tvar view = new Uint8Array( response );\n\n\t\t\t\t\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n\t\t\t\t\t\t\t\tview[ i ] = data.charCodeAt( i );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( responseType === 'blob' ) {\n\n\t\t\t\t\t\t\t\tresponse = new Blob( [ response ], { type: mimeType } );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'document':\n\n\t\t\t\t\t\t\tvar parser = new DOMParser();\n\t\t\t\t\t\t\tresponse = parser.parseFromString( data, mimeType );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'json':\n\n\t\t\t\t\t\t\tresponse = JSON.parse( data );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault: // 'text' or other\n\n\t\t\t\t\t\t\tresponse = data;\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Wait for next browser tick\n\t\t\t\t\twindow.setTimeout( function () {\n\n\t\t\t\t\t\tif ( onLoad ) onLoad( response );\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t}, 0 );\n\n\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t// Wait for next browser tick\n\t\t\t\t\twindow.setTimeout( function () {\n\n\t\t\t\t\t\tif ( onError ) onError( error );\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\t\t\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t\t\t}, 0 );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar request = new XMLHttpRequest();\n\t\t\t\trequest.open( 'GET', url, true );\n\n\t\t\t\trequest.addEventListener( 'load', function ( event ) {\n\n\t\t\t\t\tvar response = event.target.response;\n\n\t\t\t\t\tCache.add( url, response );\n\n\t\t\t\t\tif ( this.status === 200 ) {\n\n\t\t\t\t\t\tif ( onLoad ) onLoad( response );\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t} else if ( this.status === 0 ) {\n\n\t\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\n\t\t\t\t\t\tconsole.warn( 'THREE.FileLoader: HTTP Status 0 received.' );\n\n\t\t\t\t\t\tif ( onLoad ) onLoad( response );\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( onError ) onError( event );\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\t\t\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t\t\t}\n\n\t\t\t\t}, false );\n\n\t\t\t\tif ( onProgress !== undefined ) {\n\n\t\t\t\t\trequest.addEventListener( 'progress', function ( event ) {\n\n\t\t\t\t\t\tonProgress( event );\n\n\t\t\t\t\t}, false );\n\n\t\t\t\t}\n\n\t\t\t\trequest.addEventListener( 'error', function ( event ) {\n\n\t\t\t\t\tif ( onError ) onError( event );\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\t\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t\t}, false );\n\n\t\t\t\tif ( this.responseType !== undefined ) request.responseType = this.responseType;\n\t\t\t\tif ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;\n\n\t\t\t\tif ( request.overrideMimeType ) request.overrideMimeType( this.mimeType !== undefined ? this.mimeType : 'text/plain' );\n\n\t\t\t\tfor ( var header in this.requestHeader ) {\n\n\t\t\t\t\trequest.setRequestHeader( header, this.requestHeader[ header ] );\n\n\t\t\t\t}\n\n\t\t\t\trequest.send( null );\n\n\t\t\t}\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\treturn request;\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetResponseType: function ( value ) {\n\n\t\t\tthis.responseType = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetWithCredentials: function ( value ) {\n\n\t\t\tthis.withCredentials = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetMimeType: function ( value ) {\n\n\t\t\tthis.mimeType = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetRequestHeader: function ( value ) {\n\n\t\t\tthis.requestHeader = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t *\n\t * Abstract Base class to block based textures loader (dds, pvr, ...)\n\t */\n\n\tfunction CompressedTextureLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t\t// override in sub classes\n\t\tthis._parser = null;\n\n\t}\n\n\tObject.assign( CompressedTextureLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar images = [];\n\n\t\t\tvar texture = new CompressedTexture();\n\t\t\ttexture.image = images;\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\t\tfunction loadTexture( i ) {\n\n\t\t\t\tloader.load( url[ i ], function ( buffer ) {\n\n\t\t\t\t\tvar texDatas = scope._parser( buffer, true );\n\n\t\t\t\t\timages[ i ] = {\n\t\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t\t};\n\n\t\t\t\t\tloaded += 1;\n\n\t\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\t\tif ( texDatas.mipmapCount === 1 )\n\t\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t\t}\n\n\t\t\t\t}, onProgress, onError );\n\n\t\t\t}\n\n\t\t\tif ( Array.isArray( url ) ) {\n\n\t\t\t\tvar loaded = 0;\n\n\t\t\t\tfor ( var i = 0, il = url.length; i < il; ++ i ) {\n\n\t\t\t\t\tloadTexture( i );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// compressed cubemap texture stored in a single DDS file\n\n\t\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\t\tvar texDatas = scope._parser( buffer, true );\n\n\t\t\t\t\tif ( texDatas.isCubemap ) {\n\n\t\t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n\t\t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\n\n\t\t\t\t\t\t\timages[ f ] = { mipmaps : [] };\n\n\t\t\t\t\t\t\tfor ( var i = 0; i < texDatas.mipmapCount; i ++ ) {\n\n\t\t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\n\t\t\t\t\t\t\t\timages[ f ].format = texDatas.format;\n\t\t\t\t\t\t\t\timages[ f ].width = texDatas.width;\n\t\t\t\t\t\t\t\timages[ f ].height = texDatas.height;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( texDatas.mipmapCount === 1 ) {\n\n\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t}, onProgress, onError );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Nikos M. / https://github.com/foo123/\n\t *\n\t * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n\t */\n\n\tfunction DataTextureLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t\t// override in sub classes\n\t\tthis._parser = null;\n\n\t}\n\n\tObject.assign( DataTextureLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar texture = new DataTexture();\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\tvar texData = scope._parser( buffer );\n\n\t\t\t\tif ( ! texData ) return;\n\n\t\t\t\tif ( undefined !== texData.image ) {\n\n\t\t\t\t\ttexture.image = texData.image;\n\n\t\t\t\t} else if ( undefined !== texData.data ) {\n\n\t\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\t\ttexture.image.data = texData.data;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.wrapS = undefined !== texData.wrapS ? texData.wrapS : ClampToEdgeWrapping;\n\t\t\t\ttexture.wrapT = undefined !== texData.wrapT ? texData.wrapT : ClampToEdgeWrapping;\n\n\t\t\t\ttexture.magFilter = undefined !== texData.magFilter ? texData.magFilter : LinearFilter;\n\t\t\t\ttexture.minFilter = undefined !== texData.minFilter ? texData.minFilter : LinearMipMapLinearFilter;\n\n\t\t\t\ttexture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;\n\n\t\t\t\tif ( undefined !== texData.format ) {\n\n\t\t\t\t\ttexture.format = texData.format;\n\n\t\t\t\t}\n\t\t\t\tif ( undefined !== texData.type ) {\n\n\t\t\t\t\ttexture.type = texData.type;\n\n\t\t\t\t}\n\n\t\t\t\tif ( undefined !== texData.mipmaps ) {\n\n\t\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\n\t\t\t\t}\n\n\t\t\t\tif ( 1 === texData.mipmapCount ) {\n\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t\t}, onProgress, onError );\n\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction ImageLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t}\n\n\tObject.assign( ImageLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( url === undefined ) url = '';\n\n\t\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\t\tvar scope = this;\n\n\t\t\tvar cached = Cache.get( url );\n\n\t\t\tif ( cached !== undefined ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t\treturn cached;\n\n\t\t\t}\n\n\t\t\tvar image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );\n\n\t\t\timage.addEventListener( 'load', function () {\n\n\t\t\t\tCache.add( url, this );\n\n\t\t\t\tif ( onLoad ) onLoad( this );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, false );\n\n\t\t\t/*\n\t\t\timage.addEventListener( 'progress', function ( event ) {\n\n\t\t\t\tif ( onProgress ) onProgress( event );\n\n\t\t\t}, false );\n\t\t\t*/\n\n\t\t\timage.addEventListener( 'error', function ( event ) {\n\n\t\t\t\tif ( onError ) onError( event );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}, false );\n\n\t\t\tif ( url.substr( 0, 5 ) !== 'data:' ) {\n\n\t\t\t\tif ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;\n\n\t\t\t}\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\timage.src = url;\n\n\t\t\treturn image;\n\n\t\t},\n\n\t\tsetCrossOrigin: function ( value ) {\n\n\t\t\tthis.crossOrigin = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction CubeTextureLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t}\n\n\tObject.assign( CubeTextureLoader.prototype, {\n\n\t\tload: function ( urls, onLoad, onProgress, onError ) {\n\n\t\t\tvar texture = new CubeTexture();\n\n\t\t\tvar loader = new ImageLoader( this.manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\t\tloader.setPath( this.path );\n\n\t\t\tvar loaded = 0;\n\n\t\t\tfunction loadTexture( i ) {\n\n\t\t\t\tloader.load( urls[ i ], function ( image ) {\n\n\t\t\t\t\ttexture.images[ i ] = image;\n\n\t\t\t\t\tloaded ++;\n\n\t\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t\t}\n\n\t\t\t\t}, undefined, onError );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < urls.length; ++ i ) {\n\n\t\t\t\tloadTexture( i );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t},\n\n\t\tsetCrossOrigin: function ( value ) {\n\n\t\t\tthis.crossOrigin = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction TextureLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t}\n\n\tObject.assign( TextureLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar loader = new ImageLoader( this.manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\t\tloader.setPath( this.path );\n\n\t\t\tvar texture = new Texture();\n\t\t\ttexture.image = loader.load( url, function () {\n\n\t\t\t\t// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\n\t\t\t\tvar isJPEG = url.search( /\\.(jpg|jpeg)$/ ) > 0 || url.search( /^data\\:image\\/jpeg/ ) === 0;\n\n\t\t\t\ttexture.format = isJPEG ? RGBFormat : RGBAFormat;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad !== undefined ) {\n\n\t\t\t\t\tonLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t\treturn texture;\n\n\t\t},\n\n\t\tsetCrossOrigin: function ( value ) {\n\n\t\t\tthis.crossOrigin = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Light( color, intensity ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Light';\n\n\t\tthis.color = new Color( color );\n\t\tthis.intensity = intensity !== undefined ? intensity : 1;\n\n\t\tthis.receiveShadow = undefined;\n\n\t}\n\n\tLight.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Light,\n\n\t\tisLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tthis.color.copy( source.color );\n\t\t\tthis.intensity = source.intensity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.color = this.color.getHex();\n\t\t\tdata.object.intensity = this.intensity;\n\n\t\t\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\n\n\t\t\tif ( this.distance !== undefined ) data.object.distance = this.distance;\n\t\t\tif ( this.angle !== undefined ) data.object.angle = this.angle;\n\t\t\tif ( this.decay !== undefined ) data.object.decay = this.decay;\n\t\t\tif ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;\n\n\t\t\tif ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction HemisphereLight( skyColor, groundColor, intensity ) {\n\n\t\tLight.call( this, skyColor, intensity );\n\n\t\tthis.type = 'HemisphereLight';\n\n\t\tthis.castShadow = undefined;\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.groundColor = new Color( groundColor );\n\n\t}\n\n\tHemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: HemisphereLight,\n\n\t\tisHemisphereLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.groundColor.copy( source.groundColor );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction LightShadow( camera ) {\n\n\t\tthis.camera = camera;\n\n\t\tthis.bias = 0;\n\t\tthis.radius = 1;\n\n\t\tthis.mapSize = new Vector2( 512, 512 );\n\n\t\tthis.map = null;\n\t\tthis.matrix = new Matrix4();\n\n\t}\n\n\tObject.assign( LightShadow.prototype, {\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.camera = source.camera.clone();\n\n\t\t\tthis.bias = source.bias;\n\t\t\tthis.radius = source.radius;\n\n\t\t\tthis.mapSize.copy( source.mapSize );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar object = {};\n\n\t\t\tif ( this.bias !== 0 ) object.bias = this.bias;\n\t\t\tif ( this.radius !== 1 ) object.radius = this.radius;\n\t\t\tif ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();\n\n\t\t\tobject.camera = this.camera.toJSON( false ).object;\n\t\t\tdelete object.camera.matrix;\n\n\t\t\treturn object;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction SpotLightShadow() {\n\n\t\tLightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );\n\n\t}\n\n\tSpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\t\tconstructor: SpotLightShadow,\n\n\t\tisSpotLightShadow: true,\n\n\t\tupdate: function ( light ) {\n\n\t\t\tvar camera = this.camera;\n\n\t\t\tvar fov = _Math.RAD2DEG * 2 * light.angle;\n\t\t\tvar aspect = this.mapSize.width / this.mapSize.height;\n\t\t\tvar far = light.distance || camera.far;\n\n\t\t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\n\n\t\t\t\tcamera.fov = fov;\n\t\t\t\tcamera.aspect = aspect;\n\t\t\t\tcamera.far = far;\n\t\t\t\tcamera.updateProjectionMatrix();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction SpotLight( color, intensity, distance, angle, penumbra, decay ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'SpotLight';\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.target = new Object3D();\n\n\t\tObject.defineProperty( this, 'power', {\n\t\t\tget: function () {\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t\t\t\treturn this.intensity * Math.PI;\n\t\t\t},\n\t\t\tset: function ( power ) {\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t\t\t\tthis.intensity = power / Math.PI;\n\t\t\t}\n\t\t} );\n\n\t\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\t\tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\n\t\tthis.penumbra = ( penumbra !== undefined ) ? penumbra : 0;\n\t\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\t\tthis.shadow = new SpotLightShadow();\n\n\t}\n\n\tSpotLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: SpotLight,\n\n\t\tisSpotLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.angle = source.angle;\n\t\t\tthis.penumbra = source.penumbra;\n\t\t\tthis.decay = source.decay;\n\n\t\t\tthis.target = source.target.clone();\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\n\tfunction PointLight( color, intensity, distance, decay ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'PointLight';\n\n\t\tObject.defineProperty( this, 'power', {\n\t\t\tget: function () {\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t\t\t\treturn this.intensity * 4 * Math.PI;\n\n\t\t\t},\n\t\t\tset: function ( power ) {\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t\t\t\tthis.intensity = power / ( 4 * Math.PI );\n\t\t\t}\n\t\t} );\n\n\t\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\t\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\t\tthis.shadow = new LightShadow( new PerspectiveCamera( 90, 1, 0.5, 500 ) );\n\n\t}\n\n\tPointLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: PointLight,\n\n\t\tisPointLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.decay = source.decay;\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction DirectionalLightShadow( ) {\n\n\t\tLightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\n\n\t}\n\n\tDirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\t\tconstructor: DirectionalLightShadow\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction DirectionalLight( color, intensity ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'DirectionalLight';\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.target = new Object3D();\n\n\t\tthis.shadow = new DirectionalLightShadow();\n\n\t}\n\n\tDirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: DirectionalLight,\n\n\t\tisDirectionalLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.target = source.target.clone();\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AmbientLight( color, intensity ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'AmbientLight';\n\n\t\tthis.castShadow = undefined;\n\n\t}\n\n\tAmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: AmbientLight,\n\n\t\tisAmbientLight: true\n\n\t} );\n\n\t/**\n\t * @author abelnation / http://github.com/abelnation\n\t */\n\n\tfunction RectAreaLight( color, intensity, width, height ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'RectAreaLight';\n\n\t\tthis.position.set( 0, 1, 0 );\n\t\tthis.updateMatrix();\n\n\t\tthis.width = ( width !== undefined ) ? width : 10;\n\t\tthis.height = ( height !== undefined ) ? height : 10;\n\n\t\t// TODO (abelnation): distance/decay\n\n\t\t// TODO (abelnation): update method for RectAreaLight to update transform to lookat target\n\n\t\t// TODO (abelnation): shadows\n\n\t}\n\n\t// TODO (abelnation): RectAreaLight update when light shape is changed\n\tRectAreaLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: RectAreaLight,\n\n\t\tisRectAreaLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Light.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.width = this.width;\n\t\t\tdata.object.height = this.height;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author tschw\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t */\n\n\tvar AnimationUtils = {\n\n\t\t// same as Array.prototype.slice, but also works on typed arrays\n\t\tarraySlice: function ( array, from, to ) {\n\n\t\t\tif ( AnimationUtils.isTypedArray( array ) ) {\n\n\t\t\t\t// in ios9 array.subarray(from, undefined) will return empty array\n\t\t\t\t// but array.subarray(from) or array.subarray(from, len) is correct\n\t\t\t\treturn new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );\n\n\t\t\t}\n\n\t\t\treturn array.slice( from, to );\n\n\t\t},\n\n\t\t// converts an array to a specific type\n\t\tconvertArray: function ( array, type, forceClone ) {\n\n\t\t\tif ( ! array || // let 'undefined' and 'null' pass\n\t\t\t\t\t! forceClone && array.constructor === type ) return array;\n\n\t\t\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\n\n\t\t\t\treturn new type( array ); // create typed array\n\n\t\t\t}\n\n\t\t\treturn Array.prototype.slice.call( array ); // create Array\n\n\t\t},\n\n\t\tisTypedArray: function ( object ) {\n\n\t\t\treturn ArrayBuffer.isView( object ) &&\n\t\t\t\t\t! ( object instanceof DataView );\n\n\t\t},\n\n\t\t// returns an array by which times and values can be sorted\n\t\tgetKeyframeOrder: function ( times ) {\n\n\t\t\tfunction compareTime( i, j ) {\n\n\t\t\t\treturn times[ i ] - times[ j ];\n\n\t\t\t}\n\n\t\t\tvar n = times.length;\n\t\t\tvar result = new Array( n );\n\t\t\tfor ( var i = 0; i !== n; ++ i ) result[ i ] = i;\n\n\t\t\tresult.sort( compareTime );\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// uses the array previously returned by 'getKeyframeOrder' to sort data\n\t\tsortedArray: function ( values, stride, order ) {\n\n\t\t\tvar nValues = values.length;\n\t\t\tvar result = new values.constructor( nValues );\n\n\t\t\tfor ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\n\n\t\t\t\tvar srcOffset = order[ i ] * stride;\n\n\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// function for parsing AOS keyframe formats\n\t\tflattenJSON: function ( jsonKeys, times, values, valuePropertyName ) {\n\n\t\t\tvar i = 1, key = jsonKeys[ 0 ];\n\n\t\t\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\n\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t}\n\n\t\t\tif ( key === undefined ) return; // no data\n\n\t\t\tvar value = key[ valuePropertyName ];\n\t\t\tif ( value === undefined ) return; // no data\n\n\t\t\tif ( Array.isArray( value ) ) {\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalues.push.apply( values, value ); // push all elements\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t} else if ( value.toArray !== undefined ) {\n\n\t\t\t\t// ...assume THREE.Math-ish\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalue.toArray( values, values.length );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t} else {\n\n\t\t\t\t// otherwise push as-is\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalues.push( value );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\t/**\n\t * Abstract base class of interpolants over parametric samples.\n\t *\n\t * The parameter domain is one dimensional, typically the time or a path\n\t * along a curve defined by the data.\n\t *\n\t * The sample values can have any dimensionality and derived classes may\n\t * apply special interpretations to the data.\n\t *\n\t * This class provides the interval seek in a Template Method, deferring\n\t * the actual interpolation to derived classes.\n\t *\n\t * Time complexity is O(1) for linear access crossing at most two points\n\t * and O(log N) for random access, where N is the number of positions.\n\t *\n\t * References:\n\t *\n\t * \t\thttp://www.oodesign.com/template-method-pattern.html\n\t *\n\t * @author tschw\n\t */\n\n\tfunction Interpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tthis.parameterPositions = parameterPositions;\n\t\tthis._cachedIndex = 0;\n\n\t\tthis.resultBuffer = resultBuffer !== undefined ?\n\t\t\t\tresultBuffer : new sampleValues.constructor( sampleSize );\n\t\tthis.sampleValues = sampleValues;\n\t\tthis.valueSize = sampleSize;\n\n\t}\n\n\tObject.assign( Interpolant.prototype, {\n\n\t\tevaluate: function( t ) {\n\n\t\t\tvar pp = this.parameterPositions,\n\t\t\t\ti1 = this._cachedIndex,\n\n\t\t\t\tt1 = pp[   i1   ],\n\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\tvalidate_interval: {\n\n\t\t\t\tseek: {\n\n\t\t\t\t\tvar right;\n\n\t\t\t\t\tlinear_scan: {\n\t\t\t\t\t\t//- See http://jsperf.com/comparison-to-undefined/3\n\t\t\t\t\t\t//- slower code:\n\t\t\t\t\t\t//-\n\t\t\t\t\t\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t\t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\n\n\t\t\t\t\t\t\tfor ( var giveUpAt = i1 + 2; ;) {\n\n\t\t\t\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\t\t\t\tif ( t < t0 ) break forward_scan;\n\n\t\t\t\t\t\t\t\t\t// after end\n\n\t\t\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t, t0 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n\t\t\t\t\t\t\t\tt0 = t1;\n\t\t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\n\n\t\t\t\t\t\t\t\tif ( t < t1 ) {\n\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// prepare binary search on the right side of the index\n\t\t\t\t\t\t\tright = pp.length;\n\t\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//- slower code:\n\t\t\t\t\t\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\t\t\t\t\t\tif ( ! ( t >= t0 ) ) {\n\n\t\t\t\t\t\t\t// looping?\n\n\t\t\t\t\t\t\tvar t1global = pp[ 1 ];\n\n\t\t\t\t\t\t\tif ( t < t1global ) {\n\n\t\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\t\t\t\t\t\t\t\tt0 = t1global;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// linear reverse scan\n\n\t\t\t\t\t\t\tfor ( var giveUpAt = i1 - 2; ;) {\n\n\t\t\t\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\t\t\t\t// before start\n\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n\t\t\t\t\t\t\t\tt1 = t0;\n\t\t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\n\n\t\t\t\t\t\t\t\tif ( t >= t0 ) {\n\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// prepare binary search on the left side of the index\n\t\t\t\t\t\t\tright = i1;\n\t\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// the interval is valid\n\n\t\t\t\t\t\tbreak validate_interval;\n\n\t\t\t\t\t} // linear scan\n\n\t\t\t\t\t// binary search\n\n\t\t\t\t\twhile ( i1 < right ) {\n\n\t\t\t\t\t\tvar mid = ( i1 + right ) >>> 1;\n\n\t\t\t\t\t\tif ( t < pp[ mid ] ) {\n\n\t\t\t\t\t\t\tright = mid;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\ti1 = mid + 1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tt1 = pp[   i1   ];\n\t\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\t\t\t// check boundary cases, again\n\n\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t0, t );\n\n\t\t\t\t\t}\n\n\t\t\t\t} // seek\n\n\t\t\t\tthis._cachedIndex = i1;\n\n\t\t\t\tthis.intervalChanged_( i1, t0, t1 );\n\n\t\t\t} // validate_interval\n\n\t\t\treturn this.interpolate_( i1, t0, t, t1 );\n\n\t\t},\n\n\t\tsettings: null, // optional, subclass-specific settings structure\n\t\t// Note: The indirection allows central control of many interpolants.\n\n\t\t// --- Protected interface\n\n\t\tDefaultSettings_: {},\n\n\t\tgetSettings_: function() {\n\n\t\t\treturn this.settings || this.DefaultSettings_;\n\n\t\t},\n\n\t\tcopySampleValue_: function( index ) {\n\n\t\t\t// copies a sample value to the result buffer\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\t\t\t\toffset = index * stride;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] = values[ offset + i ];\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// Template methods for derived classes:\n\n\t\tinterpolate_: function( i1, t0, t, t1 ) {\n\n\t\t\tthrow new Error( \"call to abstract method\" );\n\t\t\t// implementations shall return this.resultBuffer\n\n\t\t},\n\n\t\tintervalChanged_: function( i1, t0, t1 ) {\n\n\t\t\t// empty\n\n\t\t}\n\n\t} );\n\n\t//!\\ DECLARE ALIAS AFTER assign prototype !\n\tObject.assign( Interpolant.prototype, {\n\n\t\t//( 0, t, t0 ), returns this.resultBuffer\n\t\tbeforeStart_: Interpolant.prototype.copySampleValue_,\n\n\t\t//( N-1, tN-1, t ), returns this.resultBuffer\n\t\tafterEnd_: Interpolant.prototype.copySampleValue_,\n\n\t} );\n\n\t/**\n\t * Fast and simple cubic spline interpolant.\n\t *\n\t * It was derived from a Hermitian construction setting the first derivative\n\t * at each sample position to the linear slope between neighboring positions\n\t * over their parameter interval.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction CubicInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call(\n\t\t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t\tthis._weightPrev = -0;\n\t\tthis._offsetPrev = -0;\n\t\tthis._weightNext = -0;\n\t\tthis._offsetNext = -0;\n\n\t}\n\n\tCubicInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: CubicInterpolant,\n\n\t\tDefaultSettings_: {\n\n\t\t\tendingStart: \tZeroCurvatureEnding,\n\t\t\tendingEnd:\t\tZeroCurvatureEnding\n\n\t\t},\n\n\t\tintervalChanged_: function( i1, t0, t1 ) {\n\n\t\t\tvar pp = this.parameterPositions,\n\t\t\t\tiPrev = i1 - 2,\n\t\t\t\tiNext = i1 + 1,\n\n\t\t\t\ttPrev = pp[ iPrev ],\n\t\t\t\ttNext = pp[ iNext ];\n\n\t\t\tif ( tPrev === undefined ) {\n\n\t\t\t\tswitch ( this.getSettings_().endingStart ) {\n\n\t\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = 2 * t0 - t1;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = t1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( tNext === undefined ) {\n\n\t\t\t\tswitch ( this.getSettings_().endingEnd ) {\n\n\t\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\t\tiNext = i1;\n\t\t\t\t\t\ttNext = 2 * t1 - t0;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiNext = 1;\n\t\t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\t\ttNext = t0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar halfDt = ( t1 - t0 ) * 0.5,\n\t\t\t\tstride = this.valueSize;\n\n\t\t\tthis._weightPrev = halfDt / ( t0 - tPrev );\n\t\t\tthis._weightNext = halfDt / ( tNext - t1 );\n\t\t\tthis._offsetPrev = iPrev * stride;\n\t\t\tthis._offsetNext = iNext * stride;\n\n\t\t},\n\n\t\tinterpolate_: function( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\n\t\t\t\toP = this._offsetPrev, \toN = this._offsetNext,\n\t\t\t\twP = this._weightPrev,\twN = this._weightNext,\n\n\t\t\t\tp = ( t - t0 ) / ( t1 - t0 ),\n\t\t\t\tpp = p * p,\n\t\t\t\tppp = pp * p;\n\n\t\t\t// evaluate polynomials\n\n\t\t\tvar sP =     - wP   * ppp   +         2 * wP    * pp    -          wP   * p;\n\t\t\tvar s0 = ( 1 + wP ) * ppp   + (-1.5 - 2 * wP )  * pp    + ( -0.5 + wP ) * p     + 1;\n\t\t\tvar s1 = (-1 - wN ) * ppp   + ( 1.5 +   wN   )  * pp    +    0.5        * p;\n\t\t\tvar sN =       wN   * ppp   -           wN      * pp;\n\n\t\t\t// combine data linearly\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] =\n\t\t\t\t\t\tsP * values[ oP + i ] +\n\t\t\t\t\t\ts0 * values[ o0 + i ] +\n\t\t\t\t\t\ts1 * values[ o1 + i ] +\n\t\t\t\t\t\tsN * values[ oN + i ];\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author tschw\n\t */\n\n\tfunction LinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: LinearInterpolant,\n\n\t\tinterpolate_: function( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\toffset1 = i1 * stride,\n\t\t\t\toffset0 = offset1 - stride,\n\n\t\t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\n\t\t\t\tweight0 = 1 - weight1;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] =\n\t\t\t\t\t\tvalues[ offset0 + i ] * weight0 +\n\t\t\t\t\t\tvalues[ offset1 + i ] * weight1;\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Interpolant that evaluates to the sample value at the position preceeding\n\t * the parameter.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction DiscreteInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tDiscreteInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: DiscreteInterpolant,\n\n\t\tinterpolate_: function( i1, t0, t, t1 ) {\n\n\t\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t\t}\n\n\t} );\n\n\tvar KeyframeTrackPrototype;\n\n\tKeyframeTrackPrototype = {\n\n\t\tTimeBufferType: Float32Array,\n\t\tValueBufferType: Float32Array,\n\n\t\tDefaultInterpolation: InterpolateLinear,\n\n\t\tInterpolantFactoryMethodDiscrete: function ( result ) {\n\n\t\t\treturn new DiscreteInterpolant(\n\t\t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodLinear: function ( result ) {\n\n\t\t\treturn new LinearInterpolant(\n\t\t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodSmooth: function ( result ) {\n\n\t\t\treturn new CubicInterpolant(\n\t\t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tsetInterpolation: function ( interpolation ) {\n\n\t\t\tvar factoryMethod;\n\n\t\t\tswitch ( interpolation ) {\n\n\t\t\t\tcase InterpolateDiscrete:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateLinear:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateSmooth:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( factoryMethod === undefined ) {\n\n\t\t\t\tvar message = \"unsupported interpolation for \" +\n\t\t\t\t\t\tthis.ValueTypeName + \" keyframe track named \" + this.name;\n\n\t\t\t\tif ( this.createInterpolant === undefined ) {\n\n\t\t\t\t\t// fall back to default, unless the default itself is messed up\n\t\t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\n\n\t\t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthrow new Error( message ); // fatal, in this case\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tconsole.warn( 'THREE.KeyframeTrackPrototype:', message );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.createInterpolant = factoryMethod;\n\n\t\t},\n\n\t\tgetInterpolation: function () {\n\n\t\t\tswitch ( this.createInterpolant ) {\n\n\t\t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\n\t\t\t\t\treturn InterpolateDiscrete;\n\n\t\t\t\tcase this.InterpolantFactoryMethodLinear:\n\n\t\t\t\t\treturn InterpolateLinear;\n\n\t\t\t\tcase this.InterpolantFactoryMethodSmooth:\n\n\t\t\t\t\treturn InterpolateSmooth;\n\n\t\t\t}\n\n\t\t},\n\n\t\tgetValueSize: function () {\n\n\t\t\treturn this.values.length / this.times.length;\n\n\t\t},\n\n\t\t// move all keyframes either forwards or backwards in time\n\t\tshift: function ( timeOffset ) {\n\n\t\t\tif ( timeOffset !== 0.0 ) {\n\n\t\t\t\tvar times = this.times;\n\n\t\t\t\tfor ( var i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\t\ttimes[ i ] += timeOffset;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\t\tscale: function ( timeScale ) {\n\n\t\t\tif ( timeScale !== 1.0 ) {\n\n\t\t\t\tvar times = this.times;\n\n\t\t\t\tfor ( var i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\t\ttimes[ i ] *= timeScale;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\t\ttrim: function ( startTime, endTime ) {\n\n\t\t\tvar times = this.times,\n\t\t\t\tnKeys = times.length,\n\t\t\t\tfrom = 0,\n\t\t\t\tto = nKeys - 1;\n\n\t\t\twhile ( from !== nKeys && times[ from ] < startTime ) ++ from;\n\t\t\twhile ( to !== - 1 && times[ to ] > endTime ) -- to;\n\n\t\t\t++ to; // inclusive -> exclusive bound\n\n\t\t\tif ( from !== 0 || to !== nKeys ) {\n\n\t\t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t\t\t\tif ( from >= to ) to = Math.max( to, 1 ), from = to - 1;\n\n\t\t\t\tvar stride = this.getValueSize();\n\t\t\t\tthis.times = AnimationUtils.arraySlice( times, from, to );\n\t\t\t\tthis.values = AnimationUtils.\n\t\t\t\t\t\tarraySlice( this.values, from * stride, to * stride );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\t\tvalidate: function () {\n\n\t\t\tvar valid = true;\n\n\t\t\tvar valueSize = this.getValueSize();\n\t\t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrackPrototype: Invalid value size in track.', this );\n\t\t\t\tvalid = false;\n\n\t\t\t}\n\n\t\t\tvar times = this.times,\n\t\t\t\tvalues = this.values,\n\n\t\t\t\tnKeys = times.length;\n\n\t\t\tif ( nKeys === 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrackPrototype: Track is empty.', this );\n\t\t\t\tvalid = false;\n\n\t\t\t}\n\n\t\t\tvar prevTime = null;\n\n\t\t\tfor ( var i = 0; i !== nKeys; i ++ ) {\n\n\t\t\t\tvar currTime = times[ i ];\n\n\t\t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.KeyframeTrackPrototype: Time is not a valid number.', this, i, currTime );\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tif ( prevTime !== null && prevTime > currTime ) {\n\n\t\t\t\t\tconsole.error( 'THREE.KeyframeTrackPrototype: Out of order keys.', this, i, currTime, prevTime );\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tprevTime = currTime;\n\n\t\t\t}\n\n\t\t\tif ( values !== undefined ) {\n\n\t\t\t\tif ( AnimationUtils.isTypedArray( values ) ) {\n\n\t\t\t\t\tfor ( var i = 0, n = values.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tvar value = values[ i ];\n\n\t\t\t\t\t\tif ( isNaN( value ) ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.KeyframeTrackPrototype: Value is not a valid number.', this, i, value );\n\t\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn valid;\n\n\t\t},\n\n\t\t// removes equivalent sequential keys as common in morph target sequences\n\t\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\t\toptimize: function () {\n\n\t\t\tvar times = this.times,\n\t\t\t\tvalues = this.values,\n\t\t\t\tstride = this.getValueSize(),\n\n\t\t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\n\t\t\t\twriteIndex = 1,\n\t\t\t\tlastIndex = times.length - 1;\n\n\t\t\tfor ( var i = 1; i < lastIndex; ++ i ) {\n\n\t\t\t\tvar keep = false;\n\n\t\t\t\tvar time = times[ i ];\n\t\t\t\tvar timeNext = times[ i + 1 ];\n\n\t\t\t\t// remove adjacent keyframes scheduled at the same time\n\n\t\t\t\tif ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {\n\n\t\t\t\t\tif ( ! smoothInterpolation ) {\n\n\t\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\n\t\t\t\t\t\tvar offset = i * stride,\n\t\t\t\t\t\t\toffsetP = offset - stride,\n\t\t\t\t\t\t\toffsetN = offset + stride;\n\n\t\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\t\tvar value = values[ offset + j ];\n\n\t\t\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\n\t\t\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\n\n\t\t\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else keep = true;\n\n\t\t\t\t}\n\n\t\t\t\t// in-place compaction\n\n\t\t\t\tif ( keep ) {\n\n\t\t\t\t\tif ( i !== writeIndex ) {\n\n\t\t\t\t\t\ttimes[ writeIndex ] = times[ i ];\n\n\t\t\t\t\t\tvar readOffset = i * stride,\n\t\t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n\t\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j )\n\n\t\t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\t++ writeIndex;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// flush last keyframe (compaction looks ahead)\n\n\t\t\tif ( lastIndex > 0 ) {\n\n\t\t\t\ttimes[ writeIndex ] = times[ lastIndex ];\n\n\t\t\t\tfor ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j )\n\n\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t\t++ writeIndex;\n\n\t\t\t}\n\n\t\t\tif ( writeIndex !== times.length ) {\n\n\t\t\t\tthis.times = AnimationUtils.arraySlice( times, 0, writeIndex );\n\t\t\t\tthis.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t};\n\n\tfunction KeyframeTrackConstructor( name, times, values, interpolation ) {\n\n\t\tif ( name === undefined ) throw new Error( \"track name is undefined\" );\n\n\t\tif ( times === undefined || times.length === 0 ) {\n\n\t\t\tthrow new Error( \"no keyframes in track named \" + name );\n\n\t\t}\n\n\t\tthis.name = name;\n\n\t\tthis.times = AnimationUtils.convertArray( times, this.TimeBufferType );\n\t\tthis.values = AnimationUtils.convertArray( values, this.ValueBufferType );\n\n\t\tthis.setInterpolation( interpolation || this.DefaultInterpolation );\n\n\t\tthis.validate();\n\t\tthis.optimize();\n\n\t}\n\n\t/**\n\t *\n\t * A Track of vectored keyframe values.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction VectorKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\n\t}\n\n\tVectorKeyframeTrack.prototype =\n\t\t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\n\t\tconstructor: VectorKeyframeTrack,\n\n\t\tValueTypeName: 'vector'\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\t} );\n\n\t/**\n\t * Spherical linear unit quaternion interpolant.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction QuaternionLinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tQuaternionLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: QuaternionLinearInterpolant,\n\n\t\tinterpolate_: function( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\toffset = i1 * stride,\n\n\t\t\t\talpha = ( t - t0 ) / ( t1 - t0 );\n\n\t\t\tfor ( var end = offset + stride; offset !== end; offset += 4 ) {\n\n\t\t\t\tQuaternion.slerpFlat( result, 0,\n\t\t\t\t\t\tvalues, offset - stride, values, offset, alpha );\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of quaternion keyframe values.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction QuaternionKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\n\t}\n\n\tQuaternionKeyframeTrack.prototype =\n\t\t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\n\t\tconstructor: QuaternionKeyframeTrack,\n\n\t\tValueTypeName: 'quaternion',\n\n\t\t// ValueBufferType is inherited\n\n\t\tDefaultInterpolation: InterpolateLinear,\n\n\t\tInterpolantFactoryMethodLinear: function( result ) {\n\n\t\t\treturn new QuaternionLinearInterpolant(\n\t\t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodSmooth: undefined // not yet implemented\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of numeric keyframe values.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction NumberKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\n\t}\n\n\tNumberKeyframeTrack.prototype =\n\t\t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\n\t\tconstructor: NumberKeyframeTrack,\n\n\t\tValueTypeName: 'number'\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\t} );\n\n\t/**\n\t *\n\t * A Track that interpolates Strings\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction StringKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\n\t}\n\n\tStringKeyframeTrack.prototype =\n\t\t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\n\t\tconstructor: StringKeyframeTrack,\n\n\t\tValueTypeName: 'string',\n\t\tValueBufferType: Array,\n\n\t\tDefaultInterpolation: InterpolateDiscrete,\n\n\t\tInterpolantFactoryMethodLinear: undefined,\n\n\t\tInterpolantFactoryMethodSmooth: undefined\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of Boolean keyframe values.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction BooleanKeyframeTrack( name, times, values ) {\n\n\t\tKeyframeTrackConstructor.call( this, name, times, values );\n\n\t}\n\n\tBooleanKeyframeTrack.prototype =\n\t\t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\n\t\tconstructor: BooleanKeyframeTrack,\n\n\t\tValueTypeName: 'bool',\n\t\tValueBufferType: Array,\n\n\t\tDefaultInterpolation: InterpolateDiscrete,\n\n\t\tInterpolantFactoryMethodLinear: undefined,\n\t\tInterpolantFactoryMethodSmooth: undefined\n\n\t\t// Note: Actually this track could have a optimized / compressed\n\t\t// representation of a single value and a custom interpolant that\n\t\t// computes \"firstValue ^ isOdd( index )\".\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of keyframe values that represent color.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction ColorKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\n\t}\n\n\tColorKeyframeTrack.prototype =\n\t\t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\n\t\tconstructor: ColorKeyframeTrack,\n\n\t\tValueTypeName: 'color'\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\n\t\t// Note: Very basic implementation and nothing special yet.\n\t\t// However, this is the place for color space parameterization.\n\n\t} );\n\n\t/**\n\t *\n\t * A timed sequence of keyframes for a specific property.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction KeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrackConstructor.apply( this, arguments );\n\n\t}\n\n\tKeyframeTrack.prototype = KeyframeTrackPrototype;\n\tKeyframeTrackPrototype.constructor = KeyframeTrack;\n\n\t// Static methods:\n\n\tObject.assign( KeyframeTrack, {\n\n\t\t// Serialization (in static context, because of constructor invocation\n\t\t// and automatic invocation of .toJSON):\n\n\t\tparse: function( json ) {\n\n\t\t\tif( json.type === undefined ) {\n\n\t\t\t\tthrow new Error( \"track type undefined, can not parse\" );\n\n\t\t\t}\n\n\t\t\tvar trackType = KeyframeTrack._getTrackTypeForValueTypeName( json.type );\n\n\t\t\tif ( json.times === undefined ) {\n\n\t\t\t\tvar times = [], values = [];\n\n\t\t\t\tAnimationUtils.flattenJSON( json.keys, times, values, 'value' );\n\n\t\t\t\tjson.times = times;\n\t\t\t\tjson.values = values;\n\n\t\t\t}\n\n\t\t\t// derived classes can define a static parse method\n\t\t\tif ( trackType.parse !== undefined ) {\n\n\t\t\t\treturn trackType.parse( json );\n\n\t\t\t} else {\n\n\t\t\t\t// by default, we asssume a constructor compatible with the base\n\t\t\t\treturn new trackType(\n\t\t\t\t\t\tjson.name, json.times, json.values, json.interpolation );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function( track ) {\n\n\t\t\tvar trackType = track.constructor;\n\n\t\t\tvar json;\n\n\t\t\t// derived classes can define a static toJSON method\n\t\t\tif ( trackType.toJSON !== undefined ) {\n\n\t\t\t\tjson = trackType.toJSON( track );\n\n\t\t\t} else {\n\n\t\t\t\t// by default, we assume the data can be serialized as-is\n\t\t\t\tjson = {\n\n\t\t\t\t\t'name': track.name,\n\t\t\t\t\t'times': AnimationUtils.convertArray( track.times, Array ),\n\t\t\t\t\t'values': AnimationUtils.convertArray( track.values, Array )\n\n\t\t\t\t};\n\n\t\t\t\tvar interpolation = track.getInterpolation();\n\n\t\t\t\tif ( interpolation !== track.DefaultInterpolation ) {\n\n\t\t\t\t\tjson.interpolation = interpolation;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tjson.type = track.ValueTypeName; // mandatory\n\n\t\t\treturn json;\n\n\t\t},\n\n\t\t_getTrackTypeForValueTypeName: function( typeName ) {\n\n\t\t\tswitch( typeName.toLowerCase() ) {\n\n\t\t\t\tcase \"scalar\":\n\t\t\t\tcase \"double\":\n\t\t\t\tcase \"float\":\n\t\t\t\tcase \"number\":\n\t\t\t\tcase \"integer\":\n\n\t\t\t\t\treturn NumberKeyframeTrack;\n\n\t\t\t\tcase \"vector\":\n\t\t\t\tcase \"vector2\":\n\t\t\t\tcase \"vector3\":\n\t\t\t\tcase \"vector4\":\n\n\t\t\t\t\treturn VectorKeyframeTrack;\n\n\t\t\t\tcase \"color\":\n\n\t\t\t\t\treturn ColorKeyframeTrack;\n\n\t\t\t\tcase \"quaternion\":\n\n\t\t\t\t\treturn QuaternionKeyframeTrack;\n\n\t\t\t\tcase \"bool\":\n\t\t\t\tcase \"boolean\":\n\n\t\t\t\t\treturn BooleanKeyframeTrack;\n\n\t\t\t\tcase \"string\":\n\n\t\t\t\t\treturn StringKeyframeTrack;\n\n\t\t\t}\n\n\t\t\tthrow new Error( \"Unsupported typeName: \" + typeName );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Reusable set of Tracks that represent an animation.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t */\n\n\tfunction AnimationClip( name, duration, tracks ) {\n\n\t\tthis.name = name;\n\t\tthis.tracks = tracks;\n\t\tthis.duration = ( duration !== undefined ) ? duration : - 1;\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\t// this means it should figure out its duration by scanning the tracks\n\t\tif ( this.duration < 0 ) {\n\n\t\t\tthis.resetDuration();\n\n\t\t}\n\n\t\tthis.optimize();\n\n\t}\n\n\tObject.assign( AnimationClip, {\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar tracks = [],\n\t\t\t\tjsonTracks = json.tracks,\n\t\t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\n\n\t\t\tfor ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {\n\n\t\t\t\ttracks.push( KeyframeTrack.parse( jsonTracks[ i ] ).scale( frameTime ) );\n\n\t\t\t}\n\n\t\t\treturn new AnimationClip( json.name, json.duration, tracks );\n\n\t\t},\n\n\t\ttoJSON: function ( clip ) {\n\n\t\t\tvar tracks = [],\n\t\t\t\tclipTracks = clip.tracks;\n\n\t\t\tvar json = {\n\n\t\t\t\t'name': clip.name,\n\t\t\t\t'duration': clip.duration,\n\t\t\t\t'tracks': tracks\n\n\t\t\t};\n\n\t\t\tfor ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {\n\n\t\t\t\ttracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );\n\n\t\t\t}\n\n\t\t\treturn json;\n\n\t\t},\n\n\t\tCreateFromMorphTargetSequence: function ( name, morphTargetSequence, fps, noLoop ) {\n\n\t\t\tvar numMorphTargets = morphTargetSequence.length;\n\t\t\tvar tracks = [];\n\n\t\t\tfor ( var i = 0; i < numMorphTargets; i ++ ) {\n\n\t\t\t\tvar times = [];\n\t\t\t\tvar values = [];\n\n\t\t\t\ttimes.push(\n\t\t\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\n\t\t\t\t\t\ti,\n\t\t\t\t\t\t( i + 1 ) % numMorphTargets );\n\n\t\t\t\tvalues.push( 0, 1, 0 );\n\n\t\t\t\tvar order = AnimationUtils.getKeyframeOrder( times );\n\t\t\t\ttimes = AnimationUtils.sortedArray( times, 1, order );\n\t\t\t\tvalues = AnimationUtils.sortedArray( values, 1, order );\n\n\t\t\t\t// if there is a key at the first frame, duplicate it as the\n\t\t\t\t// last frame as well for perfect loop.\n\t\t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\n\n\t\t\t\t\ttimes.push( numMorphTargets );\n\t\t\t\t\tvalues.push( values[ 0 ] );\n\n\t\t\t\t}\n\n\t\t\t\ttracks.push(\n\t\t\t\t\t\tnew NumberKeyframeTrack(\n\t\t\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\n\t\t\t\t\t\t\ttimes, values\n\t\t\t\t\t\t).scale( 1.0 / fps ) );\n\n\t\t\t}\n\n\t\t\treturn new AnimationClip( name, - 1, tracks );\n\n\t\t},\n\n\t\tfindByName: function ( objectOrClipArray, name ) {\n\n\t\t\tvar clipArray = objectOrClipArray;\n\n\t\t\tif ( ! Array.isArray( objectOrClipArray ) ) {\n\n\t\t\t\tvar o = objectOrClipArray;\n\t\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < clipArray.length; i ++ ) {\n\n\t\t\t\tif ( clipArray[ i ].name === name ) {\n\n\t\t\t\t\treturn clipArray[ i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\tCreateClipsFromMorphTargetSequences: function ( morphTargets, fps, noLoop ) {\n\n\t\t\tvar animationToMorphTargets = {};\n\n\t\t\t// tested with https://regex101.com/ on trick sequences\n\t\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\t\t\tvar pattern = /^([\\w-]*?)([\\d]+)$/;\n\n\t\t\t// sort morph target names into animation groups based\n\t\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\t\t\tfor ( var i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\t\tvar morphTarget = morphTargets[ i ];\n\t\t\t\tvar parts = morphTarget.name.match( pattern );\n\n\t\t\t\tif ( parts && parts.length > 1 ) {\n\n\t\t\t\t\tvar name = parts[ 1 ];\n\n\t\t\t\t\tvar animationMorphTargets = animationToMorphTargets[ name ];\n\t\t\t\t\tif ( ! animationMorphTargets ) {\n\n\t\t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tanimationMorphTargets.push( morphTarget );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar clips = [];\n\n\t\t\tfor ( var name in animationToMorphTargets ) {\n\n\t\t\t\tclips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\n\n\t\t\t}\n\n\t\t\treturn clips;\n\n\t\t},\n\n\t\t// parse the animation.hierarchy format\n\t\tparseAnimation: function ( animation, bones ) {\n\n\t\t\tif ( ! animation ) {\n\n\t\t\t\tconsole.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {\n\n\t\t\t\t// only return track if there are actually keys.\n\t\t\t\tif ( animationKeys.length !== 0 ) {\n\n\t\t\t\t\tvar times = [];\n\t\t\t\t\tvar values = [];\n\n\t\t\t\t\tAnimationUtils.flattenJSON( animationKeys, times, values, propertyName );\n\n\t\t\t\t\t// empty keys are filtered out, so check again\n\t\t\t\t\tif ( times.length !== 0 ) {\n\n\t\t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t\tvar tracks = [];\n\n\t\t\tvar clipName = animation.name || 'default';\n\t\t\t// automatic length determination in AnimationClip.\n\t\t\tvar duration = animation.length || - 1;\n\t\t\tvar fps = animation.fps || 30;\n\n\t\t\tvar hierarchyTracks = animation.hierarchy || [];\n\n\t\t\tfor ( var h = 0; h < hierarchyTracks.length; h ++ ) {\n\n\t\t\t\tvar animationKeys = hierarchyTracks[ h ].keys;\n\n\t\t\t\t// skip empty tracks\n\t\t\t\tif ( ! animationKeys || animationKeys.length === 0 ) continue;\n\n\t\t\t\t// process morph targets\n\t\t\t\tif ( animationKeys[ 0 ].morphTargets ) {\n\n\t\t\t\t\t// figure out all morph targets used in this track\n\t\t\t\t\tvar morphTargetNames = {};\n\n\t\t\t\t\tfor ( var k = 0; k < animationKeys.length; k ++ ) {\n\n\t\t\t\t\t\tif ( animationKeys[ k ].morphTargets ) {\n\n\t\t\t\t\t\t\tfor ( var m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {\n\n\t\t\t\t\t\t\t\tmorphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// create a track for each morph target with all zero\n\t\t\t\t\t// morphTargetInfluences except for the keys in which\n\t\t\t\t\t// the morphTarget is named.\n\t\t\t\t\tfor ( var morphTargetName in morphTargetNames ) {\n\n\t\t\t\t\t\tvar times = [];\n\t\t\t\t\t\tvar values = [];\n\n\t\t\t\t\t\tfor ( var m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {\n\n\t\t\t\t\t\t\tvar animationKey = animationKeys[ k ];\n\n\t\t\t\t\t\t\ttimes.push( animationKey.time );\n\t\t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tduration = morphTargetNames.length * ( fps || 1.0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// ...assume skeletal animation\n\n\t\t\t\t\tvar boneName = '.bones[' + bones[ h ].name + ']';\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\t\tVectorKeyframeTrack, boneName + '.position',\n\t\t\t\t\t\t\tanimationKeys, 'pos', tracks );\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\t\tQuaternionKeyframeTrack, boneName + '.quaternion',\n\t\t\t\t\t\t\tanimationKeys, 'rot', tracks );\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\t\tVectorKeyframeTrack, boneName + '.scale',\n\t\t\t\t\t\t\tanimationKeys, 'scl', tracks );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( tracks.length === 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar clip = new AnimationClip( clipName, duration, tracks );\n\n\t\t\treturn clip;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( AnimationClip.prototype, {\n\n\t\tresetDuration: function () {\n\n\t\t\tvar tracks = this.tracks, duration = 0;\n\n\t\t\tfor ( var i = 0, n = tracks.length; i !== n; ++ i ) {\n\n\t\t\t\tvar track = this.tracks[ i ];\n\n\t\t\t\tduration = Math.max( duration, track.times[ track.times.length - 1 ] );\n\n\t\t\t}\n\n\t\t\tthis.duration = duration;\n\n\t\t},\n\n\t\ttrim: function () {\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\tthis.tracks[ i ].trim( 0, this.duration );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\toptimize: function () {\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\tthis.tracks[ i ].optimize();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction MaterialLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\t\tthis.textures = {};\n\n\t}\n\n\tObject.assign( MaterialLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tsetTextures: function ( value ) {\n\n\t\t\tthis.textures = value;\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar textures = this.textures;\n\n\t\t\tfunction getTexture( name ) {\n\n\t\t\t\tif ( textures[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn textures[ name ];\n\n\t\t\t}\n\n\t\t\tvar material = new Materials[ json.type ]();\n\n\t\t\tif ( json.uuid !== undefined ) material.uuid = json.uuid;\n\t\t\tif ( json.name !== undefined ) material.name = json.name;\n\t\t\tif ( json.color !== undefined ) material.color.setHex( json.color );\n\t\t\tif ( json.roughness !== undefined ) material.roughness = json.roughness;\n\t\t\tif ( json.metalness !== undefined ) material.metalness = json.metalness;\n\t\t\tif ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );\n\t\t\tif ( json.specular !== undefined ) material.specular.setHex( json.specular );\n\t\t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\n\t\t\tif ( json.clearCoat !== undefined ) material.clearCoat = json.clearCoat;\n\t\t\tif ( json.clearCoatRoughness !== undefined ) material.clearCoatRoughness = json.clearCoatRoughness;\n\t\t\tif ( json.uniforms !== undefined ) material.uniforms = json.uniforms;\n\t\t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\n\t\t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\n\t\t\tif ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;\n\t\t\tif ( json.fog !== undefined ) material.fog = json.fog;\n\t\t\tif ( json.shading !== undefined ) material.shading = json.shading;\n\t\t\tif ( json.blending !== undefined ) material.blending = json.blending;\n\t\t\tif ( json.side !== undefined ) material.side = json.side;\n\t\t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\n\t\t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\n\t\t\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\n\t\t\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\n\t\t\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\n\t\t\tif ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;\n\t\t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\n\t\t\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\n\t\t\tif ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;\n\t\t\tif ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;\n\t\t\tif ( json.skinning !== undefined ) material.skinning = json.skinning;\n\t\t\tif ( json.morphTargets !== undefined ) material.morphTargets = json.morphTargets;\n\n\t\t\t// for PointsMaterial\n\n\t\t\tif ( json.size !== undefined ) material.size = json.size;\n\t\t\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\n\n\t\t\t// maps\n\n\t\t\tif ( json.map !== undefined ) material.map = getTexture( json.map );\n\n\t\t\tif ( json.alphaMap !== undefined ) {\n\n\t\t\t\tmaterial.alphaMap = getTexture( json.alphaMap );\n\t\t\t\tmaterial.transparent = true;\n\n\t\t\t}\n\n\t\t\tif ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );\n\t\t\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\n\n\t\t\tif ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );\n\t\t\tif ( json.normalScale !== undefined ) {\n\n\t\t\t\tvar normalScale = json.normalScale;\n\n\t\t\t\tif ( Array.isArray( normalScale ) === false ) {\n\n\t\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\n\t\t\t\t\tnormalScale = [ normalScale, normalScale ];\n\n\t\t\t\t}\n\n\t\t\t\tmaterial.normalScale = new Vector2().fromArray( normalScale );\n\n\t\t\t}\n\n\t\t\tif ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );\n\t\t\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\n\t\t\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\n\n\t\t\tif ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );\n\t\t\tif ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );\n\n\t\t\tif ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );\n\t\t\tif ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;\n\n\t\t\tif ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );\n\n\t\t\tif ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );\n\n\t\t\tif ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;\n\n\t\t\tif ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );\n\t\t\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\n\n\t\t\tif ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );\n\t\t\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\n\n\t\t\tif ( json.gradientMap !== undefined ) material.gradientMap = getTexture( json.gradientMap );\n\n\t\t\treturn material;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction BufferGeometryLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t}\n\n\tObject.assign( BufferGeometryLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar geometry = new BufferGeometry();\n\n\t\t\tvar index = json.data.index;\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tvar typedArray = new TYPED_ARRAYS[ index.type ]( index.array );\n\t\t\t\tgeometry.setIndex( new BufferAttribute( typedArray, 1 ) );\n\n\t\t\t}\n\n\t\t\tvar attributes = json.data.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ key ];\n\t\t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\n\n\t\t\t\tgeometry.addAttribute( key, new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized ) );\n\n\t\t\t}\n\n\t\t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n\t\t\tif ( groups !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, n = groups.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar group = groups[ i ];\n\n\t\t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar boundingSphere = json.data.boundingSphere;\n\n\t\t\tif ( boundingSphere !== undefined ) {\n\n\t\t\t\tvar center = new Vector3();\n\n\t\t\t\tif ( boundingSphere.center !== undefined ) {\n\n\t\t\t\t\tcenter.fromArray( boundingSphere.center );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.boundingSphere = new Sphere( center, boundingSphere.radius );\n\n\t\t\t}\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t} );\n\n\tvar TYPED_ARRAYS = {\n\t\tInt8Array: Int8Array,\n\t\tUint8Array: Uint8Array,\n\t\t// Workaround for IE11 pre KB2929437. See #11440\n\t\tUint8ClampedArray: typeof Uint8ClampedArray !== 'undefined' ? Uint8ClampedArray : Uint8Array,\n\t\tInt16Array: Int16Array,\n\t\tUint16Array: Uint16Array,\n\t\tInt32Array: Int32Array,\n\t\tUint32Array: Uint32Array,\n\t\tFloat32Array: Float32Array,\n\t\tFloat64Array: Float64Array\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Loader() {\n\n\t\tthis.onLoadStart = function () {};\n\t\tthis.onLoadProgress = function () {};\n\t\tthis.onLoadComplete = function () {};\n\n\t}\n\n\tLoader.Handlers = {\n\n\t\thandlers: [],\n\n\t\tadd: function ( regex, loader ) {\n\n\t\t\tthis.handlers.push( regex, loader );\n\n\t\t},\n\n\t\tget: function ( file ) {\n\n\t\t\tvar handlers = this.handlers;\n\n\t\t\tfor ( var i = 0, l = handlers.length; i < l; i += 2 ) {\n\n\t\t\t\tvar regex = handlers[ i ];\n\t\t\t\tvar loader = handlers[ i + 1 ];\n\n\t\t\t\tif ( regex.test( file ) ) {\n\n\t\t\t\t\treturn loader;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t}\n\n\t};\n\n\tObject.assign( Loader.prototype, {\n\n\t\tcrossOrigin: undefined,\n\n\t\textractUrlBase: function ( url ) {\n\n\t\t\tvar parts = url.split( '/' );\n\n\t\t\tif ( parts.length === 1 ) return './';\n\n\t\t\tparts.pop();\n\n\t\t\treturn parts.join( '/' ) + '/';\n\n\t\t},\n\n\t\tinitMaterials: function ( materials, texturePath, crossOrigin ) {\n\n\t\t\tvar array = [];\n\n\t\t\tfor ( var i = 0; i < materials.length; ++ i ) {\n\n\t\t\t\tarray[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );\n\n\t\t\t}\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tcreateMaterial: ( function () {\n\n\t\t\tvar BlendingMode = {\n\t\t\t\tNoBlending: NoBlending,\n\t\t\t\tNormalBlending: NormalBlending,\n\t\t\t\tAdditiveBlending: AdditiveBlending,\n\t\t\t\tSubtractiveBlending: SubtractiveBlending,\n\t\t\t\tMultiplyBlending: MultiplyBlending,\n\t\t\t\tCustomBlending: CustomBlending\n\t\t\t};\n\n\t\t\tvar color = new Color();\n\t\t\tvar textureLoader = new TextureLoader();\n\t\t\tvar materialLoader = new MaterialLoader();\n\n\t\t\treturn function createMaterial( m, texturePath, crossOrigin ) {\n\n\t\t\t\t// convert from old material format\n\n\t\t\t\tvar textures = {};\n\n\t\t\t\tfunction loadTexture( path, repeat, offset, wrap, anisotropy ) {\n\n\t\t\t\t\tvar fullPath = texturePath + path;\n\t\t\t\t\tvar loader = Loader.Handlers.get( fullPath );\n\n\t\t\t\t\tvar texture;\n\n\t\t\t\t\tif ( loader !== null ) {\n\n\t\t\t\t\t\ttexture = loader.load( fullPath );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttextureLoader.setCrossOrigin( crossOrigin );\n\t\t\t\t\t\ttexture = textureLoader.load( fullPath );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( repeat !== undefined ) {\n\n\t\t\t\t\t\ttexture.repeat.fromArray( repeat );\n\n\t\t\t\t\t\tif ( repeat[ 0 ] !== 1 ) texture.wrapS = RepeatWrapping;\n\t\t\t\t\t\tif ( repeat[ 1 ] !== 1 ) texture.wrapT = RepeatWrapping;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\t\t\ttexture.offset.fromArray( offset );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( wrap !== undefined ) {\n\n\t\t\t\t\t\tif ( wrap[ 0 ] === 'repeat' ) texture.wrapS = RepeatWrapping;\n\t\t\t\t\t\tif ( wrap[ 0 ] === 'mirror' ) texture.wrapS = MirroredRepeatWrapping;\n\n\t\t\t\t\t\tif ( wrap[ 1 ] === 'repeat' ) texture.wrapT = RepeatWrapping;\n\t\t\t\t\t\tif ( wrap[ 1 ] === 'mirror' ) texture.wrapT = MirroredRepeatWrapping;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( anisotropy !== undefined ) {\n\n\t\t\t\t\t\ttexture.anisotropy = anisotropy;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar uuid = _Math.generateUUID();\n\n\t\t\t\t\ttextures[ uuid ] = texture;\n\n\t\t\t\t\treturn uuid;\n\n\t\t\t\t}\n\n\t\t\t\t//\n\n\t\t\t\tvar json = {\n\t\t\t\t\tuuid: _Math.generateUUID(),\n\t\t\t\t\ttype: 'MeshLambertMaterial'\n\t\t\t\t};\n\n\t\t\t\tfor ( var name in m ) {\n\n\t\t\t\t\tvar value = m[ name ];\n\n\t\t\t\t\tswitch ( name ) {\n\n\t\t\t\t\t\tcase 'DbgColor':\n\t\t\t\t\t\tcase 'DbgIndex':\n\t\t\t\t\t\tcase 'opticalDensity':\n\t\t\t\t\t\tcase 'illumination':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'DbgName':\n\t\t\t\t\t\t\tjson.name = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'blending':\n\t\t\t\t\t\t\tjson.blending = BlendingMode[ value ];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'colorAmbient':\n\t\t\t\t\t\tcase 'mapAmbient':\n\t\t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'colorDiffuse':\n\t\t\t\t\t\t\tjson.color = color.fromArray( value ).getHex();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'colorSpecular':\n\t\t\t\t\t\t\tjson.specular = color.fromArray( value ).getHex();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'colorEmissive':\n\t\t\t\t\t\t\tjson.emissive = color.fromArray( value ).getHex();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'specularCoef':\n\t\t\t\t\t\t\tjson.shininess = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'shading':\n\t\t\t\t\t\t\tif ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';\n\t\t\t\t\t\t\tif ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';\n\t\t\t\t\t\t\tif ( value.toLowerCase() === 'standard' ) json.type = 'MeshStandardMaterial';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapDiffuse':\n\t\t\t\t\t\t\tjson.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapDiffuseRepeat':\n\t\t\t\t\t\tcase 'mapDiffuseOffset':\n\t\t\t\t\t\tcase 'mapDiffuseWrap':\n\t\t\t\t\t\tcase 'mapDiffuseAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapEmissive':\n\t\t\t\t\t\t\tjson.emissiveMap = loadTexture( value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapEmissiveRepeat':\n\t\t\t\t\t\tcase 'mapEmissiveOffset':\n\t\t\t\t\t\tcase 'mapEmissiveWrap':\n\t\t\t\t\t\tcase 'mapEmissiveAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapLight':\n\t\t\t\t\t\t\tjson.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapLightRepeat':\n\t\t\t\t\t\tcase 'mapLightOffset':\n\t\t\t\t\t\tcase 'mapLightWrap':\n\t\t\t\t\t\tcase 'mapLightAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapAO':\n\t\t\t\t\t\t\tjson.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapAORepeat':\n\t\t\t\t\t\tcase 'mapAOOffset':\n\t\t\t\t\t\tcase 'mapAOWrap':\n\t\t\t\t\t\tcase 'mapAOAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapBump':\n\t\t\t\t\t\t\tjson.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapBumpScale':\n\t\t\t\t\t\t\tjson.bumpScale = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapBumpRepeat':\n\t\t\t\t\t\tcase 'mapBumpOffset':\n\t\t\t\t\t\tcase 'mapBumpWrap':\n\t\t\t\t\t\tcase 'mapBumpAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapNormal':\n\t\t\t\t\t\t\tjson.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapNormalFactor':\n\t\t\t\t\t\t\tjson.normalScale = [ value, value ];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapNormalRepeat':\n\t\t\t\t\t\tcase 'mapNormalOffset':\n\t\t\t\t\t\tcase 'mapNormalWrap':\n\t\t\t\t\t\tcase 'mapNormalAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapSpecular':\n\t\t\t\t\t\t\tjson.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapSpecularRepeat':\n\t\t\t\t\t\tcase 'mapSpecularOffset':\n\t\t\t\t\t\tcase 'mapSpecularWrap':\n\t\t\t\t\t\tcase 'mapSpecularAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapMetalness':\n\t\t\t\t\t\t\tjson.metalnessMap = loadTexture( value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapMetalnessRepeat':\n\t\t\t\t\t\tcase 'mapMetalnessOffset':\n\t\t\t\t\t\tcase 'mapMetalnessWrap':\n\t\t\t\t\t\tcase 'mapMetalnessAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapRoughness':\n\t\t\t\t\t\t\tjson.roughnessMap = loadTexture( value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapRoughnessRepeat':\n\t\t\t\t\t\tcase 'mapRoughnessOffset':\n\t\t\t\t\t\tcase 'mapRoughnessWrap':\n\t\t\t\t\t\tcase 'mapRoughnessAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapAlpha':\n\t\t\t\t\t\t\tjson.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapAlphaRepeat':\n\t\t\t\t\t\tcase 'mapAlphaOffset':\n\t\t\t\t\t\tcase 'mapAlphaWrap':\n\t\t\t\t\t\tcase 'mapAlphaAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'flipSided':\n\t\t\t\t\t\t\tjson.side = BackSide;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'doubleSided':\n\t\t\t\t\t\t\tjson.side = DoubleSide;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'transparency':\n\t\t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );\n\t\t\t\t\t\t\tjson.opacity = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'depthTest':\n\t\t\t\t\t\tcase 'depthWrite':\n\t\t\t\t\t\tcase 'colorWrite':\n\t\t\t\t\t\tcase 'opacity':\n\t\t\t\t\t\tcase 'reflectivity':\n\t\t\t\t\t\tcase 'transparent':\n\t\t\t\t\t\tcase 'visible':\n\t\t\t\t\t\tcase 'wireframe':\n\t\t\t\t\t\t\tjson[ name ] = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'vertexColors':\n\t\t\t\t\t\t\tif ( value === true ) json.vertexColors = VertexColors;\n\t\t\t\t\t\t\tif ( value === 'face' ) json.vertexColors = FaceColors;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.Loader.createMaterial: Unsupported', name, value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( json.type === 'MeshBasicMaterial' ) delete json.emissive;\n\t\t\t\tif ( json.type !== 'MeshPhongMaterial' ) delete json.specular;\n\n\t\t\t\tif ( json.opacity < 1 ) json.transparent = true;\n\n\t\t\t\tmaterialLoader.setTextures( textures );\n\n\t\t\t\treturn materialLoader.parse( json );\n\n\t\t\t};\n\n\t\t} )()\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction JSONLoader( manager ) {\n\n\t\tif ( typeof manager === 'boolean' ) {\n\n\t\t\tconsole.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );\n\t\t\tmanager = undefined;\n\n\t\t}\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t\tthis.withCredentials = false;\n\n\t}\n\n\tObject.assign( JSONLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar texturePath = this.texturePath && ( typeof this.texturePath === \"string\" ) ? this.texturePath : Loader.prototype.extractUrlBase( url );\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setWithCredentials( this.withCredentials );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tvar json = JSON.parse( text );\n\t\t\t\tvar metadata = json.metadata;\n\n\t\t\t\tif ( metadata !== undefined ) {\n\n\t\t\t\t\tvar type = metadata.type;\n\n\t\t\t\t\tif ( type !== undefined ) {\n\n\t\t\t\t\t\tif ( type.toLowerCase() === 'object' ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( type.toLowerCase() === 'scene' ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.' );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar object = scope.parse( json, texturePath );\n\t\t\t\tonLoad( object.geometry, object.materials );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tsetTexturePath: function ( value ) {\n\n\t\t\tthis.texturePath = value;\n\n\t\t},\n\n\t\tparse: ( function () {\n\n\t\t\tfunction parseModel( json, geometry ) {\n\n\t\t\t\tfunction isBitSet( value, position ) {\n\n\t\t\t\t\treturn value & ( 1 << position );\n\n\t\t\t\t}\n\n\t\t\t\tvar i, j, fi,\n\n\t\t\t\t\toffset, zLength,\n\n\t\t\t\t\tcolorIndex, normalIndex, uvIndex, materialIndex,\n\n\t\t\t\t\ttype,\n\t\t\t\t\tisQuad,\n\t\t\t\t\thasMaterial,\n\t\t\t\t\thasFaceVertexUv,\n\t\t\t\t\thasFaceNormal, hasFaceVertexNormal,\n\t\t\t\t\thasFaceColor, hasFaceVertexColor,\n\n\t\t\t\t\tvertex, face, faceA, faceB, hex, normal,\n\n\t\t\t\t\tuvLayer, uv, u, v,\n\n\t\t\t\t\tfaces = json.faces,\n\t\t\t\t\tvertices = json.vertices,\n\t\t\t\t\tnormals = json.normals,\n\t\t\t\t\tcolors = json.colors,\n\n\t\t\t\t\tscale = json.scale,\n\n\t\t\t\t\tnUvLayers = 0;\n\n\n\t\t\t\tif ( json.uvs !== undefined ) {\n\n\t\t\t\t\t// disregard empty arrays\n\n\t\t\t\t\tfor ( i = 0; i < json.uvs.length; i ++ ) {\n\n\t\t\t\t\t\tif ( json.uvs[ i ].length ) nUvLayers ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\t\tgeometry.faceVertexUvs[ i ] = [];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\toffset = 0;\n\t\t\t\tzLength = vertices.length;\n\n\t\t\t\twhile ( offset < zLength ) {\n\n\t\t\t\t\tvertex = new Vector3();\n\n\t\t\t\t\tvertex.x = vertices[ offset ++ ] * scale;\n\t\t\t\t\tvertex.y = vertices[ offset ++ ] * scale;\n\t\t\t\t\tvertex.z = vertices[ offset ++ ] * scale;\n\n\t\t\t\t\tgeometry.vertices.push( vertex );\n\n\t\t\t\t}\n\n\t\t\t\toffset = 0;\n\t\t\t\tzLength = faces.length;\n\n\t\t\t\twhile ( offset < zLength ) {\n\n\t\t\t\t\ttype = faces[ offset ++ ];\n\n\t\t\t\t\tisQuad = isBitSet( type, 0 );\n\t\t\t\t\thasMaterial = isBitSet( type, 1 );\n\t\t\t\t\thasFaceVertexUv = isBitSet( type, 3 );\n\t\t\t\t\thasFaceNormal = isBitSet( type, 4 );\n\t\t\t\t\thasFaceVertexNormal = isBitSet( type, 5 );\n\t\t\t\t\thasFaceColor = isBitSet( type, 6 );\n\t\t\t\t\thasFaceVertexColor = isBitSet( type, 7 );\n\n\t\t\t\t\t// console.log(\"type\", type, \"bits\", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);\n\n\t\t\t\t\tif ( isQuad ) {\n\n\t\t\t\t\t\tfaceA = new Face3();\n\t\t\t\t\t\tfaceA.a = faces[ offset ];\n\t\t\t\t\t\tfaceA.b = faces[ offset + 1 ];\n\t\t\t\t\t\tfaceA.c = faces[ offset + 3 ];\n\n\t\t\t\t\t\tfaceB = new Face3();\n\t\t\t\t\t\tfaceB.a = faces[ offset + 1 ];\n\t\t\t\t\t\tfaceB.b = faces[ offset + 2 ];\n\t\t\t\t\t\tfaceB.c = faces[ offset + 3 ];\n\n\t\t\t\t\t\toffset += 4;\n\n\t\t\t\t\t\tif ( hasMaterial ) {\n\n\t\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\tfaceA.materialIndex = materialIndex;\n\t\t\t\t\t\t\tfaceB.materialIndex = materialIndex;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// to get face <=> uv index correspondence\n\n\t\t\t\t\t\tfi = geometry.faces.length;\n\n\t\t\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi + 1 ] = [];\n\n\t\t\t\t\t\t\t\tfor ( j = 0; j < 4; j ++ ) {\n\n\t\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\n\t\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n\t\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\n\t\t\t\t\t\t\t\t\tuv = new Vector2( u, v );\n\n\t\t\t\t\t\t\t\t\tif ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );\n\t\t\t\t\t\t\t\t\tif ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\tfaceA.normal.set(\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tfaceB.normal.copy( faceA.normal );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\n\t\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\t\tnormal = new Vector3(\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t\t);\n\n\n\t\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexNormals.push( normal );\n\t\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexNormals.push( normal );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\thex = colors[ colorIndex ];\n\n\t\t\t\t\t\t\tfaceA.color.setHex( hex );\n\t\t\t\t\t\t\tfaceB.color.setHex( hex );\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\n\t\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\t\thex = colors[ colorIndex ];\n\n\t\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexColors.push( new Color( hex ) );\n\t\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexColors.push( new Color( hex ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeometry.faces.push( faceA );\n\t\t\t\t\t\tgeometry.faces.push( faceB );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tface = new Face3();\n\t\t\t\t\t\tface.a = faces[ offset ++ ];\n\t\t\t\t\t\tface.b = faces[ offset ++ ];\n\t\t\t\t\t\tface.c = faces[ offset ++ ];\n\n\t\t\t\t\t\tif ( hasMaterial ) {\n\n\t\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\tface.materialIndex = materialIndex;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// to get face <=> uv index correspondence\n\n\t\t\t\t\t\tfi = geometry.faces.length;\n\n\t\t\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\n\t\t\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\n\t\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n\t\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\n\t\t\t\t\t\t\t\t\tuv = new Vector2( u, v );\n\n\t\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ].push( uv );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\tface.normal.set(\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\t\tnormal = new Vector3(\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\tface.vertexNormals.push( normal );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\tface.color.setHex( colors[ colorIndex ] );\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\t\tface.vertexColors.push( new Color( colors[ colorIndex ] ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeometry.faces.push( face );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction parseSkin( json, geometry ) {\n\n\t\t\t\tvar influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;\n\n\t\t\t\tif ( json.skinWeights ) {\n\n\t\t\t\t\tfor ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {\n\n\t\t\t\t\t\tvar x = json.skinWeights[ i ];\n\t\t\t\t\t\tvar y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;\n\t\t\t\t\t\tvar z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;\n\t\t\t\t\t\tvar w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;\n\n\t\t\t\t\t\tgeometry.skinWeights.push( new Vector4( x, y, z, w ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( json.skinIndices ) {\n\n\t\t\t\t\tfor ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {\n\n\t\t\t\t\t\tvar a = json.skinIndices[ i ];\n\t\t\t\t\t\tvar b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;\n\t\t\t\t\t\tvar c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;\n\t\t\t\t\t\tvar d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;\n\n\t\t\t\t\t\tgeometry.skinIndices.push( new Vector4( a, b, c, d ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.bones = json.bones;\n\n\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {\n\n\t\t\t\t\tconsole.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +\n\t\t\t\t\t\tgeometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction parseMorphing( json, geometry ) {\n\n\t\t\t\tvar scale = json.scale;\n\n\t\t\t\tif ( json.morphTargets !== undefined ) {\n\n\t\t\t\t\tfor ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tgeometry.morphTargets[ i ] = {};\n\t\t\t\t\t\tgeometry.morphTargets[ i ].name = json.morphTargets[ i ].name;\n\t\t\t\t\t\tgeometry.morphTargets[ i ].vertices = [];\n\n\t\t\t\t\t\tvar dstVertices = geometry.morphTargets[ i ].vertices;\n\t\t\t\t\t\tvar srcVertices = json.morphTargets[ i ].vertices;\n\n\t\t\t\t\t\tfor ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {\n\n\t\t\t\t\t\t\tvar vertex = new Vector3();\n\t\t\t\t\t\t\tvertex.x = srcVertices[ v ] * scale;\n\t\t\t\t\t\t\tvertex.y = srcVertices[ v + 1 ] * scale;\n\t\t\t\t\t\t\tvertex.z = srcVertices[ v + 2 ] * scale;\n\n\t\t\t\t\t\t\tdstVertices.push( vertex );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( json.morphColors !== undefined && json.morphColors.length > 0 ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.JSONLoader: \"morphColors\" no longer supported. Using them as face colors.' );\n\n\t\t\t\t\tvar faces = geometry.faces;\n\t\t\t\t\tvar morphColors = json.morphColors[ 0 ].colors;\n\n\t\t\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tfaces[ i ].color.fromArray( morphColors, i * 3 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction parseAnimations( json, geometry ) {\n\n\t\t\t\tvar outputAnimations = [];\n\n\t\t\t\t// parse old style Bone/Hierarchy animations\n\t\t\t\tvar animations = [];\n\n\t\t\t\tif ( json.animation !== undefined ) {\n\n\t\t\t\t\tanimations.push( json.animation );\n\n\t\t\t\t}\n\n\t\t\t\tif ( json.animations !== undefined ) {\n\n\t\t\t\t\tif ( json.animations.length ) {\n\n\t\t\t\t\t\tanimations = animations.concat( json.animations );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tanimations.push( json.animations );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i = 0; i < animations.length; i ++ ) {\n\n\t\t\t\t\tvar clip = AnimationClip.parseAnimation( animations[ i ], geometry.bones );\n\t\t\t\t\tif ( clip ) outputAnimations.push( clip );\n\n\t\t\t\t}\n\n\t\t\t\t// parse implicit morph animations\n\t\t\t\tif ( geometry.morphTargets ) {\n\n\t\t\t\t\t// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.\n\t\t\t\t\tvar morphAnimationClips = AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );\n\t\t\t\t\toutputAnimations = outputAnimations.concat( morphAnimationClips );\n\n\t\t\t\t}\n\n\t\t\t\tif ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;\n\n\t\t\t}\n\n\t\t\treturn function ( json, texturePath ) {\n\n\t\t\t\tif ( json.data !== undefined ) {\n\n\t\t\t\t\t// Geometry 4.0 spec\n\t\t\t\t\tjson = json.data;\n\n\t\t\t\t}\n\n\t\t\t\tif ( json.scale !== undefined ) {\n\n\t\t\t\t\tjson.scale = 1.0 / json.scale;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tjson.scale = 1.0;\n\n\t\t\t\t}\n\n\t\t\t\tvar geometry = new Geometry();\n\n\t\t\t\tparseModel( json, geometry );\n\t\t\t\tparseSkin( json, geometry );\n\t\t\t\tparseMorphing( json, geometry );\n\t\t\t\tparseAnimations( json, geometry );\n\n\t\t\t\tgeometry.computeFaceNormals();\n\t\t\t\tgeometry.computeBoundingSphere();\n\n\t\t\t\tif ( json.materials === undefined || json.materials.length === 0 ) {\n\n\t\t\t\t\treturn { geometry: geometry };\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar materials = Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );\n\n\t\t\t\t\treturn { geometry: geometry, materials: materials };\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t} )()\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction ObjectLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\t\tthis.texturePath = '';\n\n\t}\n\n\tObject.assign( ObjectLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( this.texturePath === '' ) {\n\n\t\t\t\tthis.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );\n\n\t\t\t}\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tvar json = null;\n\n\t\t\t\ttry {\n\n\t\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\tif ( onError !== undefined ) onError( error );\n\n\t\t\t\t\tconsole.error( 'THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message );\n\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tvar metadata = json.metadata;\n\n\t\t\t\tif ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {\n\n\t\t\t\t\tconsole.error( 'THREE.ObjectLoader: Can\\'t load ' + url + '. Use THREE.JSONLoader instead.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tscope.parse( json, onLoad );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tsetTexturePath: function ( value ) {\n\n\t\t\tthis.texturePath = value;\n\n\t\t},\n\n\t\tsetCrossOrigin: function ( value ) {\n\n\t\t\tthis.crossOrigin = value;\n\n\t\t},\n\n\t\tparse: function ( json, onLoad ) {\n\n\t\t\tvar geometries = this.parseGeometries( json.geometries );\n\n\t\t\tvar images = this.parseImages( json.images, function () {\n\n\t\t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n\t\t\t} );\n\n\t\t\tvar textures = this.parseTextures( json.textures, images );\n\t\t\tvar materials = this.parseMaterials( json.materials, textures );\n\n\t\t\tvar object = this.parseObject( json.object, geometries, materials );\n\n\t\t\tif ( json.animations ) {\n\n\t\t\t\tobject.animations = this.parseAnimations( json.animations );\n\n\t\t\t}\n\n\t\t\tif ( json.images === undefined || json.images.length === 0 ) {\n\n\t\t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n\t\t\t}\n\n\t\t\treturn object;\n\n\t\t},\n\n\t\tparseGeometries: function ( json ) {\n\n\t\t\tvar geometries = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tvar geometryLoader = new JSONLoader();\n\t\t\t\tvar bufferGeometryLoader = new BufferGeometryLoader();\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar geometry;\n\t\t\t\t\tvar data = json[ i ];\n\n\t\t\t\t\tswitch ( data.type ) {\n\n\t\t\t\t\t\tcase 'PlaneGeometry':\n\t\t\t\t\t\tcase 'PlaneBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BoxGeometry':\n\t\t\t\t\t\tcase 'BoxBufferGeometry':\n\t\t\t\t\t\tcase 'CubeGeometry': // backwards compatible\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.depth,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.depthSegments\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CircleGeometry':\n\t\t\t\t\t\tcase 'CircleBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CylinderGeometry':\n\t\t\t\t\t\tcase 'CylinderBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radiusTop,\n\t\t\t\t\t\t\t\tdata.radiusBottom,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ConeGeometry':\n\t\t\t\t\t\tcase 'ConeBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'SphereGeometry':\n\t\t\t\t\t\tcase 'SphereBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\t\tdata.phiLength,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'DodecahedronGeometry':\n\t\t\t\t\t\tcase 'IcosahedronGeometry':\n\t\t\t\t\t\tcase 'OctahedronGeometry':\n\t\t\t\t\t\tcase 'TetrahedronGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.detail\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'RingGeometry':\n\t\t\t\t\t\tcase 'RingBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.innerRadius,\n\t\t\t\t\t\t\t\tdata.outerRadius,\n\t\t\t\t\t\t\t\tdata.thetaSegments,\n\t\t\t\t\t\t\t\tdata.phiSegments,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusGeometry':\n\t\t\t\t\t\tcase 'TorusBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\t\tdata.arc\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusKnotGeometry':\n\t\t\t\t\t\tcase 'TorusKnotBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.p,\n\t\t\t\t\t\t\t\tdata.q\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'LatheGeometry':\n\t\t\t\t\t\tcase 'LatheBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.points,\n\t\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\t\tdata.phiLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'Geometry':\n\n\t\t\t\t\t\t\tgeometry = geometryLoader.parse( data, this.texturePath ).geometry;\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"' );\n\n\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.uuid = data.uuid;\n\n\t\t\t\t\tif ( data.name !== undefined ) geometry.name = data.name;\n\n\t\t\t\t\tgeometries[ data.uuid ] = geometry;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn geometries;\n\n\t\t},\n\n\t\tparseMaterials: function ( json, textures ) {\n\n\t\t\tvar materials = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tvar loader = new MaterialLoader();\n\t\t\t\tloader.setTextures( textures );\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar data = json[ i ];\n\n\t\t\t\t\tif ( data.type === 'MultiMaterial' ) {\n\n\t\t\t\t\t\t// Deprecated\n\n\t\t\t\t\t\tvar array = [];\n\n\t\t\t\t\t\tfor ( var j = 0; j < data.materials.length; j ++ ) {\n\n\t\t\t\t\t\t\tarray.push( loader.parse( data.materials[ j ] ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[ data.uuid ] = array;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tmaterials[ data.uuid ] = loader.parse( data );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn materials;\n\n\t\t},\n\n\t\tparseAnimations: function ( json ) {\n\n\t\t\tvar animations = [];\n\n\t\t\tfor ( var i = 0; i < json.length; i ++ ) {\n\n\t\t\t\tvar clip = AnimationClip.parse( json[ i ] );\n\n\t\t\t\tanimations.push( clip );\n\n\t\t\t}\n\n\t\t\treturn animations;\n\n\t\t},\n\n\t\tparseImages: function ( json, onLoad ) {\n\n\t\t\tvar scope = this;\n\t\t\tvar images = {};\n\n\t\t\tfunction loadImage( url ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\treturn loader.load( url, function () {\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, undefined, function () {\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\t\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tif ( json !== undefined && json.length > 0 ) {\n\n\t\t\t\tvar manager = new LoadingManager( onLoad );\n\n\t\t\t\tvar loader = new ImageLoader( manager );\n\t\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar image = json[ i ];\n\t\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;\n\n\t\t\t\t\timages[ image.uuid ] = loadImage( path );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn images;\n\n\t\t},\n\n\t\tparseTextures: function ( json, images ) {\n\n\t\t\tfunction parseConstant( value, type ) {\n\n\t\t\t\tif ( typeof( value ) === 'number' ) return value;\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\n\n\t\t\t\treturn type[ value ];\n\n\t\t\t}\n\n\t\t\tvar textures = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar data = json[ i ];\n\n\t\t\t\t\tif ( data.image === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( images[ data.image ] === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar texture = new Texture( images[ data.image ] );\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\ttexture.uuid = data.uuid;\n\n\t\t\t\t\tif ( data.name !== undefined ) texture.name = data.name;\n\n\t\t\t\t\tif ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING );\n\n\t\t\t\t\tif ( data.offset !== undefined ) texture.offset.fromArray( data.offset );\n\t\t\t\t\tif ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );\n\t\t\t\t\tif ( data.wrap !== undefined ) {\n\n\t\t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );\n\t\t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER );\n\t\t\t\t\tif ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER );\n\t\t\t\t\tif ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;\n\n\t\t\t\t\tif ( data.flipY !== undefined ) texture.flipY = data.flipY;\n\n\t\t\t\t\ttextures[ data.uuid ] = texture;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn textures;\n\n\t\t},\n\n\t\tparseObject: function () {\n\n\t\t\tvar matrix = new Matrix4();\n\n\t\t\treturn function parseObject( data, geometries, materials ) {\n\n\t\t\t\tvar object;\n\n\t\t\t\tfunction getGeometry( name ) {\n\n\t\t\t\t\tif ( geometries[ name ] === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn geometries[ name ];\n\n\t\t\t\t}\n\n\t\t\t\tfunction getMaterial( name ) {\n\n\t\t\t\t\tif ( name === undefined ) return undefined;\n\n\t\t\t\t\tif ( Array.isArray( name ) ) {\n\n\t\t\t\t\t\tvar array = [];\n\n\t\t\t\t\t\tfor ( var i = 0, l = name.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tvar uuid = name[ i ];\n\n\t\t\t\t\t\t\tif ( materials[ uuid ] === undefined ) {\n\n\t\t\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', uuid );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tarray.push( materials[ uuid ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn array;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( materials[ name ] === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn materials[ name ];\n\n\t\t\t\t}\n\n\t\t\t\tswitch ( data.type ) {\n\n\t\t\t\t\tcase 'Scene':\n\n\t\t\t\t\t\tobject = new Scene();\n\n\t\t\t\t\t\tif ( data.background !== undefined ) {\n\n\t\t\t\t\t\t\tif ( Number.isInteger( data.background ) ) {\n\n\t\t\t\t\t\t\t\tobject.background = new Color( data.background );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( data.fog !== undefined ) {\n\n\t\t\t\t\t\t\tif ( data.fog.type === 'Fog' ) {\n\n\t\t\t\t\t\t\t\tobject.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );\n\n\t\t\t\t\t\t\t} else if ( data.fog.type === 'FogExp2' ) {\n\n\t\t\t\t\t\t\t\tobject.fog = new FogExp2( data.fog.color, data.fog.density );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PerspectiveCamera':\n\n\t\t\t\t\t\tobject = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\n\n\t\t\t\t\t\tif ( data.focus !== undefined ) object.focus = data.focus;\n\t\t\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n\t\t\t\t\t\tif ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;\n\t\t\t\t\t\tif ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;\n\t\t\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'OrthographicCamera':\n\n\t\t\t\t\t\tobject = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'AmbientLight':\n\n\t\t\t\t\t\tobject = new AmbientLight( data.color, data.intensity );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'DirectionalLight':\n\n\t\t\t\t\t\tobject = new DirectionalLight( data.color, data.intensity );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\n\t\t\t\t\t\tobject = new PointLight( data.color, data.intensity, data.distance, data.decay );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'RectAreaLight':\n\n\t\t\t\t\t\tobject = new RectAreaLight( data.color, data.intensity, data.width, data.height );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\n\t\t\t\t\t\tobject = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'HemisphereLight':\n\n\t\t\t\t\t\tobject = new HemisphereLight( data.color, data.groundColor, data.intensity );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SkinnedMesh':\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.' );\n\n\t\t\t\t\tcase 'Mesh':\n\n\t\t\t\t\t\tvar geometry = getGeometry( data.geometry );\n\t\t\t\t\t\tvar material = getMaterial( data.material );\n\n\t\t\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 ) {\n\n\t\t\t\t\t\t\tobject = new SkinnedMesh( geometry, material );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tobject = new Mesh( geometry, material );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'LOD':\n\n\t\t\t\t\t\tobject = new LOD();\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Line':\n\n\t\t\t\t\t\tobject = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'LineLoop':\n\n\t\t\t\t\t\tobject = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'LineSegments':\n\n\t\t\t\t\t\tobject = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointCloud':\n\t\t\t\t\tcase 'Points':\n\n\t\t\t\t\t\tobject = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Sprite':\n\n\t\t\t\t\t\tobject = new Sprite( getMaterial( data.material ) );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Group':\n\n\t\t\t\t\t\tobject = new Group();\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tobject = new Object3D();\n\n\t\t\t\t}\n\n\t\t\t\tobject.uuid = data.uuid;\n\n\t\t\t\tif ( data.name !== undefined ) object.name = data.name;\n\t\t\t\tif ( data.matrix !== undefined ) {\n\n\t\t\t\t\tmatrix.fromArray( data.matrix );\n\t\t\t\t\tmatrix.decompose( object.position, object.quaternion, object.scale );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( data.position !== undefined ) object.position.fromArray( data.position );\n\t\t\t\t\tif ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );\n\t\t\t\t\tif ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );\n\t\t\t\t\tif ( data.scale !== undefined ) object.scale.fromArray( data.scale );\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.castShadow !== undefined ) object.castShadow = data.castShadow;\n\t\t\t\tif ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;\n\n\t\t\t\tif ( data.shadow ) {\n\n\t\t\t\t\tif ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;\n\t\t\t\t\tif ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;\n\t\t\t\t\tif ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );\n\t\t\t\t\tif ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.visible !== undefined ) object.visible = data.visible;\n\t\t\t\tif ( data.userData !== undefined ) object.userData = data.userData;\n\n\t\t\t\tif ( data.children !== undefined ) {\n\n\t\t\t\t\tfor ( var child in data.children ) {\n\n\t\t\t\t\t\tobject.add( this.parseObject( data.children[ child ], geometries, materials ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.type === 'LOD' ) {\n\n\t\t\t\t\tvar levels = data.levels;\n\n\t\t\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\t\t\tvar level = levels[ l ];\n\t\t\t\t\t\tvar child = object.getObjectByProperty( 'uuid', level.object );\n\n\t\t\t\t\t\tif ( child !== undefined ) {\n\n\t\t\t\t\t\t\tobject.addLevel( child, level.distance );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn object;\n\n\t\t\t};\n\n\t\t}()\n\n\t} );\n\n\tvar TEXTURE_MAPPING = {\n\t\tUVMapping: UVMapping,\n\t\tCubeReflectionMapping: CubeReflectionMapping,\n\t\tCubeRefractionMapping: CubeRefractionMapping,\n\t\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\n\t\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\n\t\tSphericalReflectionMapping: SphericalReflectionMapping,\n\t\tCubeUVReflectionMapping: CubeUVReflectionMapping,\n\t\tCubeUVRefractionMapping: CubeUVRefractionMapping\n\t};\n\n\tvar TEXTURE_WRAPPING = {\n\t\tRepeatWrapping: RepeatWrapping,\n\t\tClampToEdgeWrapping: ClampToEdgeWrapping,\n\t\tMirroredRepeatWrapping: MirroredRepeatWrapping\n\t};\n\n\tvar TEXTURE_FILTER = {\n\t\tNearestFilter: NearestFilter,\n\t\tNearestMipMapNearestFilter: NearestMipMapNearestFilter,\n\t\tNearestMipMapLinearFilter: NearestMipMapLinearFilter,\n\t\tLinearFilter: LinearFilter,\n\t\tLinearMipMapNearestFilter: LinearMipMapNearestFilter,\n\t\tLinearMipMapLinearFilter: LinearMipMapLinearFilter\n\t};\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t * Bezier Curves formulas obtained from\n\t * http://en.wikipedia.org/wiki/Bézier_curve\n\t */\n\n\tfunction CatmullRom( t, p0, p1, p2, p3 ) {\n\n\t\tvar v0 = ( p2 - p0 ) * 0.5;\n\t\tvar v1 = ( p3 - p1 ) * 0.5;\n\t\tvar t2 = t * t;\n\t\tvar t3 = t * t2;\n\t\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n\t}\n\n\t//\n\n\tfunction QuadraticBezierP0( t, p ) {\n\n\t\tvar k = 1 - t;\n\t\treturn k * k * p;\n\n\t}\n\n\tfunction QuadraticBezierP1( t, p ) {\n\n\t\treturn 2 * ( 1 - t ) * t * p;\n\n\t}\n\n\tfunction QuadraticBezierP2( t, p ) {\n\n\t\treturn t * t * p;\n\n\t}\n\n\tfunction QuadraticBezier( t, p0, p1, p2 ) {\n\n\t\treturn QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +\n\t\t\tQuadraticBezierP2( t, p2 );\n\n\t}\n\n\t//\n\n\tfunction CubicBezierP0( t, p ) {\n\n\t\tvar k = 1 - t;\n\t\treturn k * k * k * p;\n\n\t}\n\n\tfunction CubicBezierP1( t, p ) {\n\n\t\tvar k = 1 - t;\n\t\treturn 3 * k * k * t * p;\n\n\t}\n\n\tfunction CubicBezierP2( t, p ) {\n\n\t\treturn 3 * ( 1 - t ) * t * t * p;\n\n\t}\n\n\tfunction CubicBezierP3( t, p ) {\n\n\t\treturn t * t * t * p;\n\n\t}\n\n\tfunction CubicBezier( t, p0, p1, p2, p3 ) {\n\n\t\treturn CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +\n\t\t\tCubicBezierP3( t, p3 );\n\n\t}\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Extensible curve object\n\t *\n\t * Some common of curve methods:\n\t * .getPoint(t), getTangent(t)\n\t * .getPointAt(u), getTangentAt(u)\n\t * .getPoints(), .getSpacedPoints()\n\t * .getLength()\n\t * .updateArcLengths()\n\t *\n\t * This following curves inherit from THREE.Curve:\n\t *\n\t * -- 2D curves --\n\t * THREE.ArcCurve\n\t * THREE.CubicBezierCurve\n\t * THREE.EllipseCurve\n\t * THREE.LineCurve\n\t * THREE.QuadraticBezierCurve\n\t * THREE.SplineCurve\n\t *\n\t * -- 3D curves --\n\t * THREE.CatmullRomCurve3\n\t * THREE.CubicBezierCurve3\n\t * THREE.LineCurve3\n\t * THREE.QuadraticBezierCurve3\n\t *\n\t * A series of curves can be represented as a THREE.CurvePath.\n\t *\n\t **/\n\n\t/**************************************************************\n\t *\tAbstract Curve base class\n\t **************************************************************/\n\n\tfunction Curve() {\n\n\t\tthis.arcLengthDivisions = 200;\n\n\t}\n\n\tObject.assign( Curve.prototype, {\n\n\t\t// Virtual base class method to overwrite and implement in subclasses\n\t\t//\t- t [0 .. 1]\n\n\t\tgetPoint: function () {\n\n\t\t\tconsole.warn( 'THREE.Curve: .getPoint() not implemented.' );\n\t\t\treturn null;\n\n\t\t},\n\n\t\t// Get point at relative position in curve according to arc length\n\t\t// - u [0 .. 1]\n\n\t\tgetPointAt: function ( u ) {\n\n\t\t\tvar t = this.getUtoTmapping( u );\n\t\t\treturn this.getPoint( t );\n\n\t\t},\n\n\t\t// Get sequence of points using getPoint( t )\n\n\t\tgetPoints: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) divisions = 5;\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n\t\t\t\tpoints.push( this.getPoint( d / divisions ) );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\t// Get sequence of points using getPointAt( u )\n\n\t\tgetSpacedPoints: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) divisions = 5;\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n\t\t\t\tpoints.push( this.getPointAt( d / divisions ) );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\t// Get total curve arc length\n\n\t\tgetLength: function () {\n\n\t\t\tvar lengths = this.getLengths();\n\t\t\treturn lengths[ lengths.length - 1 ];\n\n\t\t},\n\n\t\t// Get list of cumulative segment lengths\n\n\t\tgetLengths: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) divisions = this.arcLengthDivisions;\n\n\t\t\tif ( this.cacheArcLengths &&\n\t\t\t\t( this.cacheArcLengths.length === divisions + 1 ) &&\n\t\t\t\t! this.needsUpdate ) {\n\n\t\t\t\treturn this.cacheArcLengths;\n\n\t\t\t}\n\n\t\t\tthis.needsUpdate = false;\n\n\t\t\tvar cache = [];\n\t\t\tvar current, last = this.getPoint( 0 );\n\t\t\tvar p, sum = 0;\n\n\t\t\tcache.push( 0 );\n\n\t\t\tfor ( p = 1; p <= divisions; p ++ ) {\n\n\t\t\t\tcurrent = this.getPoint( p / divisions );\n\t\t\t\tsum += current.distanceTo( last );\n\t\t\t\tcache.push( sum );\n\t\t\t\tlast = current;\n\n\t\t\t}\n\n\t\t\tthis.cacheArcLengths = cache;\n\n\t\t\treturn cache; // { sums: cache, sum: sum }; Sum is in the last element.\n\n\t\t},\n\n\t\tupdateArcLengths: function () {\n\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.getLengths();\n\n\t\t},\n\n\t\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\n\t\tgetUtoTmapping: function ( u, distance ) {\n\n\t\t\tvar arcLengths = this.getLengths();\n\n\t\t\tvar i = 0, il = arcLengths.length;\n\n\t\t\tvar targetArcLength; // The targeted u distance value to get\n\n\t\t\tif ( distance ) {\n\n\t\t\t\ttargetArcLength = distance;\n\n\t\t\t} else {\n\n\t\t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\n\n\t\t\t}\n\n\t\t\t// binary search for the index with largest value smaller than target u distance\n\n\t\t\tvar low = 0, high = il - 1, comparison;\n\n\t\t\twhile ( low <= high ) {\n\n\t\t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n\t\t\t\tcomparison = arcLengths[ i ] - targetArcLength;\n\n\t\t\t\tif ( comparison < 0 ) {\n\n\t\t\t\t\tlow = i + 1;\n\n\t\t\t\t} else if ( comparison > 0 ) {\n\n\t\t\t\t\thigh = i - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\thigh = i;\n\t\t\t\t\tbreak;\n\n\t\t\t\t\t// DONE\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ti = high;\n\n\t\t\tif ( arcLengths[ i ] === targetArcLength ) {\n\n\t\t\t\treturn i / ( il - 1 );\n\n\t\t\t}\n\n\t\t\t// we could get finer grain at lengths, or use simple interpolation between two points\n\n\t\t\tvar lengthBefore = arcLengths[ i ];\n\t\t\tvar lengthAfter = arcLengths[ i + 1 ];\n\n\t\t\tvar segmentLength = lengthAfter - lengthBefore;\n\n\t\t\t// determine where we are between the 'before' and 'after' points\n\n\t\t\tvar segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n\n\t\t\t// add that fractional amount to t\n\n\t\t\tvar t = ( i + segmentFraction ) / ( il - 1 );\n\n\t\t\treturn t;\n\n\t\t},\n\n\t\t// Returns a unit vector tangent at t\n\t\t// In case any sub curve does not implement its tangent derivation,\n\t\t// 2 points a small delta apart will be used to find its gradient\n\t\t// which seems to give a reasonable approximation\n\n\t\tgetTangent: function ( t ) {\n\n\t\t\tvar delta = 0.0001;\n\t\t\tvar t1 = t - delta;\n\t\t\tvar t2 = t + delta;\n\n\t\t\t// Capping in case of danger\n\n\t\t\tif ( t1 < 0 ) t1 = 0;\n\t\t\tif ( t2 > 1 ) t2 = 1;\n\n\t\t\tvar pt1 = this.getPoint( t1 );\n\t\t\tvar pt2 = this.getPoint( t2 );\n\n\t\t\tvar vec = pt2.clone().sub( pt1 );\n\t\t\treturn vec.normalize();\n\n\t\t},\n\n\t\tgetTangentAt: function ( u ) {\n\n\t\t\tvar t = this.getUtoTmapping( u );\n\t\t\treturn this.getTangent( t );\n\n\t\t},\n\n\t\tcomputeFrenetFrames: function ( segments, closed ) {\n\n\t\t\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\n\t\t\tvar normal = new Vector3();\n\n\t\t\tvar tangents = [];\n\t\t\tvar normals = [];\n\t\t\tvar binormals = [];\n\n\t\t\tvar vec = new Vector3();\n\t\t\tvar mat = new Matrix4();\n\n\t\t\tvar i, u, theta;\n\n\t\t\t// compute the tangent vectors for each segment on the curve\n\n\t\t\tfor ( i = 0; i <= segments; i ++ ) {\n\n\t\t\t\tu = i / segments;\n\n\t\t\t\ttangents[ i ] = this.getTangentAt( u );\n\t\t\t\ttangents[ i ].normalize();\n\n\t\t\t}\n\n\t\t\t// select an initial normal vector perpendicular to the first tangent vector,\n\t\t\t// and in the direction of the minimum tangent xyz component\n\n\t\t\tnormals[ 0 ] = new Vector3();\n\t\t\tbinormals[ 0 ] = new Vector3();\n\t\t\tvar min = Number.MAX_VALUE;\n\t\t\tvar tx = Math.abs( tangents[ 0 ].x );\n\t\t\tvar ty = Math.abs( tangents[ 0 ].y );\n\t\t\tvar tz = Math.abs( tangents[ 0 ].z );\n\n\t\t\tif ( tx <= min ) {\n\n\t\t\t\tmin = tx;\n\t\t\t\tnormal.set( 1, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( ty <= min ) {\n\n\t\t\t\tmin = ty;\n\t\t\t\tnormal.set( 0, 1, 0 );\n\n\t\t\t}\n\n\t\t\tif ( tz <= min ) {\n\n\t\t\t\tnormal.set( 0, 0, 1 );\n\n\t\t\t}\n\n\t\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\n\n\t\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\n\t\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n\n\t\t\t// compute the slowly-varying normal and binormal vectors for each segment on the curve\n\n\t\t\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\t\t\tnormals[ i ] = normals[ i - 1 ].clone();\n\n\t\t\t\tbinormals[ i ] = binormals[ i - 1 ].clone();\n\n\t\t\t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\n\n\t\t\t\tif ( vec.length() > Number.EPSILON ) {\n\n\t\t\t\t\tvec.normalize();\n\n\t\t\t\t\ttheta = Math.acos( _Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\n\n\t\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\n\t\t\t\t}\n\n\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t\t}\n\n\t\t\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\t\t\tif ( closed === true ) {\n\n\t\t\t\ttheta = Math.acos( _Math.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );\n\t\t\t\ttheta /= segments;\n\n\t\t\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {\n\n\t\t\t\t\ttheta = - theta;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\t\t\t\t// twist a little...\n\t\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\n\t\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\ttangents: tangents,\n\t\t\t\tnormals: normals,\n\t\t\t\tbinormals: binormals\n\t\t\t};\n\n\t\t}\n\n\t} );\n\n\tfunction LineCurve( v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t}\n\n\tLineCurve.prototype = Object.create( Curve.prototype );\n\tLineCurve.prototype.constructor = LineCurve;\n\n\tLineCurve.prototype.isLineCurve = true;\n\n\tLineCurve.prototype.getPoint = function ( t ) {\n\n\t\tif ( t === 1 ) {\n\n\t\t\treturn this.v2.clone();\n\n\t\t}\n\n\t\tvar point = this.v2.clone().sub( this.v1 );\n\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t\treturn point;\n\n\t};\n\n\t// Line curve is linear, so we can overwrite default getPointAt\n\n\tLineCurve.prototype.getPointAt = function ( u ) {\n\n\t\treturn this.getPoint( u );\n\n\t};\n\n\tLineCurve.prototype.getTangent = function ( t ) {\n\n\t\tvar tangent = this.v2.clone().sub( this.v1 );\n\n\t\treturn tangent.normalize();\n\n\t};\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t **/\n\n\t/**************************************************************\n\t *\tCurved Path - a curve path is simply a array of connected\n\t *  curves, but retains the api of a curve\n\t **************************************************************/\n\n\tfunction CurvePath() {\n\n\t\tCurve.call( this );\n\n\t\tthis.curves = [];\n\n\t\tthis.autoClose = false; // Automatically closes the path\n\n\t}\n\n\tCurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {\n\n\t\tconstructor: CurvePath,\n\n\t\tadd: function ( curve ) {\n\n\t\t\tthis.curves.push( curve );\n\n\t\t},\n\n\t\tclosePath: function () {\n\n\t\t\t// Add a line curve if start and end of lines are not connected\n\t\t\tvar startPoint = this.curves[ 0 ].getPoint( 0 );\n\t\t\tvar endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\n\n\t\t\tif ( ! startPoint.equals( endPoint ) ) {\n\n\t\t\t\tthis.curves.push( new LineCurve( endPoint, startPoint ) );\n\n\t\t\t}\n\n\t\t},\n\n\t\t// To get accurate point with reference to\n\t\t// entire path distance at time t,\n\t\t// following has to be done:\n\n\t\t// 1. Length of each sub path have to be known\n\t\t// 2. Locate and identify type of curve\n\t\t// 3. Get t for the curve\n\t\t// 4. Return curve.getPointAt(t')\n\n\t\tgetPoint: function ( t ) {\n\n\t\t\tvar d = t * this.getLength();\n\t\t\tvar curveLengths = this.getCurveLengths();\n\t\t\tvar i = 0;\n\n\t\t\t// To think about boundaries points.\n\n\t\t\twhile ( i < curveLengths.length ) {\n\n\t\t\t\tif ( curveLengths[ i ] >= d ) {\n\n\t\t\t\t\tvar diff = curveLengths[ i ] - d;\n\t\t\t\t\tvar curve = this.curves[ i ];\n\n\t\t\t\t\tvar segmentLength = curve.getLength();\n\t\t\t\t\tvar u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\n\t\t\t\t\treturn curve.getPointAt( u );\n\n\t\t\t\t}\n\n\t\t\t\ti ++;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t\t// loop where sum != 0, sum > d , sum+1 <d\n\n\t\t},\n\n\t\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t\t// getPoint() depends on getLength\n\n\t\tgetLength: function () {\n\n\t\t\tvar lens = this.getCurveLengths();\n\t\t\treturn lens[ lens.length - 1 ];\n\n\t\t},\n\n\t\t// cacheLengths must be recalculated.\n\t\tupdateArcLengths: function () {\n\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.cacheLengths = null;\n\t\t\tthis.getCurveLengths();\n\n\t\t},\n\n\t\t// Compute lengths and cache them\n\t\t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\n\t\tgetCurveLengths: function () {\n\n\t\t\t// We use cache values if curves and cache array are same length\n\n\t\t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\n\n\t\t\t\treturn this.cacheLengths;\n\n\t\t\t}\n\n\t\t\t// Get length of sub-curve\n\t\t\t// Push sums into cached array\n\n\t\t\tvar lengths = [], sums = 0;\n\n\t\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\t\tsums += this.curves[ i ].getLength();\n\t\t\t\tlengths.push( sums );\n\n\t\t\t}\n\n\t\t\tthis.cacheLengths = lengths;\n\n\t\t\treturn lengths;\n\n\t\t},\n\n\t\tgetSpacedPoints: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) divisions = 40;\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var i = 0; i <= divisions; i ++ ) {\n\n\t\t\t\tpoints.push( this.getPoint( i / divisions ) );\n\n\t\t\t}\n\n\t\t\tif ( this.autoClose ) {\n\n\t\t\t\tpoints.push( points[ 0 ] );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\tgetPoints: function ( divisions ) {\n\n\t\t\tdivisions = divisions || 12;\n\n\t\t\tvar points = [], last;\n\n\t\t\tfor ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {\n\n\t\t\t\tvar curve = curves[ i ];\n\t\t\t\tvar resolution = (curve && curve.isEllipseCurve) ? divisions * 2\n\t\t\t\t\t: (curve && curve.isLineCurve) ? 1\n\t\t\t\t\t: (curve && curve.isSplineCurve) ? divisions * curve.points.length\n\t\t\t\t\t: divisions;\n\n\t\t\t\tvar pts = curve.getPoints( resolution );\n\n\t\t\t\tfor ( var j = 0; j < pts.length; j++ ) {\n\n\t\t\t\t\tvar point = pts[ j ];\n\n\t\t\t\t\tif ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates\n\n\t\t\t\t\tpoints.push( point );\n\t\t\t\t\tlast = point;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.autoClose && points.length > 1 && !points[ points.length - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\t\tpoints.push( points[ 0 ] );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\t/**************************************************************\n\t\t *\tCreate Geometries Helpers\n\t\t **************************************************************/\n\n\t\t/// Generate geometry from path points (for Line or Points objects)\n\n\t\tcreatePointsGeometry: function ( divisions ) {\n\n\t\t\tvar pts = this.getPoints( divisions );\n\t\t\treturn this.createGeometry( pts );\n\n\t\t},\n\n\t\t// Generate geometry from equidistant sampling along the path\n\n\t\tcreateSpacedPointsGeometry: function ( divisions ) {\n\n\t\t\tvar pts = this.getSpacedPoints( divisions );\n\t\t\treturn this.createGeometry( pts );\n\n\t\t},\n\n\t\tcreateGeometry: function ( points ) {\n\n\t\t\tvar geometry = new Geometry();\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tvar point = points[ i ];\n\t\t\t\tgeometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\n\n\t\t\t}\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t} );\n\n\tfunction EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.aX = aX;\n\t\tthis.aY = aY;\n\n\t\tthis.xRadius = xRadius;\n\t\tthis.yRadius = yRadius;\n\n\t\tthis.aStartAngle = aStartAngle;\n\t\tthis.aEndAngle = aEndAngle;\n\n\t\tthis.aClockwise = aClockwise;\n\n\t\tthis.aRotation = aRotation || 0;\n\n\t}\n\n\tEllipseCurve.prototype = Object.create( Curve.prototype );\n\tEllipseCurve.prototype.constructor = EllipseCurve;\n\n\tEllipseCurve.prototype.isEllipseCurve = true;\n\n\tEllipseCurve.prototype.getPoint = function ( t ) {\n\n\t\tvar twoPi = Math.PI * 2;\n\t\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\n\t\tvar samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\n\n\t\t// ensures that deltaAngle is 0 .. 2 PI\n\t\twhile ( deltaAngle < 0 ) deltaAngle += twoPi;\n\t\twhile ( deltaAngle > twoPi ) deltaAngle -= twoPi;\n\n\t\tif ( deltaAngle < Number.EPSILON ) {\n\n\t\t\tif ( samePoints ) {\n\n\t\t\t\tdeltaAngle = 0;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.aClockwise === true && ! samePoints ) {\n\n\t\t\tif ( deltaAngle === twoPi ) {\n\n\t\t\t\tdeltaAngle = - twoPi;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = deltaAngle - twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar angle = this.aStartAngle + t * deltaAngle;\n\t\tvar x = this.aX + this.xRadius * Math.cos( angle );\n\t\tvar y = this.aY + this.yRadius * Math.sin( angle );\n\n\t\tif ( this.aRotation !== 0 ) {\n\n\t\t\tvar cos = Math.cos( this.aRotation );\n\t\t\tvar sin = Math.sin( this.aRotation );\n\n\t\t\tvar tx = x - this.aX;\n\t\t\tvar ty = y - this.aY;\n\n\t\t\t// Rotate the point about the center of the ellipse.\n\t\t\tx = tx * cos - ty * sin + this.aX;\n\t\t\ty = tx * sin + ty * cos + this.aY;\n\n\t\t}\n\n\t\treturn new Vector2( x, y );\n\n\t};\n\n\tfunction SplineCurve( points /* array of Vector2 */ ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.points = ( points === undefined ) ? [] : points;\n\n\t}\n\n\tSplineCurve.prototype = Object.create( Curve.prototype );\n\tSplineCurve.prototype.constructor = SplineCurve;\n\n\tSplineCurve.prototype.isSplineCurve = true;\n\n\tSplineCurve.prototype.getPoint = function ( t ) {\n\n\t\tvar points = this.points;\n\t\tvar point = ( points.length - 1 ) * t;\n\n\t\tvar intPoint = Math.floor( point );\n\t\tvar weight = point - intPoint;\n\n\t\tvar point0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n\t\tvar point1 = points[ intPoint ];\n\t\tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\t\tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n\t\treturn new Vector2(\n\t\t\tCatmullRom( weight, point0.x, point1.x, point2.x, point3.x ),\n\t\t\tCatmullRom( weight, point0.y, point1.y, point2.y, point3.y )\n\t\t);\n\n\t};\n\n\tfunction CubicBezierCurve( v0, v1, v2, v3 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t\tthis.v3 = v3;\n\n\t}\n\n\tCubicBezierCurve.prototype = Object.create( Curve.prototype );\n\tCubicBezierCurve.prototype.constructor = CubicBezierCurve;\n\n\tCubicBezierCurve.prototype.getPoint = function ( t ) {\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\t\treturn new Vector2(\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y )\n\t\t);\n\n\t};\n\n\tfunction QuadraticBezierCurve( v0, v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t}\n\n\tQuadraticBezierCurve.prototype = Object.create( Curve.prototype );\n\tQuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;\n\n\tQuadraticBezierCurve.prototype.getPoint = function ( t ) {\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\t\treturn new Vector2(\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y )\n\t\t);\n\n\t};\n\n\tvar PathPrototype = Object.assign( Object.create( CurvePath.prototype ), {\n\n\t\tfromPoints: function ( vectors ) {\n\n\t\t\tthis.moveTo( vectors[ 0 ].x, vectors[ 0 ].y );\n\n\t\t\tfor ( var i = 1, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tthis.lineTo( vectors[ i ].x, vectors[ i ].y );\n\n\t\t\t}\n\n\t\t},\n\n\t\tmoveTo: function ( x, y ) {\n\n\t\t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\n\n\t\t},\n\n\t\tlineTo: function ( x, y ) {\n\n\t\t\tvar curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( x, y );\n\n\t\t},\n\n\t\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\n\t\t\tvar curve = new QuadraticBezierCurve(\n\t\t\t\tthis.currentPoint.clone(),\n\t\t\t\tnew Vector2( aCPx, aCPy ),\n\t\t\t\tnew Vector2( aX, aY )\n\t\t\t);\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( aX, aY );\n\n\t\t},\n\n\t\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\t\tvar curve = new CubicBezierCurve(\n\t\t\t\tthis.currentPoint.clone(),\n\t\t\t\tnew Vector2( aCP1x, aCP1y ),\n\t\t\t\tnew Vector2( aCP2x, aCP2y ),\n\t\t\t\tnew Vector2( aX, aY )\n\t\t\t);\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( aX, aY );\n\n\t\t},\n\n\t\tsplineThru: function ( pts /*Array of Vector*/ ) {\n\n\t\t\tvar npts = [ this.currentPoint.clone() ].concat( pts );\n\n\t\t\tvar curve = new SplineCurve( npts );\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\n\n\t\t},\n\n\t\tarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\t\tvar x0 = this.currentPoint.x;\n\t\t\tvar y0 = this.currentPoint.y;\n\n\t\t\tthis.absarc( aX + x0, aY + y0, aRadius,\n\t\t\t\taStartAngle, aEndAngle, aClockwise );\n\n\t\t},\n\n\t\tabsarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\t},\n\n\t\tellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\t\tvar x0 = this.currentPoint.x;\n\t\t\tvar y0 = this.currentPoint.y;\n\n\t\t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\t},\n\n\t\tabsellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\t\tvar curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\t\tif ( this.curves.length > 0 ) {\n\n\t\t\t\t// if a previous curve is present, attempt to join\n\t\t\t\tvar firstPoint = curve.getPoint( 0 );\n\n\t\t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\n\n\t\t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tvar lastPoint = curve.getPoint( 1 );\n\t\t\tthis.currentPoint.copy( lastPoint );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Creates free form 2d path using series of points, lines or curves.\n\t **/\n\n\tfunction Path( points ) {\n\n\t\tCurvePath.call( this );\n\t\tthis.currentPoint = new Vector2();\n\n\t\tif ( points ) {\n\n\t\t\tthis.fromPoints( points );\n\n\t\t}\n\n\t}\n\n\tPath.prototype = PathPrototype;\n\tPathPrototype.constructor = Path;\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Defines a 2d shape plane using paths.\n\t **/\n\n\t// STEP 1 Create a path.\n\t// STEP 2 Turn path into shape.\n\t// STEP 3 ExtrudeGeometry takes in Shape/Shapes\n\t// STEP 3a - Extract points from each shape, turn to vertices\n\t// STEP 3b - Triangulate each shape, add faces.\n\n\tfunction Shape() {\n\n\t\tPath.apply( this, arguments );\n\n\t\tthis.holes = [];\n\n\t}\n\n\tShape.prototype = Object.assign( Object.create( PathPrototype ), {\n\n\t\tconstructor: Shape,\n\n\t\tgetPointsHoles: function ( divisions ) {\n\n\t\t\tvar holesPts = [];\n\n\t\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\n\n\t\t\t}\n\n\t\t\treturn holesPts;\n\n\t\t},\n\n\t\t// Get points of shape and holes (keypoints based on segments parameter)\n\n\t\textractAllPoints: function ( divisions ) {\n\n\t\t\treturn {\n\n\t\t\t\tshape: this.getPoints( divisions ),\n\t\t\t\tholes: this.getPointsHoles( divisions )\n\n\t\t\t};\n\n\t\t},\n\n\t\textractPoints: function ( divisions ) {\n\n\t\t\treturn this.extractAllPoints( divisions );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * minimal class for proxing functions to Path. Replaces old \"extractSubpaths()\"\n\t **/\n\n\tfunction ShapePath() {\n\n\t\tthis.subPaths = [];\n\t\tthis.currentPath = null;\n\n\t}\n\n\tObject.assign( ShapePath.prototype, {\n\n\t\tmoveTo: function ( x, y ) {\n\n\t\t\tthis.currentPath = new Path();\n\t\t\tthis.subPaths.push( this.currentPath );\n\t\t\tthis.currentPath.moveTo( x, y );\n\n\t\t},\n\n\t\tlineTo: function ( x, y ) {\n\n\t\t\tthis.currentPath.lineTo( x, y );\n\n\t\t},\n\n\t\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\n\t\t\tthis.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\n\n\t\t},\n\n\t\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\t\tthis.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\n\n\t\t},\n\n\t\tsplineThru: function ( pts ) {\n\n\t\t\tthis.currentPath.splineThru( pts );\n\n\t\t},\n\n\t\ttoShapes: function ( isCCW, noHoles ) {\n\n\t\t\tfunction toShapesNoHoles( inSubpaths ) {\n\n\t\t\t\tvar shapes = [];\n\n\t\t\t\tfor ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar tmpPath = inSubpaths[ i ];\n\n\t\t\t\t\tvar tmpShape = new Shape();\n\t\t\t\t\ttmpShape.curves = tmpPath.curves;\n\n\t\t\t\t\tshapes.push( tmpShape );\n\n\t\t\t\t}\n\n\t\t\t\treturn shapes;\n\n\t\t\t}\n\n\t\t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\n\n\t\t\t\tvar polyLen = inPolygon.length;\n\n\t\t\t\t// inPt on polygon contour => immediate success    or\n\t\t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t\t\t//  with the horizontal line through inPt, left of inPt\n\t\t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\n\t\t\t\tvar inside = false;\n\t\t\t\tfor ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\n\n\t\t\t\t\tvar edgeLowPt  = inPolygon[ p ];\n\t\t\t\t\tvar edgeHighPt = inPolygon[ q ];\n\n\t\t\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n\t\t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\n\n\t\t\t\t\t\t// not parallel\n\t\t\t\t\t\tif ( edgeDy < 0 ) {\n\n\t\t\t\t\t\t\tedgeLowPt  = inPolygon[ q ]; edgeDx = - edgeDx;\n\t\t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\tcontinue;\n\n\t\t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\n\n\t\t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tvar perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\n\t\t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\tcontinue;\n\t\t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// parallel or collinear\n\t\t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\tcontinue;\t\t\t// parallel\n\t\t\t\t\t\t// edge lies on the same horizontal line as inPt\n\t\t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\n\t\t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\treturn\ttrue;\t// inPt: Point on contour !\n\t\t\t\t\t\t// continue;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn\tinside;\n\n\t\t\t}\n\n\t\t\tvar isClockWise = ShapeUtils.isClockWise;\n\n\t\t\tvar subPaths = this.subPaths;\n\t\t\tif ( subPaths.length === 0 ) return [];\n\n\t\t\tif ( noHoles === true )\treturn\ttoShapesNoHoles( subPaths );\n\n\n\t\t\tvar solid, tmpPath, tmpShape, shapes = [];\n\n\t\t\tif ( subPaths.length === 1 ) {\n\n\t\t\t\ttmpPath = subPaths[ 0 ];\n\t\t\t\ttmpShape = new Shape();\n\t\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\t\tshapes.push( tmpShape );\n\t\t\t\treturn shapes;\n\n\t\t\t}\n\n\t\t\tvar holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\n\t\t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\n\n\t\t\t// console.log(\"Holes first\", holesFirst);\n\n\t\t\tvar betterShapeHoles = [];\n\t\t\tvar newShapes = [];\n\t\t\tvar newShapeHoles = [];\n\t\t\tvar mainIdx = 0;\n\t\t\tvar tmpPoints;\n\n\t\t\tnewShapes[ mainIdx ] = undefined;\n\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\tfor ( var i = 0, l = subPaths.length; i < l; i ++ ) {\n\n\t\t\t\ttmpPath = subPaths[ i ];\n\t\t\t\ttmpPoints = tmpPath.getPoints();\n\t\t\t\tsolid = isClockWise( tmpPoints );\n\t\t\t\tsolid = isCCW ? ! solid : solid;\n\n\t\t\t\tif ( solid ) {\n\n\t\t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\tmainIdx ++;\n\n\t\t\t\t\tnewShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };\n\t\t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\n\n\t\t\t\t\tif ( holesFirst )\tmainIdx ++;\n\t\t\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\t\t\t//console.log('cw', i);\n\n\t\t\t\t} else {\n\n\t\t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\n\n\t\t\t\t\t//console.log('ccw', i);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// only Holes? -> probably all Shapes with wrong orientation\n\t\t\tif ( ! newShapes[ 0 ] )\treturn\ttoShapesNoHoles( subPaths );\n\n\n\t\t\tif ( newShapes.length > 1 ) {\n\n\t\t\t\tvar ambiguous = false;\n\t\t\t\tvar toChange = [];\n\n\t\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\t\tbetterShapeHoles[ sIdx ] = [];\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\t\tvar sho = newShapeHoles[ sIdx ];\n\n\t\t\t\t\tfor ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {\n\n\t\t\t\t\t\tvar ho = sho[ hIdx ];\n\t\t\t\t\t\tvar hole_unassigned = true;\n\n\t\t\t\t\t\tfor ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\n\n\t\t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\n\n\t\t\t\t\t\t\t\tif ( sIdx !== s2Idx )\ttoChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );\n\t\t\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tambiguous = true;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\t// console.log(\"ambiguous: \", ambiguous);\n\t\t\t\tif ( toChange.length > 0 ) {\n\n\t\t\t\t\t// console.log(\"to change: \", toChange);\n\t\t\t\t\tif ( ! ambiguous )\tnewShapeHoles = betterShapeHoles;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar tmpHoles;\n\n\t\t\tfor ( var i = 0, il = newShapes.length; i < il; i ++ ) {\n\n\t\t\t\ttmpShape = newShapes[ i ].s;\n\t\t\t\tshapes.push( tmpShape );\n\t\t\t\ttmpHoles = newShapeHoles[ i ];\n\n\t\t\t\tfor ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\n\n\t\t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//console.log(\"shape\", shapes);\n\n\t\t\treturn shapes;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Font( data ) {\n\n\t\tthis.data = data;\n\n\t}\n\n\tObject.assign( Font.prototype, {\n\n\t\tisFont: true,\n\n\t\tgenerateShapes: function ( text, size, divisions ) {\n\n\t\t\tfunction createPaths( text ) {\n\n\t\t\t\tvar chars = String( text ).split( '' );\n\t\t\t\tvar scale = size / data.resolution;\n\t\t\t\tvar line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;\n\n\t\t\t\tvar offsetX = 0, offsetY = 0;\n\n\t\t\t\tvar paths = [];\n\n\t\t\t\tfor ( var i = 0; i < chars.length; i ++ ) {\n\n\t\t\t\t\tvar char = chars[ i ];\n\n\t\t\t\t\tif ( char === '\\n' ) {\n\n\t\t\t\t\t\toffsetX = 0;\n\t\t\t\t\t\toffsetY -= line_height;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvar ret = createPath( char, scale, offsetX, offsetY );\n\t\t\t\t\t\toffsetX += ret.offsetX;\n\t\t\t\t\t\tpaths.push( ret.path );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn paths;\n\n\t\t\t}\n\n\t\t\tfunction createPath( c, scale, offsetX, offsetY ) {\n\n\t\t\t\tvar glyph = data.glyphs[ c ] || data.glyphs[ '?' ];\n\n\t\t\t\tif ( ! glyph ) return;\n\n\t\t\t\tvar path = new ShapePath();\n\n\t\t\t\tvar pts = [];\n\t\t\t\tvar x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2, laste;\n\n\t\t\t\tif ( glyph.o ) {\n\n\t\t\t\t\tvar outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\n\t\t\t\t\tfor ( var i = 0, l = outline.length; i < l; ) {\n\n\t\t\t\t\t\tvar action = outline[ i ++ ];\n\n\t\t\t\t\t\tswitch ( action ) {\n\n\t\t\t\t\t\t\tcase 'm': // moveTo\n\n\t\t\t\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\t\t\tpath.moveTo( x, y );\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'l': // lineTo\n\n\t\t\t\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\t\t\tpath.lineTo( x, y );\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'q': // quadraticCurveTo\n\n\t\t\t\t\t\t\t\tcpx  = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\t\t\tcpy  = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\n\t\t\t\t\t\t\t\tlaste = pts[ pts.length - 1 ];\n\n\t\t\t\t\t\t\t\tif ( laste ) {\n\n\t\t\t\t\t\t\t\t\tcpx0 = laste.x;\n\t\t\t\t\t\t\t\t\tcpy0 = laste.y;\n\n\t\t\t\t\t\t\t\t\tfor ( var i2 = 1; i2 <= divisions; i2 ++ ) {\n\n\t\t\t\t\t\t\t\t\t\tvar t = i2 / divisions;\n\t\t\t\t\t\t\t\t\t\tQuadraticBezier( t, cpx0, cpx1, cpx );\n\t\t\t\t\t\t\t\t\t\tQuadraticBezier( t, cpy0, cpy1, cpy );\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'b': // bezierCurveTo\n\n\t\t\t\t\t\t\t\tcpx  = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\t\t\tcpy  = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\t\t\tcpy2 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\n\t\t\t\t\t\t\t\tlaste = pts[ pts.length - 1 ];\n\n\t\t\t\t\t\t\t\tif ( laste ) {\n\n\t\t\t\t\t\t\t\t\tcpx0 = laste.x;\n\t\t\t\t\t\t\t\t\tcpy0 = laste.y;\n\n\t\t\t\t\t\t\t\t\tfor ( var i2 = 1; i2 <= divisions; i2 ++ ) {\n\n\t\t\t\t\t\t\t\t\t\tvar t = i2 / divisions;\n\t\t\t\t\t\t\t\t\t\tCubicBezier( t, cpx0, cpx1, cpx2, cpx );\n\t\t\t\t\t\t\t\t\t\tCubicBezier( t, cpy0, cpy1, cpy2, cpy );\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn { offsetX: glyph.ha * scale, path: path };\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( size === undefined ) size = 100;\n\t\t\tif ( divisions === undefined ) divisions = 4;\n\n\t\t\tvar data = this.data;\n\n\t\t\tvar paths = createPaths( text );\n\t\t\tvar shapes = [];\n\n\t\t\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\n\n\t\t\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\n\n\t\t\t}\n\n\t\t\treturn shapes;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction FontLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t}\n\n\tObject.assign( FontLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tvar json;\n\n\t\t\t\ttry {\n\n\t\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );\n\t\t\t\t\tjson = JSON.parse( text.substring( 65, text.length - 2 ) );\n\n\t\t\t\t}\n\n\t\t\t\tvar font = scope.parse( json );\n\n\t\t\t\tif ( onLoad ) onLoad( font );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\treturn new Font( json );\n\n\t\t}\n\n\t} );\n\n\tvar context;\n\n\tvar AudioContext = {\n\n\t\tgetContext: function () {\n\n\t\t\tif ( context === undefined ) {\n\n\t\t\t\tcontext = new ( window.AudioContext || window.webkitAudioContext )();\n\n\t\t\t}\n\n\t\t\treturn context;\n\n\t\t},\n\n\t\tsetContext: function ( value ) {\n\n\t\t\tcontext = value;\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author Reece Aaron Lecrivain / http://reecenotes.com/\n\t */\n\n\tfunction AudioLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t}\n\n\tObject.assign( AudioLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\tvar context = AudioContext.getContext();\n\n\t\t\t\tcontext.decodeAudioData( buffer, function ( audioBuffer ) {\n\n\t\t\t\t\tonLoad( audioBuffer );\n\n\t\t\t\t} );\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction StereoCamera() {\n\n\t\tthis.type = 'StereoCamera';\n\n\t\tthis.aspect = 1;\n\n\t\tthis.eyeSep = 0.064;\n\n\t\tthis.cameraL = new PerspectiveCamera();\n\t\tthis.cameraL.layers.enable( 1 );\n\t\tthis.cameraL.matrixAutoUpdate = false;\n\n\t\tthis.cameraR = new PerspectiveCamera();\n\t\tthis.cameraR.layers.enable( 2 );\n\t\tthis.cameraR.matrixAutoUpdate = false;\n\n\t}\n\n\tObject.assign( StereoCamera.prototype, {\n\n\t\tupdate: ( function () {\n\n\t\t\tvar instance, focus, fov, aspect, near, far, zoom, eyeSep;\n\n\t\t\tvar eyeRight = new Matrix4();\n\t\t\tvar eyeLeft = new Matrix4();\n\n\t\t\treturn function update( camera ) {\n\n\t\t\t\tvar needsUpdate = instance !== this || focus !== camera.focus || fov !== camera.fov ||\n\t\t\t\t\t\t\t\t\t\t\t\t\taspect !== camera.aspect * this.aspect || near !== camera.near ||\n\t\t\t\t\t\t\t\t\t\t\t\t\tfar !== camera.far || zoom !== camera.zoom || eyeSep !== this.eyeSep;\n\n\t\t\t\tif ( needsUpdate ) {\n\n\t\t\t\t\tinstance = this;\n\t\t\t\t\tfocus = camera.focus;\n\t\t\t\t\tfov = camera.fov;\n\t\t\t\t\taspect = camera.aspect * this.aspect;\n\t\t\t\t\tnear = camera.near;\n\t\t\t\t\tfar = camera.far;\n\t\t\t\t\tzoom = camera.zoom;\n\n\t\t\t\t\t// Off-axis stereoscopic effect based on\n\t\t\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n\t\t\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\n\t\t\t\t\teyeSep = this.eyeSep / 2;\n\t\t\t\t\tvar eyeSepOnProjection = eyeSep * near / focus;\n\t\t\t\t\tvar ymax = ( near * Math.tan( _Math.DEG2RAD * fov * 0.5 ) ) / zoom;\n\t\t\t\t\tvar xmin, xmax;\n\n\t\t\t\t\t// translate xOffset\n\n\t\t\t\t\teyeLeft.elements[ 12 ] = - eyeSep;\n\t\t\t\t\teyeRight.elements[ 12 ] = eyeSep;\n\n\t\t\t\t\t// for left eye\n\n\t\t\t\t\txmin = - ymax * aspect + eyeSepOnProjection;\n\t\t\t\t\txmax = ymax * aspect + eyeSepOnProjection;\n\n\t\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\n\t\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\t\t\tthis.cameraL.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t\t\t// for right eye\n\n\t\t\t\t\txmin = - ymax * aspect - eyeSepOnProjection;\n\t\t\t\t\txmax = ymax * aspect - eyeSepOnProjection;\n\n\t\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\n\t\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\t\t\tthis.cameraR.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t\t}\n\n\t\t\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );\n\t\t\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );\n\n\t\t\t};\n\n\t\t} )()\n\n\t} );\n\n\t/**\n\t * Camera for rendering cube maps\n\t *\t- renders scene into axis-aligned cube\n\t *\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction CubeCamera( near, far, cubeResolution ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'CubeCamera';\n\n\t\tvar fov = 90, aspect = 1;\n\n\t\tvar cameraPX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPX.up.set( 0, - 1, 0 );\n\t\tcameraPX.lookAt( new Vector3( 1, 0, 0 ) );\n\t\tthis.add( cameraPX );\n\n\t\tvar cameraNX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNX.up.set( 0, - 1, 0 );\n\t\tcameraNX.lookAt( new Vector3( - 1, 0, 0 ) );\n\t\tthis.add( cameraNX );\n\n\t\tvar cameraPY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPY.up.set( 0, 0, 1 );\n\t\tcameraPY.lookAt( new Vector3( 0, 1, 0 ) );\n\t\tthis.add( cameraPY );\n\n\t\tvar cameraNY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNY.up.set( 0, 0, - 1 );\n\t\tcameraNY.lookAt( new Vector3( 0, - 1, 0 ) );\n\t\tthis.add( cameraNY );\n\n\t\tvar cameraPZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPZ.up.set( 0, - 1, 0 );\n\t\tcameraPZ.lookAt( new Vector3( 0, 0, 1 ) );\n\t\tthis.add( cameraPZ );\n\n\t\tvar cameraNZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNZ.up.set( 0, - 1, 0 );\n\t\tcameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );\n\t\tthis.add( cameraNZ );\n\n\t\tvar options = { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };\n\n\t\tthis.renderTarget = new WebGLRenderTargetCube( cubeResolution, cubeResolution, options );\n\t\tthis.renderTarget.texture.name = \"CubeCamera\";\n\n\t\tthis.updateCubeMap = function ( renderer, scene ) {\n\n\t\t\tif ( this.parent === null ) this.updateMatrixWorld();\n\n\t\t\tvar renderTarget = this.renderTarget;\n\t\t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\n\n\t\t\trenderTarget.texture.generateMipmaps = false;\n\n\t\t\trenderTarget.activeCubeFace = 0;\n\t\t\trenderer.render( scene, cameraPX, renderTarget );\n\n\t\t\trenderTarget.activeCubeFace = 1;\n\t\t\trenderer.render( scene, cameraNX, renderTarget );\n\n\t\t\trenderTarget.activeCubeFace = 2;\n\t\t\trenderer.render( scene, cameraPY, renderTarget );\n\n\t\t\trenderTarget.activeCubeFace = 3;\n\t\t\trenderer.render( scene, cameraNY, renderTarget );\n\n\t\t\trenderTarget.activeCubeFace = 4;\n\t\t\trenderer.render( scene, cameraPZ, renderTarget );\n\n\t\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\n\t\t\trenderTarget.activeCubeFace = 5;\n\t\t\trenderer.render( scene, cameraNZ, renderTarget );\n\n\t\t\trenderer.setRenderTarget( null );\n\n\t\t};\n\n\t}\n\n\tCubeCamera.prototype = Object.create( Object3D.prototype );\n\tCubeCamera.prototype.constructor = CubeCamera;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AudioListener() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'AudioListener';\n\n\t\tthis.context = AudioContext.getContext();\n\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( this.context.destination );\n\n\t\tthis.filter = null;\n\n\t}\n\n\tAudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: AudioListener,\n\n\t\tgetInput: function () {\n\n\t\t\treturn this.gain;\n\n\t\t},\n\n\t\tremoveFilter: function ( ) {\n\n\t\t\tif ( this.filter !== null ) {\n\n\t\t\t\tthis.gain.disconnect( this.filter );\n\t\t\t\tthis.filter.disconnect( this.context.destination );\n\t\t\t\tthis.gain.connect( this.context.destination );\n\t\t\t\tthis.filter = null;\n\n\t\t\t}\n\n\t\t},\n\n\t\tgetFilter: function () {\n\n\t\t\treturn this.filter;\n\n\t\t},\n\n\t\tsetFilter: function ( value ) {\n\n\t\t\tif ( this.filter !== null ) {\n\n\t\t\t\tthis.gain.disconnect( this.filter );\n\t\t\t\tthis.filter.disconnect( this.context.destination );\n\n\t\t\t} else {\n\n\t\t\t\tthis.gain.disconnect( this.context.destination );\n\n\t\t\t}\n\n\t\t\tthis.filter = value;\n\t\t\tthis.gain.connect( this.filter );\n\t\t\tthis.filter.connect( this.context.destination );\n\n\t\t},\n\n\t\tgetMasterVolume: function () {\n\n\t\t\treturn this.gain.gain.value;\n\n\t\t},\n\n\t\tsetMasterVolume: function ( value ) {\n\n\t\t\tthis.gain.gain.value = value;\n\n\t\t},\n\n\t\tupdateMatrixWorld: ( function () {\n\n\t\t\tvar position = new Vector3();\n\t\t\tvar quaternion = new Quaternion();\n\t\t\tvar scale = new Vector3();\n\n\t\t\tvar orientation = new Vector3();\n\n\t\t\treturn function updateMatrixWorld( force ) {\n\n\t\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\t\tvar listener = this.context.listener;\n\t\t\t\tvar up = this.up;\n\n\t\t\t\tthis.matrixWorld.decompose( position, quaternion, scale );\n\n\t\t\t\torientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\n\t\t\t\tif ( listener.positionX ) {\n\n\t\t\t\t\tlistener.positionX.setValueAtTime( position.x, this.context.currentTime );\n\t\t\t\t\tlistener.positionY.setValueAtTime( position.y, this.context.currentTime );\n\t\t\t\t\tlistener.positionZ.setValueAtTime( position.z, this.context.currentTime );\n\t\t\t\t\tlistener.forwardX.setValueAtTime( orientation.x, this.context.currentTime );\n\t\t\t\t\tlistener.forwardY.setValueAtTime( orientation.y, this.context.currentTime );\n\t\t\t\t\tlistener.forwardZ.setValueAtTime( orientation.z, this.context.currentTime );\n\t\t\t\t\tlistener.upX.setValueAtTime( up.x, this.context.currentTime );\n\t\t\t\t\tlistener.upY.setValueAtTime( up.y, this.context.currentTime );\n\t\t\t\t\tlistener.upZ.setValueAtTime( up.z, this.context.currentTime );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tlistener.setPosition( position.x, position.y, position.z );\n\t\t\t\t\tlistener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t} )()\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Reece Aaron Lecrivain / http://reecenotes.com/\n\t */\n\n\tfunction Audio( listener ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Audio';\n\n\t\tthis.context = listener.context;\n\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( listener.getInput() );\n\n\t\tthis.autoplay = false;\n\n\t\tthis.buffer = null;\n\t\tthis.loop = false;\n\t\tthis.startTime = 0;\n\t\tthis.playbackRate = 1;\n\t\tthis.isPlaying = false;\n\t\tthis.hasPlaybackControl = true;\n\t\tthis.sourceType = 'empty';\n\n\t\tthis.filters = [];\n\n\t}\n\n\tAudio.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Audio,\n\n\t\tgetOutput: function () {\n\n\t\t\treturn this.gain;\n\n\t\t},\n\n\t\tsetNodeSource: function ( audioNode ) {\n\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'audioNode';\n\t\t\tthis.source = audioNode;\n\t\t\tthis.connect();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetBuffer: function ( audioBuffer ) {\n\n\t\t\tthis.buffer = audioBuffer;\n\t\t\tthis.sourceType = 'buffer';\n\n\t\t\tif ( this.autoplay ) this.play();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tplay: function () {\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar source = this.context.createBufferSource();\n\n\t\t\tsource.buffer = this.buffer;\n\t\t\tsource.loop = this.loop;\n\t\t\tsource.onended = this.onEnded.bind( this );\n\t\t\tsource.playbackRate.setValueAtTime( this.playbackRate, this.startTime );\n\t\t\tsource.start( 0, this.startTime );\n\n\t\t\tthis.isPlaying = true;\n\n\t\t\tthis.source = source;\n\n\t\t\treturn this.connect();\n\n\t\t},\n\n\t\tpause: function () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.source.stop();\n\t\t\tthis.startTime = this.context.currentTime;\n\t\t\tthis.isPlaying = false;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.source.stop();\n\t\t\tthis.startTime = 0;\n\t\t\tthis.isPlaying = false;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconnect: function () {\n\n\t\t\tif ( this.filters.length > 0 ) {\n\n\t\t\t\tthis.source.connect( this.filters[ 0 ] );\n\n\t\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\n\n\t\t\t} else {\n\n\t\t\t\tthis.source.connect( this.getOutput() );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdisconnect: function () {\n\n\t\t\tif ( this.filters.length > 0 ) {\n\n\t\t\t\tthis.source.disconnect( this.filters[ 0 ] );\n\n\t\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\n\n\t\t\t} else {\n\n\t\t\t\tthis.source.disconnect( this.getOutput() );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetFilters: function () {\n\n\t\t\treturn this.filters;\n\n\t\t},\n\n\t\tsetFilters: function ( value ) {\n\n\t\t\tif ( ! value ) value = [];\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.disconnect();\n\t\t\t\tthis.filters = value;\n\t\t\t\tthis.connect();\n\n\t\t\t} else {\n\n\t\t\t\tthis.filters = value;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetFilter: function () {\n\n\t\t\treturn this.getFilters()[ 0 ];\n\n\t\t},\n\n\t\tsetFilter: function ( filter ) {\n\n\t\t\treturn this.setFilters( filter ? [ filter ] : [] );\n\n\t\t},\n\n\t\tsetPlaybackRate: function ( value ) {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.playbackRate = value;\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.source.playbackRate.setValueAtTime( this.playbackRate, this.context.currentTime );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetPlaybackRate: function () {\n\n\t\t\treturn this.playbackRate;\n\n\t\t},\n\n\t\tonEnded: function () {\n\n\t\t\tthis.isPlaying = false;\n\n\t\t},\n\n\t\tgetLoop: function () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\treturn this.loop;\n\n\t\t},\n\n\t\tsetLoop: function ( value ) {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.loop = value;\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.source.loop = this.loop;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetVolume: function () {\n\n\t\t\treturn this.gain.gain.value;\n\n\t\t},\n\t\t\n\t\tsetVolume: function ( value ) {\n\n\t\t\tthis.gain.gain.value = value;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction PositionalAudio( listener ) {\n\n\t\tAudio.call( this, listener );\n\n\t\tthis.panner = this.context.createPanner();\n\t\tthis.panner.connect( this.gain );\n\n\t}\n\n\tPositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {\n\n\t\tconstructor: PositionalAudio,\n\n\t\tgetOutput: function () {\n\n\t\t\treturn this.panner;\n\n\t\t},\n\n\t\tgetRefDistance: function () {\n\n\t\t\treturn this.panner.refDistance;\n\n\t\t},\n\n\t\tsetRefDistance: function ( value ) {\n\n\t\t\tthis.panner.refDistance = value;\n\n\t\t},\n\n\t\tgetRolloffFactor: function () {\n\n\t\t\treturn this.panner.rolloffFactor;\n\n\t\t},\n\n\t\tsetRolloffFactor: function ( value ) {\n\n\t\t\tthis.panner.rolloffFactor = value;\n\n\t\t},\n\n\t\tgetDistanceModel: function () {\n\n\t\t\treturn this.panner.distanceModel;\n\n\t\t},\n\n\t\tsetDistanceModel: function ( value ) {\n\n\t\t\tthis.panner.distanceModel = value;\n\n\t\t},\n\n\t\tgetMaxDistance: function () {\n\n\t\t\treturn this.panner.maxDistance;\n\n\t\t},\n\n\t\tsetMaxDistance: function ( value ) {\n\n\t\t\tthis.panner.maxDistance = value;\n\n\t\t},\n\n\t\tupdateMatrixWorld: ( function () {\n\n\t\t\tvar position = new Vector3();\n\n\t\t\treturn function updateMatrixWorld( force ) {\n\n\t\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\t\tposition.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\t\tthis.panner.setPosition( position.x, position.y, position.z );\n\n\t\t\t};\n\n\t\t} )()\n\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AudioAnalyser( audio, fftSize ) {\n\n\t\tthis.analyser = audio.context.createAnalyser();\n\t\tthis.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\n\n\t\tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\n\n\t\taudio.getOutput().connect( this.analyser );\n\n\t}\n\n\tObject.assign( AudioAnalyser.prototype, {\n\n\t\tgetFrequencyData: function () {\n\n\t\t\tthis.analyser.getByteFrequencyData( this.data );\n\n\t\t\treturn this.data;\n\n\t\t},\n\n\t\tgetAverageFrequency: function () {\n\n\t\t\tvar value = 0, data = this.getFrequencyData();\n\n\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n\t\t\t\tvalue += data[ i ];\n\n\t\t\t}\n\n\t\t\treturn value / data.length;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Buffered scene graph property that allows weighted accumulation.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction PropertyMixer( binding, typeName, valueSize ) {\n\n\t\tthis.binding = binding;\n\t\tthis.valueSize = valueSize;\n\n\t\tvar bufferType = Float64Array,\n\t\t\tmixFunction;\n\n\t\tswitch ( typeName ) {\n\n\t\t\tcase 'quaternion':\n\t\t\t\tmixFunction = this._slerp;\n\t\t\t\tbreak;\n\n\t\t\tcase 'string':\n\t\t\tcase 'bool':\n\t\t\t\tbufferType = Array;\n\t\t\t\tmixFunction = this._select;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tmixFunction = this._lerp;\n\n\t\t}\n\n\t\tthis.buffer = new bufferType( valueSize * 4 );\n\t\t// layout: [ incoming | accu0 | accu1 | orig ]\n\t\t//\n\t\t// interpolators can use .buffer as their .result\n\t\t// the data then goes to 'incoming'\n\t\t//\n\t\t// 'accu0' and 'accu1' are used frame-interleaved for\n\t\t// the cumulative result and are compared to detect\n\t\t// changes\n\t\t//\n\t\t// 'orig' stores the original state of the property\n\n\t\tthis._mixBufferRegion = mixFunction;\n\n\t\tthis.cumulativeWeight = 0;\n\n\t\tthis.useCount = 0;\n\t\tthis.referenceCount = 0;\n\n\t}\n\n\tObject.assign( PropertyMixer.prototype, {\n\n\t\t// accumulate data in the 'incoming' region into 'accu<i>'\n\t\taccumulate: function ( accuIndex, weight ) {\n\n\t\t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t\t\t// the weight and shouldn't have made the call in the first place\n\n\t\t\tvar buffer = this.buffer,\n\t\t\t\tstride = this.valueSize,\n\t\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\t\tcurrentWeight = this.cumulativeWeight;\n\n\t\t\tif ( currentWeight === 0 ) {\n\n\t\t\t\t// accuN := incoming * weight\n\n\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\t\tbuffer[ offset + i ] = buffer[ i ];\n\n\t\t\t\t}\n\n\t\t\t\tcurrentWeight = weight;\n\n\t\t\t} else {\n\n\t\t\t\t// accuN := accuN + incoming * weight\n\n\t\t\t\tcurrentWeight += weight;\n\t\t\t\tvar mix = weight / currentWeight;\n\t\t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\n\n\t\t\t}\n\n\t\t\tthis.cumulativeWeight = currentWeight;\n\n\t\t},\n\n\t\t// apply the state of 'accu<i>' to the binding when accus differ\n\t\tapply: function ( accuIndex ) {\n\n\t\t\tvar stride = this.valueSize,\n\t\t\t\tbuffer = this.buffer,\n\t\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\t\tweight = this.cumulativeWeight,\n\n\t\t\t\tbinding = this.binding;\n\n\t\t\tthis.cumulativeWeight = 0;\n\n\t\t\tif ( weight < 1 ) {\n\n\t\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\n\t\t\t\tvar originalValueOffset = stride * 3;\n\n\t\t\t\tthis._mixBufferRegion(\n\t\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\n\n\t\t\t}\n\n\t\t\tfor ( var i = stride, e = stride + stride; i !== e; ++ i ) {\n\n\t\t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\n\n\t\t\t\t\t// value has changed -> update scene graph\n\n\t\t\t\t\tbinding.setValue( buffer, offset );\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t// remember the state of the bound property and copy it to both accus\n\t\tsaveOriginalState: function () {\n\n\t\t\tvar binding = this.binding;\n\n\t\t\tvar buffer = this.buffer,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\toriginalValueOffset = stride * 3;\n\n\t\t\tbinding.getValue( buffer, originalValueOffset );\n\n\t\t\t// accu[0..1] := orig -- initially detect changes against the original\n\t\t\tfor ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {\n\n\t\t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\n\n\t\t\t}\n\n\t\t\tthis.cumulativeWeight = 0;\n\n\t\t},\n\n\t\t// apply the state previously taken via 'saveOriginalState' to the binding\n\t\trestoreOriginalState: function () {\n\n\t\t\tvar originalValueOffset = this.valueSize * 3;\n\t\t\tthis.binding.setValue( this.buffer, originalValueOffset );\n\n\t\t},\n\n\n\t\t// mix functions\n\n\t\t_select: function ( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\t\tif ( t >= 0.5 ) {\n\n\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_slerp: function ( buffer, dstOffset, srcOffset, t ) {\n\n\t\t\tQuaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );\n\n\t\t},\n\n\t\t_lerp: function ( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\t\tvar s = 1 - t;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tvar j = dstOffset + i;\n\n\t\t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A reference to a real property in the scene graph.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction Composite( targetGroup, path, optionalParsedPath ) {\n\n\t\tvar parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );\n\n\t\tthis._targetGroup = targetGroup;\n\t\tthis._bindings = targetGroup.subscribe_( path, parsedPath );\n\n\t}\n\n\tObject.assign( Composite.prototype, {\n\n\t\tgetValue: function ( array, offset ) {\n\n\t\t\tthis.bind(); // bind all binding\n\n\t\t\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\n\t\t\t\tbinding = this._bindings[ firstValidIndex ];\n\n\t\t\t// and only call .getValue on the first\n\t\t\tif ( binding !== undefined ) binding.getValue( array, offset );\n\n\t\t},\n\n\t\tsetValue: function ( array, offset ) {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t\t\t\t\t  n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].setValue( array, offset );\n\n\t\t\t}\n\n\t\t},\n\n\t\tbind: function () {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t\t\t\t\t  n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].bind();\n\n\t\t\t}\n\n\t\t},\n\n\t\tunbind: function () {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t\t\t\t\t  n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].unbind();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\n\tfunction PropertyBinding( rootNode, path, parsedPath ) {\n\n\t\tthis.path = path;\n\t\tthis.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );\n\n\t\tthis.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;\n\n\t\tthis.rootNode = rootNode;\n\n\t}\n\n\tObject.assign( PropertyBinding, {\n\n\t\tComposite: Composite,\n\n\t\tcreate: function ( root, path, parsedPath ) {\n\n\t\t\tif ( ! ( root && root.isAnimationObjectGroup ) ) {\n\n\t\t\t\treturn new PropertyBinding( root, path, parsedPath );\n\n\t\t\t} else {\n\n\t\t\t\treturn new PropertyBinding.Composite( root, path, parsedPath );\n\n\t\t\t}\n\n\t\t},\n\n\t\t/**\n\t\t * Replaces spaces with underscores and removes unsupported characters from\n\t\t * node names, to ensure compatibility with parseTrackName().\n\t\t *\n\t\t * @param  {string} name Node name to be sanitized.\n\t\t * @return {string}\n\t\t */\n\t\tsanitizeNodeName: function ( name ) {\n\n\t\t\treturn name.replace( /\\s/g, '_' ).replace( /[^\\w-]/g, '' );\n\n\t\t},\n\n\t\tparseTrackName: function () {\n\n\t\t\t// Parent directories, delimited by '/' or ':'. Currently unused, but must\n\t\t\t// be matched to parse the rest of the track name.\n\t\t\tvar directoryRe = /((?:[\\w-]+[\\/:])*)/;\n\n\t\t\t// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\n\t\t\tvar nodeRe = /([\\w-\\.]+)?/;\n\n\t\t\t// Object on target node, and accessor. Name may contain only word\n\t\t\t// characters. Accessor may contain any character except closing bracket.\n\t\t\tvar objectRe = /(?:\\.([\\w-]+)(?:\\[(.+)\\])?)?/;\n\n\t\t\t// Property and accessor. May contain only word characters. Accessor may\n\t\t\t// contain any non-bracket characters.\n\t\t\tvar propertyRe = /\\.([\\w-]+)(?:\\[(.+)\\])?/;\n\n\t\t\tvar trackRe = new RegExp(''\n\t\t\t\t+ '^'\n\t\t\t\t+ directoryRe.source\n\t\t\t\t+ nodeRe.source\n\t\t\t\t+ objectRe.source\n\t\t\t\t+ propertyRe.source\n\t\t\t\t+ '$'\n\t\t\t);\n\n\t\t\tvar supportedObjectNames = [ 'material', 'materials', 'bones' ];\n\n\t\t\treturn function ( trackName ) {\n\n\t\t\t\t\tvar matches = trackRe.exec( trackName );\n\n\t\t\t\t\tif ( ! matches ) {\n\n\t\t\t\t\t\tthrow new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar results = {\n\t\t\t\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t\t\t\t\t\tnodeName: matches[ 2 ],\n\t\t\t\t\t\tobjectName: matches[ 3 ],\n\t\t\t\t\t\tobjectIndex: matches[ 4 ],\n\t\t\t\t\t\tpropertyName: matches[ 5 ],     // required\n\t\t\t\t\t\tpropertyIndex: matches[ 6 ]\n\t\t\t\t\t};\n\n\t\t\t\t\tvar lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );\n\n\t\t\t\t\tif ( lastDot !== undefined && lastDot !== -1 ) {\n\n\t\t\t\t\t\tvar objectName = results.nodeName.substring( lastDot + 1 );\n\n\t\t\t\t\t\t// Object names must be checked against a whitelist. Otherwise, there\n\t\t\t\t\t\t// is no way to parse 'foo.bar.baz': 'baz' must be a property, but\n\t\t\t\t\t\t// 'bar' could be the objectName, or part of a nodeName (which can\n\t\t\t\t\t\t// include '.' characters).\n\t\t\t\t\t\tif ( supportedObjectNames.indexOf( objectName ) !== -1 ) {\n\n\t\t\t\t\t\t\tresults.nodeName = results.nodeName.substring( 0, lastDot );\n\t\t\t\t\t\t\tresults.objectName = objectName;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( results.propertyName === null || results.propertyName.length === 0 ) {\n\n\t\t\t\t\t\tthrow new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn results;\n\n\t\t\t\t};\n\n\t\t}(),\n\n\t\tfindNode: function ( root, nodeName ) {\n\n\t\t\tif ( ! nodeName || nodeName === \"\" || nodeName === \"root\" || nodeName === \".\" || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {\n\n\t\t\t\treturn root;\n\n\t\t\t}\n\n\t\t\t// search into skeleton bones.\n\t\t\tif ( root.skeleton ) {\n\n\t\t\t\tvar searchSkeleton = function ( skeleton ) {\n\n\t\t\t\t\tfor ( var i = 0; i < skeleton.bones.length; i ++ ) {\n\n\t\t\t\t\t\tvar bone = skeleton.bones[ i ];\n\n\t\t\t\t\t\tif ( bone.name === nodeName ) {\n\n\t\t\t\t\t\t\treturn bone;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t};\n\n\t\t\t\tvar bone = searchSkeleton( root.skeleton );\n\n\t\t\t\tif ( bone ) {\n\n\t\t\t\t\treturn bone;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// search into node subtree.\n\t\t\tif ( root.children ) {\n\n\t\t\t\tvar searchNodeSubtree = function ( children ) {\n\n\t\t\t\t\tfor ( var i = 0; i < children.length; i ++ ) {\n\n\t\t\t\t\t\tvar childNode = children[ i ];\n\n\t\t\t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\n\n\t\t\t\t\t\t\treturn childNode;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar result = searchNodeSubtree( childNode.children );\n\n\t\t\t\t\t\tif ( result ) return result;\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t};\n\n\t\t\t\tvar subTreeNode = searchNodeSubtree( root.children );\n\n\t\t\t\tif ( subTreeNode ) {\n\n\t\t\t\t\treturn subTreeNode;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( PropertyBinding.prototype, { // prototype, continued\n\n\t\t// these are used to \"bind\" a nonexistent property\n\t\t_getValue_unavailable: function () {},\n\t\t_setValue_unavailable: function () {},\n\n\t\tBindingType: {\n\t\t\tDirect: 0,\n\t\t\tEntireArray: 1,\n\t\t\tArrayElement: 2,\n\t\t\tHasFromToArray: 3\n\t\t},\n\n\t\tVersioning: {\n\t\t\tNone: 0,\n\t\t\tNeedsUpdate: 1,\n\t\t\tMatrixWorldNeedsUpdate: 2\n\t\t},\n\n\t\tGetterByBindingType: [\n\n\t\t\tfunction getValue_direct( buffer, offset ) {\n\n\t\t\t\tbuffer[ offset ] = this.node[ this.propertyName ];\n\n\t\t\t},\n\n\t\t\tfunction getValue_array( buffer, offset ) {\n\n\t\t\t\tvar source = this.resolvedProperty;\n\n\t\t\t\tfor ( var i = 0, n = source.length; i !== n; ++ i ) {\n\n\t\t\t\t\tbuffer[ offset ++ ] = source[ i ];\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tfunction getValue_arrayElement( buffer, offset ) {\n\n\t\t\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\n\n\t\t\t},\n\n\t\t\tfunction getValue_toArray( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty.toArray( buffer, offset );\n\n\t\t\t}\n\n\t\t],\n\n\t\tSetterByBindingTypeAndVersioning: [\n\n\t\t\t[\n\t\t\t\t// Direct\n\n\t\t\t\tfunction setValue_direct( buffer, offset ) {\n\n\t\t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_direct_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// EntireArray\n\n\t\t\t\tfunction setValue_array( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_array_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// ArrayElement\n\n\t\t\t\tfunction setValue_arrayElement( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// HasToFromArray\n\n\t\t\t\tfunction setValue_fromArray( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_fromArray_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t]\n\n\t\t],\n\n\t\tgetValue: function getValue_unbound( targetArray, offset ) {\n\n\t\t\tthis.bind();\n\t\t\tthis.getValue( targetArray, offset );\n\n\t\t\t// Note: This class uses a State pattern on a per-method basis:\n\t\t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n\t\t\t// prototype version of these methods with one that represents\n\t\t\t// the bound state. When the property is not found, the methods\n\t\t\t// become no-ops.\n\n\t\t},\n\n\t\tsetValue: function getValue_unbound( sourceArray, offset ) {\n\n\t\t\tthis.bind();\n\t\t\tthis.setValue( sourceArray, offset );\n\n\t\t},\n\n\t\t// create getter / setter pair for a property in the scene graph\n\t\tbind: function () {\n\n\t\t\tvar targetObject = this.node,\n\t\t\t\tparsedPath = this.parsedPath,\n\n\t\t\t\tobjectName = parsedPath.objectName,\n\t\t\t\tpropertyName = parsedPath.propertyName,\n\t\t\t\tpropertyIndex = parsedPath.propertyIndex;\n\n\t\t\tif ( ! targetObject ) {\n\n\t\t\t\ttargetObject = PropertyBinding.findNode(\n\t\t\t\t\t\tthis.rootNode, parsedPath.nodeName ) || this.rootNode;\n\n\t\t\t\tthis.node = targetObject;\n\n\t\t\t}\n\n\t\t\t// set fail state so we can just 'return' on error\n\t\t\tthis.getValue = this._getValue_unavailable;\n\t\t\tthis.setValue = this._setValue_unavailable;\n\n\t\t\t// ensure there is a value node\n\t\t\tif ( ! targetObject ) {\n\n\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\\'t found.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( objectName ) {\n\n\t\t\t\tvar objectIndex = parsedPath.objectIndex;\n\n\t\t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\n\t\t\t\tswitch ( objectName ) {\n\n\t\t\t\t\tcase 'materials':\n\n\t\t\t\t\t\tif ( ! targetObject.material ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( ! targetObject.material.materials ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject.material.materials;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'bones':\n\n\t\t\t\t\t\tif ( ! targetObject.skeleton ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\n\t\t\t\t\t\t// and convert the integer string to a true integer.\n\n\t\t\t\t\t\ttargetObject = targetObject.skeleton.bones;\n\n\t\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\t\tfor ( var i = 0; i < targetObject.length; i ++ ) {\n\n\t\t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\n\n\t\t\t\t\t\t\t\tobjectIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject[ objectName ];\n\n\t\t\t\t}\n\n\n\t\t\t\tif ( objectIndex !== undefined ) {\n\n\t\t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject[ objectIndex ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// resolve property\n\t\t\tvar nodeProperty = targetObject[ propertyName ];\n\n\t\t\tif ( nodeProperty === undefined ) {\n\n\t\t\t\tvar nodeName = parsedPath.nodeName;\n\n\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +\n\t\t\t\t\t'.' + propertyName + ' but it wasn\\'t found.', targetObject );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// determine versioning scheme\n\t\t\tvar versioning = this.Versioning.None;\n\n\t\t\tif ( targetObject.needsUpdate !== undefined ) { // material\n\n\t\t\t\tversioning = this.Versioning.NeedsUpdate;\n\t\t\t\tthis.targetObject = targetObject;\n\n\t\t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\n\n\t\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\t\t\t\tthis.targetObject = targetObject;\n\n\t\t\t}\n\n\t\t\t// determine how the property gets bound\n\t\t\tvar bindingType = this.BindingType.Direct;\n\n\t\t\tif ( propertyIndex !== undefined ) {\n\n\t\t\t\t// access a sub element of the property array (only primitives are supported right now)\n\n\t\t\t\tif ( propertyName === \"morphTargetInfluences\" ) {\n\n\t\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\n\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\tif ( ! targetObject.geometry ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( targetObject.geometry.isBufferGeometry ) {\n\n\t\t\t\t\t\tif ( ! targetObject.geometry.morphAttributes ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphAttributes.position.length; i ++ ) {\n\n\t\t\t\t\t\t\tif ( targetObject.geometry.morphAttributes.position[ i ].name === propertyIndex ) {\n\n\t\t\t\t\t\t\t\tpropertyIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( ! targetObject.geometry.morphTargets ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {\n\n\t\t\t\t\t\t\tif ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {\n\n\t\t\t\t\t\t\t\tpropertyIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tbindingType = this.BindingType.ArrayElement;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t\tthis.propertyIndex = propertyIndex;\n\n\t\t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\n\n\t\t\t\t// must use copy for Object3D.Euler/Quaternion\n\n\t\t\t\tbindingType = this.BindingType.HasFromToArray;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t\t} else if ( Array.isArray( nodeProperty ) ) {\n\n\t\t\t\tbindingType = this.BindingType.EntireArray;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t\t} else {\n\n\t\t\t\tthis.propertyName = propertyName;\n\n\t\t\t}\n\n\t\t\t// select getter / setter\n\t\t\tthis.getValue = this.GetterByBindingType[ bindingType ];\n\t\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\n\n\t\t},\n\n\t\tunbind: function () {\n\n\t\t\tthis.node = null;\n\n\t\t\t// back to the prototype version of getValue / setValue\n\t\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\t\t\tthis.getValue = this._getValue_unbound;\n\t\t\tthis.setValue = this._setValue_unbound;\n\n\t\t}\n\n\t} );\n\n\t//!\\ DECLARE ALIAS AFTER assign prototype !\n\tObject.assign( PropertyBinding.prototype, {\n\n\t\t// initial state of these methods that calls 'bind'\n\t\t_getValue_unbound: PropertyBinding.prototype.getValue,\n\t\t_setValue_unbound: PropertyBinding.prototype.setValue,\n\n\t} );\n\n\t/**\n\t *\n\t * A group of objects that receives a shared animation state.\n\t *\n\t * Usage:\n\t *\n\t * \t-\tAdd objects you would otherwise pass as 'root' to the\n\t * \t\tconstructor or the .clipAction method of AnimationMixer.\n\t *\n\t * \t-\tInstead pass this object as 'root'.\n\t *\n\t * \t-\tYou can also add and remove objects later when the mixer\n\t * \t\tis running.\n\t *\n\t * Note:\n\t *\n\t *  \tObjects of this class appear as one object to the mixer,\n\t *  \tso cache control of the individual objects must be done\n\t *  \ton the group.\n\t *\n\t * Limitation:\n\t *\n\t * \t- \tThe animated properties must be compatible among the\n\t * \t\tall objects in the group.\n\t *\n\t *  -\tA single property can either be controlled through a\n\t *  \ttarget group or directly, but not both.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction AnimationObjectGroup( var_args ) {\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\t// cached objects followed by the active ones\n\t\tthis._objects = Array.prototype.slice.call( arguments );\n\n\t\tthis.nCachedObjects_ = 0;\t\t\t// threshold\n\t\t// note: read by PropertyBinding.Composite\n\n\t\tvar indices = {};\n\t\tthis._indicesByUUID = indices;\t\t// for bookkeeping\n\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tindices[ arguments[ i ].uuid ] = i;\n\n\t\t}\n\n\t\tthis._paths = [];\t\t\t\t\t// inside: string\n\t\tthis._parsedPaths = [];\t\t\t\t// inside: { we don't care, here }\n\t\tthis._bindings = []; \t\t\t\t// inside: Array< PropertyBinding >\n\t\tthis._bindingsIndicesByPath = {}; \t// inside: indices in these arrays\n\n\t\tvar scope = this;\n\n\t\tthis.stats = {\n\n\t\t\tobjects: {\n\t\t\t\tget total() { return scope._objects.length; },\n\t\t\t\tget inUse() { return this.total - scope.nCachedObjects_; }\n\t\t\t},\n\n\t\t\tget bindingsPerObject() { return scope._bindings.length; }\n\n\t\t};\n\n\t}\n\n\tObject.assign( AnimationObjectGroup.prototype, {\n\n\t\tisAnimationObjectGroup: true,\n\n\t\tadd: function( var_args ) {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tpaths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ],\n\t\t\t\t\tknownObject = undefined;\n\n\t\t\t\tif ( index === undefined ) {\n\n\t\t\t\t\t// unknown object -> add it to the ACTIVE region\n\n\t\t\t\t\tindex = nObjects ++;\n\t\t\t\t\tindicesByUUID[ uuid ] = index;\n\t\t\t\t\tobjects.push( object );\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tbindings[ j ].push(\n\t\t\t\t\t\t\t\tnew PropertyBinding(\n\t\t\t\t\t\t\t\t\tobject, paths[ j ], parsedPaths[ j ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( index < nCachedObjects ) {\n\n\t\t\t\t\tknownObject = objects[ index ];\n\n\t\t\t\t\t// move existing object to the ACTIVE region\n\n\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\n\n\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\n\t\t\t\t\tobjects[ firstActiveIndex ] = object;\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\n\t\t\t\t\t\tif ( binding === undefined ) {\n\n\t\t\t\t\t\t\t// since we do not bother to create new bindings\n\t\t\t\t\t\t\t// for objects that are cached, the binding may\n\t\t\t\t\t\t\t// or may not exist\n\n\t\t\t\t\t\t\tbinding = new PropertyBinding(\n\t\t\t\t\t\t\t\t\tobject, paths[ j ], parsedPaths[ j ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( objects[ index ] !== knownObject ) {\n\n\t\t\t\t\tconsole.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +\n\t\t\t\t\t\t\t'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );\n\n\t\t\t\t} // else the object is already where we want it to be\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\tremove: function( var_args ) {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index !== undefined && index >= nCachedObjects ) {\n\n\t\t\t\t\t// move existing object into the CACHED region\n\n\t\t\t\t\tvar lastCachedIndex = nCachedObjects ++,\n\t\t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\n\n\t\t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = firstActiveObject;\n\n\t\t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\n\t\t\t\t\tobjects[ lastCachedIndex ] = object;\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\n\t\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = firstActive;\n\t\t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\t// remove & forget\n\t\tuncache: function( var_args ) {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index !== undefined ) {\n\n\t\t\t\t\tdelete indicesByUUID[ uuid ];\n\n\t\t\t\t\tif ( index < nCachedObjects ) {\n\n\t\t\t\t\t\t// object is cached, shrink the CACHED region\n\n\t\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\n\t\t\t\t\t\t\tlastIndex = -- nObjects,\n\t\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\t\t// last cached object takes this object's place\n\t\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\t\t// last object goes to the activated slot and pop\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\n\t\t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\n\t\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\n\n\t\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\t\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// object is active, just swap with the last and pop\n\n\t\t\t\t\t\tvar lastIndex = -- nObjects,\n\t\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\n\t\t\t\t\t\tobjects[ index ] = lastObject;\n\t\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[ j ];\n\n\t\t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} // cached or active\n\n\t\t\t\t} // if object is known\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\t// Internal interface used by befriended PropertyBinding.Composite:\n\n\t\tsubscribe_: function ( path, parsedPath ) {\n\n\t\t\t// returns an array of bindings for the given path that is changed\n\t\t\t// according to the contained objects in the group\n\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\t\tindex = indicesByPath[ path ],\n\t\t\t\tbindings = this._bindings;\n\n\t\t\tif ( index !== undefined ) return bindings[ index ];\n\n\t\t\tvar paths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tobjects = this._objects,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tbindingsForPath = new Array( nObjects );\n\n\t\t\tindex = bindings.length;\n\n\t\t\tindicesByPath[ path ] = index;\n\n\t\t\tpaths.push( path );\n\t\t\tparsedPaths.push( parsedPath );\n\t\t\tbindings.push( bindingsForPath );\n\n\t\t\tfor ( var i = nCachedObjects, n = objects.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = objects[ i ];\n\t\t\t\tbindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );\n\n\t\t\t}\n\n\t\t\treturn bindingsForPath;\n\n\t\t},\n\n\t\tunsubscribe_: function ( path ) {\n\n\t\t\t// tells the group to forget about a property path and no longer\n\t\t\t// update the array previously obtained with 'subscribe_'\n\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\t\tindex = indicesByPath[ path ];\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tvar paths = this._paths,\n\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t\t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\n\t\t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\n\n\t\t\t\tindicesByPath[ lastBindingsPath ] = index;\n\n\t\t\t\tbindings[ index ] = lastBindings;\n\t\t\t\tbindings.pop();\n\n\t\t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\n\t\t\t\tparsedPaths.pop();\n\n\t\t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\n\t\t\t\tpaths.pop();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Action provided by AnimationMixer for scheduling clip playback on specific\n\t * objects.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t *\n\t */\n\n\tfunction AnimationAction( mixer, clip, localRoot ) {\n\n\t\tthis._mixer = mixer;\n\t\tthis._clip = clip;\n\t\tthis._localRoot = localRoot || null;\n\n\t\tvar tracks = clip.tracks,\n\t\t\tnTracks = tracks.length,\n\t\t\tinterpolants = new Array( nTracks );\n\n\t\tvar interpolantSettings = {\n\t\t\t\tendingStart: \tZeroCurvatureEnding,\n\t\t\t\tendingEnd:\t\tZeroCurvatureEnding\n\t\t};\n\n\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n\t\t\tvar interpolant = tracks[ i ].createInterpolant( null );\n\t\t\tinterpolants[ i ] = interpolant;\n\t\t\tinterpolant.settings = interpolantSettings;\n\n\t\t}\n\n\t\tthis._interpolantSettings = interpolantSettings;\n\n\t\tthis._interpolants = interpolants;\t// bound by the mixer\n\n\t\t// inside: PropertyMixer (managed by the mixer)\n\t\tthis._propertyBindings = new Array( nTracks );\n\n\t\tthis._cacheIndex = null;\t\t\t// for the memory manager\n\t\tthis._byClipCacheIndex = null;\t\t// for the memory manager\n\n\t\tthis._timeScaleInterpolant = null;\n\t\tthis._weightInterpolant = null;\n\n\t\tthis.loop = LoopRepeat;\n\t\tthis._loopCount = -1;\n\n\t\t// global mixer time when the action is to be started\n\t\t// it's set back to 'null' upon start of the action\n\t\tthis._startTime = null;\n\n\t\t// scaled local time of the action\n\t\t// gets clamped or wrapped to 0..clip.duration according to loop\n\t\tthis.time = 0;\n\n\t\tthis.timeScale = 1;\n\t\tthis._effectiveTimeScale = 1;\n\n\t\tthis.weight = 1;\n\t\tthis._effectiveWeight = 1;\n\n\t\tthis.repetitions = Infinity; \t\t// no. of repetitions when looping\n\n\t\tthis.paused = false;\t\t\t\t// true -> zero effective time scale\n\t\tthis.enabled = true;\t\t\t\t// false -> zero effective weight\n\n\t\tthis.clampWhenFinished \t= false;\t// keep feeding the last frame?\n\n\t\tthis.zeroSlopeAtStart \t= true;\t\t// for smooth interpolation w/o separate\n\t\tthis.zeroSlopeAtEnd\t\t= true;\t\t// clips for start, loop and end\n\n\t}\n\n\tObject.assign( AnimationAction.prototype, {\n\n\t\t// State & Scheduling\n\n\t\tplay: function() {\n\n\t\t\tthis._mixer._activateAction( this );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tstop: function() {\n\n\t\t\tthis._mixer._deactivateAction( this );\n\n\t\t\treturn this.reset();\n\n\t\t},\n\n\t\treset: function() {\n\n\t\t\tthis.paused = false;\n\t\t\tthis.enabled = true;\n\n\t\t\tthis.time = 0;\t\t\t// restart clip\n\t\t\tthis._loopCount = -1;\t// forget previous loops\n\t\t\tthis._startTime = null;\t// forget scheduling\n\n\t\t\treturn this.stopFading().stopWarping();\n\n\t\t},\n\n\t\tisRunning: function() {\n\n\t\t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\n\t\t\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\n\n\t\t},\n\n\t\t// return true when play has been called\n\t\tisScheduled: function() {\n\n\t\t\treturn this._mixer._isActiveAction( this );\n\n\t\t},\n\n\t\tstartAt: function( time ) {\n\n\t\t\tthis._startTime = time;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetLoop: function( mode, repetitions ) {\n\n\t\t\tthis.loop = mode;\n\t\t\tthis.repetitions = repetitions;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Weight\n\n\t\t// set the weight stopping any scheduled fading\n\t\t// although .enabled = false yields an effective weight of zero, this\n\t\t// method does *not* change .enabled, because it would be confusing\n\t\tsetEffectiveWeight: function( weight ) {\n\n\t\t\tthis.weight = weight;\n\n\t\t\t// note: same logic as when updated at runtime\n\t\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\n\t\t\treturn this.stopFading();\n\n\t\t},\n\n\t\t// return the weight considering fading and .enabled\n\t\tgetEffectiveWeight: function() {\n\n\t\t\treturn this._effectiveWeight;\n\n\t\t},\n\n\t\tfadeIn: function( duration ) {\n\n\t\t\treturn this._scheduleFading( duration, 0, 1 );\n\n\t\t},\n\n\t\tfadeOut: function( duration ) {\n\n\t\t\treturn this._scheduleFading( duration, 1, 0 );\n\n\t\t},\n\n\t\tcrossFadeFrom: function( fadeOutAction, duration, warp ) {\n\n\t\t\tfadeOutAction.fadeOut( duration );\n\t\t\tthis.fadeIn( duration );\n\n\t\t\tif( warp ) {\n\n\t\t\t\tvar fadeInDuration = this._clip.duration,\n\t\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\n\t\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\n\t\t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\n\t\t\t\tthis.warp( endStartRatio, 1.0, duration );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcrossFadeTo: function( fadeInAction, duration, warp ) {\n\n\t\t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\n\n\t\t},\n\n\t\tstopFading: function() {\n\n\t\t\tvar weightInterpolant = this._weightInterpolant;\n\n\t\t\tif ( weightInterpolant !== null ) {\n\n\t\t\t\tthis._weightInterpolant = null;\n\t\t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Time Scale Control\n\n\t\t// set the time scale stopping any scheduled warping\n\t\t// although .paused = true yields an effective time scale of zero, this\n\t\t// method does *not* change .paused, because it would be confusing\n\t\tsetEffectiveTimeScale: function( timeScale ) {\n\n\t\t\tthis.timeScale = timeScale;\n\t\t\tthis._effectiveTimeScale = this.paused ? 0 :timeScale;\n\n\t\t\treturn this.stopWarping();\n\n\t\t},\n\n\t\t// return the time scale considering warping and .paused\n\t\tgetEffectiveTimeScale: function() {\n\n\t\t\treturn this._effectiveTimeScale;\n\n\t\t},\n\n\t\tsetDuration: function( duration ) {\n\n\t\t\tthis.timeScale = this._clip.duration / duration;\n\n\t\t\treturn this.stopWarping();\n\n\t\t},\n\n\t\tsyncWith: function( action ) {\n\n\t\t\tthis.time = action.time;\n\t\t\tthis.timeScale = action.timeScale;\n\n\t\t\treturn this.stopWarping();\n\n\t\t},\n\n\t\thalt: function( duration ) {\n\n\t\t\treturn this.warp( this._effectiveTimeScale, 0, duration );\n\n\t\t},\n\n\t\twarp: function( startTimeScale, endTimeScale, duration ) {\n\n\t\t\tvar mixer = this._mixer, now = mixer.time,\n\t\t\t\tinterpolant = this._timeScaleInterpolant,\n\n\t\t\t\ttimeScale = this.timeScale;\n\n\t\t\tif ( interpolant === null ) {\n\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._timeScaleInterpolant = interpolant;\n\n\t\t\t}\n\n\t\t\tvar times = interpolant.parameterPositions,\n\t\t\t\tvalues = interpolant.sampleValues;\n\n\t\t\ttimes[ 0 ] = now;\n\t\t\ttimes[ 1 ] = now + duration;\n\n\t\t\tvalues[ 0 ] = startTimeScale / timeScale;\n\t\t\tvalues[ 1 ] = endTimeScale / timeScale;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tstopWarping: function() {\n\n\t\t\tvar timeScaleInterpolant = this._timeScaleInterpolant;\n\n\t\t\tif ( timeScaleInterpolant !== null ) {\n\n\t\t\t\tthis._timeScaleInterpolant = null;\n\t\t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Object Accessors\n\n\t\tgetMixer: function() {\n\n\t\t\treturn this._mixer;\n\n\t\t},\n\n\t\tgetClip: function() {\n\n\t\t\treturn this._clip;\n\n\t\t},\n\n\t\tgetRoot: function() {\n\n\t\t\treturn this._localRoot || this._mixer._root;\n\n\t\t},\n\n\t\t// Interna\n\n\t\t_update: function( time, deltaTime, timeDirection, accuIndex ) {\n\n\t\t\t// called by the mixer\n\n\t\t\tif ( ! this.enabled ) {\n\n\t\t\t\t// call ._updateWeight() to update ._effectiveWeight\n\n\t\t\t\tthis._updateWeight( time );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar startTime = this._startTime;\n\n\t\t\tif ( startTime !== null ) {\n\n\t\t\t\t// check for scheduled start of action\n\n\t\t\t\tvar timeRunning = ( time - startTime ) * timeDirection;\n\t\t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\n\n\t\t\t\t\treturn; // yet to come / don't decide when delta = 0\n\n\t\t\t\t}\n\n\t\t\t\t// start\n\n\t\t\t\tthis._startTime = null; // unschedule\n\t\t\t\tdeltaTime = timeDirection * timeRunning;\n\n\t\t\t}\n\n\t\t\t// apply time scale and advance time\n\n\t\t\tdeltaTime *= this._updateTimeScale( time );\n\t\t\tvar clipTime = this._updateTime( deltaTime );\n\n\t\t\t// note: _updateTime may disable the action resulting in\n\t\t\t// an effective weight of 0\n\n\t\t\tvar weight = this._updateWeight( time );\n\n\t\t\tif ( weight > 0 ) {\n\n\t\t\t\tvar interpolants = this._interpolants;\n\t\t\t\tvar propertyMixers = this._propertyBindings;\n\n\t\t\t\tfor ( var j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n\t\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_updateWeight: function( time ) {\n\n\t\t\tvar weight = 0;\n\n\t\t\tif ( this.enabled ) {\n\n\t\t\t\tweight = this.weight;\n\t\t\t\tvar interpolant = this._weightInterpolant;\n\n\t\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\t\tweight *= interpolantValue;\n\n\t\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\t\tthis.stopFading();\n\n\t\t\t\t\t\tif ( interpolantValue === 0 ) {\n\n\t\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\t\tthis.enabled = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._effectiveWeight = weight;\n\t\t\treturn weight;\n\n\t\t},\n\n\t\t_updateTimeScale: function( time ) {\n\n\t\t\tvar timeScale = 0;\n\n\t\t\tif ( ! this.paused ) {\n\n\t\t\t\ttimeScale = this.timeScale;\n\n\t\t\t\tvar interpolant = this._timeScaleInterpolant;\n\n\t\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\t\ttimeScale *= interpolantValue;\n\n\t\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\t\tthis.stopWarping();\n\n\t\t\t\t\t\tif ( timeScale === 0 ) {\n\n\t\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\t\tthis.paused = true;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\t\tthis.timeScale = timeScale;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._effectiveTimeScale = timeScale;\n\t\t\treturn timeScale;\n\n\t\t},\n\n\t\t_updateTime: function( deltaTime ) {\n\n\t\t\tvar time = this.time + deltaTime;\n\n\t\t\tif ( deltaTime === 0 ) return time;\n\n\t\t\tvar duration = this._clip.duration,\n\n\t\t\t\tloop = this.loop,\n\t\t\t\tloopCount = this._loopCount;\n\n\t\t\tif ( loop === LoopOnce ) {\n\n\t\t\t\tif ( loopCount === -1 ) {\n\t\t\t\t\t// just started\n\n\t\t\t\t\tthis._loopCount = 0;\n\t\t\t\t\tthis._setEndings( true, true, false );\n\n\t\t\t\t}\n\n\t\t\t\thandle_stop: {\n\n\t\t\t\t\tif ( time >= duration ) {\n\n\t\t\t\t\t\ttime = duration;\n\n\t\t\t\t\t} else if ( time < 0 ) {\n\n\t\t\t\t\t\ttime = 0;\n\n\t\t\t\t\t} else break handle_stop;\n\n\t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\t\telse this.enabled = false;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\tdirection: deltaTime < 0 ? -1 : 1\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} else { // repetitive Repeat or PingPong\n\n\t\t\t\tvar pingPong = ( loop === LoopPingPong );\n\n\t\t\t\tif ( loopCount === -1 ) {\n\t\t\t\t\t// just started\n\n\t\t\t\t\tif ( deltaTime >= 0 ) {\n\n\t\t\t\t\t\tloopCount = 0;\n\n\t\t\t\t\t\tthis._setEndings(\n\t\t\t\t\t\t\t\ttrue, this.repetitions === 0, pingPong );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t\t// so leave loopCount at -1\n\n\t\t\t\t\t\tthis._setEndings(\n\t\t\t\t\t\t\t\tthis.repetitions === 0, true, pingPong );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( time >= duration || time < 0 ) {\n\t\t\t\t\t// wrap around\n\n\t\t\t\t\tvar loopDelta = Math.floor( time / duration ); // signed\n\t\t\t\t\ttime -= duration * loopDelta;\n\n\t\t\t\t\tloopCount += Math.abs( loopDelta );\n\n\t\t\t\t\tvar pending = this.repetitions - loopCount;\n\n\t\t\t\t\tif ( pending < 0 ) {\n\t\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\n\t\t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\t\t\telse this.enabled = false;\n\n\t\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : -1\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// keep running\n\n\t\t\t\t\t\tif ( pending === 0 ) {\n\t\t\t\t\t\t\t// entering the last round\n\n\t\t\t\t\t\t\tvar atStart = deltaTime < 0;\n\t\t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tthis._setEndings( false, false, pingPong );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._loopCount = loopCount;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\n\t\t\t\t\t// invert time for the \"pong round\"\n\n\t\t\t\t\tthis.time = time;\n\t\t\t\t\treturn duration - time;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.time = time;\n\t\t\treturn time;\n\n\t\t},\n\n\t\t_setEndings: function( atStart, atEnd, pingPong ) {\n\n\t\t\tvar settings = this._interpolantSettings;\n\n\t\t\tif ( pingPong ) {\n\n\t\t\t\tsettings.endingStart \t= ZeroSlopeEnding;\n\t\t\t\tsettings.endingEnd\t\t= ZeroSlopeEnding;\n\n\t\t\t} else {\n\n\t\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\n\t\t\t\tif ( atStart ) {\n\n\t\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ?\n\t\t\t\t\t\t\tZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsettings.endingStart = WrapAroundEnding;\n\n\t\t\t\t}\n\n\t\t\t\tif ( atEnd ) {\n\n\t\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ?\n\t\t\t\t\t\t\tZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsettings.endingEnd \t = WrapAroundEnding;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_scheduleFading: function( duration, weightNow, weightThen ) {\n\n\t\t\tvar mixer = this._mixer, now = mixer.time,\n\t\t\t\tinterpolant = this._weightInterpolant;\n\n\t\t\tif ( interpolant === null ) {\n\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._weightInterpolant = interpolant;\n\n\t\t\t}\n\n\t\t\tvar times = interpolant.parameterPositions,\n\t\t\t\tvalues = interpolant.sampleValues;\n\n\t\t\ttimes[ 0 ] = now; \t\t\t\tvalues[ 0 ] = weightNow;\n\t\t\ttimes[ 1 ] = now + duration;\tvalues[ 1 ] = weightThen;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Player for AnimationClips.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction AnimationMixer( root ) {\n\n\t\tthis._root = root;\n\t\tthis._initMemoryManager();\n\t\tthis._accuIndex = 0;\n\n\t\tthis.time = 0;\n\n\t\tthis.timeScale = 1.0;\n\n\t}\n\n\tObject.assign( AnimationMixer.prototype, EventDispatcher.prototype, {\n\n\t\t_bindAction: function ( action, prototypeAction ) {\n\n\t\t\tvar root = action._localRoot || this._root,\n\t\t\t\ttracks = action._clip.tracks,\n\t\t\t\tnTracks = tracks.length,\n\t\t\t\tbindings = action._propertyBindings,\n\t\t\t\tinterpolants = action._interpolants,\n\t\t\t\trootUuid = root.uuid,\n\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingsByName = bindingsByRoot[ rootUuid ];\n\n\t\t\tif ( bindingsByName === undefined ) {\n\n\t\t\t\tbindingsByName = {};\n\t\t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n\t\t\t\tvar track = tracks[ i ],\n\t\t\t\t\ttrackName = track.name,\n\t\t\t\t\tbinding = bindingsByName[ trackName ];\n\n\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbinding = bindings[ i ];\n\n\t\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\t\t// existing binding, make sure the cache knows\n\n\t\t\t\t\t\tif ( binding._cacheIndex === null ) {\n\n\t\t\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar path = prototypeAction && prototypeAction.\n\t\t\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\n\n\t\t\t\t\tbinding = new PropertyMixer(\n\t\t\t\t\t\tPropertyBinding.create( root, trackName, path ),\n\t\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\n\n\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t\t}\n\n\t\t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\n\n\t\t\t}\n\n\t\t},\n\n\t\t_activateAction: function ( action ) {\n\n\t\t\tif ( ! this._isActiveAction( action ) ) {\n\n\t\t\t\tif ( action._cacheIndex === null ) {\n\n\t\t\t\t\t// this action has been forgotten by the cache, but the user\n\t\t\t\t\t// appears to be still using it -> rebind\n\n\t\t\t\t\tvar rootUuid = ( action._localRoot || this._root ).uuid,\n\t\t\t\t\t\tclipUuid = action._clip.uuid,\n\t\t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\t\t\tthis._bindAction( action,\n\t\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\n\n\t\t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\n\n\t\t\t\t}\n\n\t\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\t\t// increment reference counts / sort out state\n\t\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\t\tif ( binding.useCount ++ === 0 ) {\n\n\t\t\t\t\t\tthis._lendBinding( binding );\n\t\t\t\t\t\tbinding.saveOriginalState();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis._lendAction( action );\n\n\t\t\t}\n\n\t\t},\n\n\t\t_deactivateAction: function ( action ) {\n\n\t\t\tif ( this._isActiveAction( action ) ) {\n\n\t\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\t\t// decrement reference counts / sort out state\n\t\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\t\tif ( -- binding.useCount === 0 ) {\n\n\t\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\t\tthis._takeBackBinding( binding );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis._takeBackAction( action );\n\n\t\t\t}\n\n\t\t},\n\n\t\t// Memory manager\n\n\t\t_initMemoryManager: function () {\n\n\t\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\t\t\tthis._nActiveActions = 0;\n\n\t\t\tthis._actionsByClip = {};\n\t\t\t// inside:\n\t\t\t// {\n\t\t\t// \t\tknownActions: Array< AnimationAction >\t- used as prototypes\n\t\t\t// \t\tactionByRoot: AnimationAction\t\t\t- lookup\n\t\t\t// }\n\n\n\t\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\t\t\tthis._nActiveBindings = 0;\n\n\t\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\n\t\t\tthis._controlInterpolants = []; // same game as above\n\t\t\tthis._nActiveControlInterpolants = 0;\n\n\t\t\tvar scope = this;\n\n\t\t\tthis.stats = {\n\n\t\t\t\tactions: {\n\t\t\t\t\tget total() { return scope._actions.length; },\n\t\t\t\t\tget inUse() { return scope._nActiveActions; }\n\t\t\t\t},\n\t\t\t\tbindings: {\n\t\t\t\t\tget total() { return scope._bindings.length; },\n\t\t\t\t\tget inUse() { return scope._nActiveBindings; }\n\t\t\t\t},\n\t\t\t\tcontrolInterpolants: {\n\t\t\t\t\tget total() { return scope._controlInterpolants.length; },\n\t\t\t\t\tget inUse() { return scope._nActiveControlInterpolants; }\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t},\n\n\t\t// Memory management for AnimationAction objects\n\n\t\t_isActiveAction: function ( action ) {\n\n\t\t\tvar index = action._cacheIndex;\n\t\t\treturn index !== null && index < this._nActiveActions;\n\n\t\t},\n\n\t\t_addInactiveAction: function ( action, clipUuid, rootUuid ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip === undefined ) {\n\n\t\t\t\tactionsForClip = {\n\n\t\t\t\t\tknownActions: [ action ],\n\t\t\t\t\tactionByRoot: {}\n\n\t\t\t\t};\n\n\t\t\t\taction._byClipCacheIndex = 0;\n\n\t\t\t\tactionsByClip[ clipUuid ] = actionsForClip;\n\n\t\t\t} else {\n\n\t\t\t\tvar knownActions = actionsForClip.knownActions;\n\n\t\t\t\taction._byClipCacheIndex = knownActions.length;\n\t\t\t\tknownActions.push( action );\n\n\t\t\t}\n\n\t\t\taction._cacheIndex = actions.length;\n\t\t\tactions.push( action );\n\n\t\t\tactionsForClip.actionByRoot[ rootUuid ] = action;\n\n\t\t},\n\n\t\t_removeInactiveAction: function ( action ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ],\n\t\t\t\tcacheIndex = action._cacheIndex;\n\n\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\tactions.pop();\n\n\t\t\taction._cacheIndex = null;\n\n\n\t\t\tvar clipUuid = action._clip.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ],\n\t\t\t\tknownActionsForClip = actionsForClip.knownActions,\n\n\t\t\t\tlastKnownAction =\n\t\t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\n\n\t\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\n\t\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t\t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\n\t\t\tknownActionsForClip.pop();\n\n\t\t\taction._byClipCacheIndex = null;\n\n\n\t\t\tvar actionByRoot = actionsForClip.actionByRoot,\n\t\t\t\trootUuid = ( action._localRoot || this._root ).uuid;\n\n\t\t\tdelete actionByRoot[ rootUuid ];\n\n\t\t\tif ( knownActionsForClip.length === 0 ) {\n\n\t\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t\t}\n\n\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t},\n\n\t\t_removeInactiveBindingsForAction: function ( action ) {\n\n\t\t\tvar bindings = action._propertyBindings;\n\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\tif ( -- binding.referenceCount === 0 ) {\n\n\t\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_lendAction: function ( action ) {\n\n\t\t\t// [ active actions |  inactive actions  ]\n\t\t\t// [  active actions >| inactive actions ]\n\t\t\t//                 s        a\n\t\t\t//                  <-swap->\n\t\t\t//                 a        s\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\t\tlastActiveIndex = this._nActiveActions ++,\n\n\t\t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\n\n\t\t\taction._cacheIndex = lastActiveIndex;\n\t\t\tactions[ lastActiveIndex ] = action;\n\n\t\t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t\t\tactions[ prevIndex ] = firstInactiveAction;\n\n\t\t},\n\n\t\t_takeBackAction: function ( action ) {\n\n\t\t\t// [  active actions  | inactive actions ]\n\t\t\t// [ active actions |< inactive actions  ]\n\t\t\t//        a        s\n\t\t\t//         <-swap->\n\t\t\t//        s        a\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveActions,\n\n\t\t\t\tlastActiveAction = actions[ firstInactiveIndex ];\n\n\t\t\taction._cacheIndex = firstInactiveIndex;\n\t\t\tactions[ firstInactiveIndex ] = action;\n\n\t\t\tlastActiveAction._cacheIndex = prevIndex;\n\t\t\tactions[ prevIndex ] = lastActiveAction;\n\n\t\t},\n\n\t\t// Memory management for PropertyMixer objects\n\n\t\t_addInactiveBinding: function ( binding, rootUuid, trackName ) {\n\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\t\tbindings = this._bindings;\n\n\t\t\tif ( bindingByName === undefined ) {\n\n\t\t\t\tbindingByName = {};\n\t\t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\n\n\t\t\t}\n\n\t\t\tbindingByName[ trackName ] = binding;\n\n\t\t\tbinding._cacheIndex = bindings.length;\n\t\t\tbindings.push( binding );\n\n\t\t},\n\n\t\t_removeInactiveBinding: function ( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tpropBinding = binding.binding,\n\t\t\t\trootUuid = propBinding.rootNode.uuid,\n\t\t\t\ttrackName = propBinding.path,\n\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\n\t\t\t\tcacheIndex = binding._cacheIndex;\n\n\t\t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t\t\tbindings[ cacheIndex ] = lastInactiveBinding;\n\t\t\tbindings.pop();\n\n\t\t\tdelete bindingByName[ trackName ];\n\n\t\t\tremove_empty_map: {\n\n\t\t\t\tfor ( var _ in bindingByName ) break remove_empty_map;\n\n\t\t\t\tdelete bindingsByRoot[ rootUuid ];\n\n\t\t\t}\n\n\t\t},\n\n\t\t_lendBinding: function ( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\t\tlastActiveIndex = this._nActiveBindings ++,\n\n\t\t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\n\n\t\t\tbinding._cacheIndex = lastActiveIndex;\n\t\t\tbindings[ lastActiveIndex ] = binding;\n\n\t\t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[ prevIndex ] = firstInactiveBinding;\n\n\t\t},\n\n\t\t_takeBackBinding: function ( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveBindings,\n\n\t\t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\n\n\t\t\tbinding._cacheIndex = firstInactiveIndex;\n\t\t\tbindings[ firstInactiveIndex ] = binding;\n\n\t\t\tlastActiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[ prevIndex ] = lastActiveBinding;\n\n\t\t},\n\n\n\t\t// Memory management of Interpolants for weight and time scale\n\n\t\t_lendControlInterpolant: function () {\n\n\t\t\tvar interpolants = this._controlInterpolants,\n\t\t\t\tlastActiveIndex = this._nActiveControlInterpolants ++,\n\t\t\t\tinterpolant = interpolants[ lastActiveIndex ];\n\n\t\t\tif ( interpolant === undefined ) {\n\n\t\t\t\tinterpolant = new LinearInterpolant(\n\t\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\n\t\t\t\t\t1, this._controlInterpolantsResultBuffer );\n\n\t\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t\t\t\tinterpolants[ lastActiveIndex ] = interpolant;\n\n\t\t\t}\n\n\t\t\treturn interpolant;\n\n\t\t},\n\n\t\t_takeBackControlInterpolant: function ( interpolant ) {\n\n\t\t\tvar interpolants = this._controlInterpolants,\n\t\t\t\tprevIndex = interpolant.__cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\n\n\t\t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\n\n\t\t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t\t\tinterpolants[ firstInactiveIndex ] = interpolant;\n\n\t\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t\t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\n\n\t\t},\n\n\t\t_controlInterpolantsResultBuffer: new Float32Array( 1 ),\n\n\t\t// return an action for a clip optionally using a custom root target\n\t\t// object (this method allocates a lot of dynamic memory in case a\n\t\t// previously unknown clip/root combination is specified)\n\t\tclipAction: function ( clip, optionalRoot ) {\n\n\t\t\tvar root = optionalRoot || this._root,\n\t\t\t\trootUuid = root.uuid,\n\n\t\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n\t\t\t\tclipUuid = clipObject !== null ? clipObject.uuid : clip,\n\n\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ],\n\t\t\t\tprototypeAction = null;\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\tvar existingAction =\n\t\t\t\t\t\tactionsForClip.actionByRoot[ rootUuid ];\n\n\t\t\t\tif ( existingAction !== undefined ) {\n\n\t\t\t\t\treturn existingAction;\n\n\t\t\t\t}\n\n\t\t\t\t// we know the clip, so we don't have to parse all\n\t\t\t\t// the bindings again but can just copy\n\t\t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\n\n\t\t\t\t// also, take the clip from the prototype action\n\t\t\t\tif ( clipObject === null )\n\t\t\t\t\tclipObject = prototypeAction._clip;\n\n\t\t\t}\n\n\t\t\t// clip must be known when specified via string\n\t\t\tif ( clipObject === null ) return null;\n\n\t\t\t// allocate all resources required to run it\n\t\t\tvar newAction = new AnimationAction( this, clipObject, optionalRoot );\n\n\t\t\tthis._bindAction( newAction, prototypeAction );\n\n\t\t\t// and make the action known to the memory manager\n\t\t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\n\n\t\t\treturn newAction;\n\n\t\t},\n\n\t\t// get an existing action\n\t\texistingAction: function ( clip, optionalRoot ) {\n\n\t\t\tvar root = optionalRoot || this._root,\n\t\t\t\trootUuid = root.uuid,\n\n\t\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n\t\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\n\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\t// deactivates all previously scheduled actions\n\t\tstopAllAction: function () {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tnActions = this._nActiveActions,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = this._nActiveBindings;\n\n\t\t\tthis._nActiveActions = 0;\n\t\t\tthis._nActiveBindings = 0;\n\n\t\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n\t\t\t\tactions[ i ].reset();\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n\t\t\t\tbindings[ i ].useCount = 0;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// advance the time and update apply the animation\n\t\tupdate: function ( deltaTime ) {\n\n\t\t\tdeltaTime *= this.timeScale;\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tnActions = this._nActiveActions,\n\n\t\t\t\ttime = this.time += deltaTime,\n\t\t\t\ttimeDirection = Math.sign( deltaTime ),\n\n\t\t\t\taccuIndex = this._accuIndex ^= 1;\n\n\t\t\t// run active actions\n\n\t\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n\t\t\t\tvar action = actions[ i ];\n\n\t\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\n\n\t\t\t}\n\n\t\t\t// update scene graph\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tnBindings = this._nActiveBindings;\n\n\t\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n\t\t\t\tbindings[ i ].apply( accuIndex );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// return this mixer's root target object\n\t\tgetRoot: function () {\n\n\t\t\treturn this._root;\n\n\t\t},\n\n\t\t// free all resources specific to a particular clip\n\t\tuncacheClip: function ( clip ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tclipUuid = clip.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\t// note: just calling _removeInactiveAction would mess up the\n\t\t\t\t// iteration state and also require updating the state we can\n\t\t\t\t// just throw away\n\n\t\t\t\tvar actionsToRemove = actionsForClip.knownActions;\n\n\t\t\t\tfor ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar action = actionsToRemove[ i ];\n\n\t\t\t\t\tthis._deactivateAction( action );\n\n\t\t\t\t\tvar cacheIndex = action._cacheIndex,\n\t\t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\n\n\t\t\t\t\taction._cacheIndex = null;\n\t\t\t\t\taction._byClipCacheIndex = null;\n\n\t\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\t\t\tactions.pop();\n\n\t\t\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t\t\t}\n\n\t\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t\t}\n\n\t\t},\n\n\t\t// free all resources specific to a particular root target object\n\t\tuncacheRoot: function ( root ) {\n\n\t\t\tvar rootUuid = root.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip;\n\n\t\t\tfor ( var clipUuid in actionsByClip ) {\n\n\t\t\t\tvar actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\n\t\t\t\t\taction = actionByRoot[ rootUuid ];\n\n\t\t\t\tif ( action !== undefined ) {\n\n\t\t\t\t\tthis._deactivateAction( action );\n\t\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ];\n\n\t\t\tif ( bindingByName !== undefined ) {\n\n\t\t\t\tfor ( var trackName in bindingByName ) {\n\n\t\t\t\t\tvar binding = bindingByName[ trackName ];\n\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t// remove a targeted clip from the cache\n\t\tuncacheAction: function ( clip, optionalRoot ) {\n\n\t\t\tvar action = this.existingAction( clip, optionalRoot );\n\n\t\t\tif ( action !== null ) {\n\n\t\t\t\tthis._deactivateAction( action );\n\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Uniform( value ) {\n\n\t\tif ( typeof value === 'string' ) {\n\n\t\t\tconsole.warn( 'THREE.Uniform: Type parameter is no longer needed.' );\n\t\t\tvalue = arguments[ 1 ];\n\n\t\t}\n\n\t\tthis.value = value;\n\n\t}\n\n\tUniform.prototype.clone = function () {\n\n\t\treturn new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );\n\n\t};\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InstancedBufferGeometry() {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'InstancedBufferGeometry';\n\t\tthis.maxInstancedCount = undefined;\n\n\t}\n\n\tInstancedBufferGeometry.prototype = Object.assign( Object.create( BufferGeometry.prototype ), {\n\n\t\tconstructor: InstancedBufferGeometry,\n\n\t\tisInstancedBufferGeometry: true,\n\n\t\taddGroup: function ( start, count, materialIndex ) {\n\n\t\t\tthis.groups.push( {\n\n\t\t\t\tstart: start,\n\t\t\t\tcount: count,\n\t\t\t\tmaterialIndex: materialIndex\n\n\t\t\t} );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tvar index = source.index;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tthis.setIndex( index.clone() );\n\n\t\t\t}\n\n\t\t\tvar attributes = source.attributes;\n\n\t\t\tfor ( var name in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ name ];\n\t\t\t\tthis.addAttribute( name, attribute.clone() );\n\n\t\t\t}\n\n\t\t\tvar groups = source.groups;\n\n\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\tvar group = groups[ i ];\n\t\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.data = interleavedBuffer;\n\t\tthis.itemSize = itemSize;\n\t\tthis.offset = offset;\n\n\t\tthis.normalized = normalized === true;\n\n\t}\n\n\tObject.defineProperties( InterleavedBufferAttribute.prototype, {\n\n\t\tcount: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.data.count;\n\n\t\t\t}\n\n\t\t},\n\n\t\tarray: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.data.array;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( InterleavedBufferAttribute.prototype, {\n\n\t\tisInterleavedBufferAttribute: true,\n\n\t\tsetX: function ( index, x ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( index, y ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetZ: function ( index, z ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetW: function ( index, w ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetX: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset ];\n\n\t\t},\n\n\t\tgetY: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\n\n\t\t},\n\n\t\tgetZ: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\n\n\t\t},\n\n\t\tgetW: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\n\n\t\t},\n\n\t\tsetXY: function ( index, x, y ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZ: function ( index, x, y, z ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\t\t\tthis.data.array[ index + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\t\t\tthis.data.array[ index + 2 ] = z;\n\t\t\tthis.data.array[ index + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InterleavedBuffer( array, stride ) {\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.array = array;\n\t\tthis.stride = stride;\n\t\tthis.count = array !== undefined ? array.length / stride : 0;\n\n\t\tthis.dynamic = false;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\n\t\tthis.onUploadCallback = function () {};\n\n\t\tthis.version = 0;\n\n\t}\n\n\tObject.defineProperty( InterleavedBuffer.prototype, 'needsUpdate', {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) this.version ++;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( InterleavedBuffer.prototype, {\n\n\t\tisInterleavedBuffer: true,\n\n\t\tsetArray: function ( array ) {\n\n\t\t\tif ( Array.isArray( array ) ) {\n\n\t\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n\t\t\t}\n\n\t\t\tthis.count = array !== undefined ? array.length / this.stride : 0;\n\t\t\tthis.array = array;\n\n\t\t},\n\n\t\tsetDynamic: function ( value ) {\n\n\t\t\tthis.dynamic = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.array = new source.array.constructor( source.array );\n\t\t\tthis.count = source.count;\n\t\t\tthis.stride = source.stride;\n\t\t\tthis.dynamic = source.dynamic;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\t\tindex1 *= this.stride;\n\t\t\tindex2 *= attribute.stride;\n\n\t\t\tfor ( var i = 0, l = this.stride; i < l; i ++ ) {\n\n\t\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tset: function ( value, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tthis.array.set( value, offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tonUpload: function ( callback ) {\n\n\t\t\tthis.onUploadCallback = callback;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {\n\n\t\tInterleavedBuffer.call( this, array, stride );\n\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n\t}\n\n\tInstancedInterleavedBuffer.prototype = Object.assign( Object.create( InterleavedBuffer.prototype ), {\n\n\t\tconstructor: InstancedInterleavedBuffer,\n\n\t\tisInstancedInterleavedBuffer: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tInterleavedBuffer.prototype.copy.call( this, source );\n\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InstancedBufferAttribute( array, itemSize, meshPerAttribute ) {\n\n\t\tBufferAttribute.call( this, array, itemSize );\n\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n\t}\n\n\tInstancedBufferAttribute.prototype = Object.assign( Object.create( BufferAttribute.prototype ), {\n\n\t\tconstructor: InstancedBufferAttribute,\n\n\t\tisInstancedBufferAttribute: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tBufferAttribute.prototype.copy.call( this, source );\n\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author bhouston / http://clara.io/\n\t * @author stephomi / http://stephaneginier.com/\n\t */\n\n\tfunction Raycaster( origin, direction, near, far ) {\n\n\t\tthis.ray = new Ray( origin, direction );\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.near = near || 0;\n\t\tthis.far = far || Infinity;\n\n\t\tthis.params = {\n\t\t\tMesh: {},\n\t\t\tLine: {},\n\t\t\tLOD: {},\n\t\t\tPoints: { threshold: 1 },\n\t\t\tSprite: {}\n\t\t};\n\n\t\tObject.defineProperties( this.params, {\n\t\t\tPointCloud: {\n\t\t\t\tget: function () {\n\t\t\t\t\tconsole.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\n\t\t\t\t\treturn this.Points;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t}\n\n\tfunction ascSort( a, b ) {\n\n\t\treturn a.distance - b.distance;\n\n\t}\n\n\tfunction intersectObject( object, raycaster, intersects, recursive ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tobject.raycast( raycaster, intersects );\n\n\t\tif ( recursive === true ) {\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tintersectObject( children[ i ], raycaster, intersects, true );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tObject.assign( Raycaster.prototype, {\n\n\t\tlinePrecision: 1,\n\n\t\tset: function ( origin, direction ) {\n\n\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\t\tthis.ray.set( origin, direction );\n\n\t\t},\n\n\t\tsetFromCamera: function ( coords, camera ) {\n\n\t\t\tif ( ( camera && camera.isPerspectiveCamera ) ) {\n\n\t\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n\n\t\t\t} else if ( ( camera && camera.isOrthographicCamera ) ) {\n\n\t\t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\n\t\t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type.' );\n\n\t\t\t}\n\n\t\t},\n\n\t\tintersectObject: function ( object, recursive ) {\n\n\t\t\tvar intersects = [];\n\n\t\t\tintersectObject( object, this, intersects, recursive );\n\n\t\t\tintersects.sort( ascSort );\n\n\t\t\treturn intersects;\n\n\t\t},\n\n\t\tintersectObjects: function ( objects, recursive ) {\n\n\t\t\tvar intersects = [];\n\n\t\t\tif ( Array.isArray( objects ) === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\n\t\t\t\treturn intersects;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\n\n\t\t\t\tintersectObject( objects[ i ], this, intersects, recursive );\n\n\t\t\t}\n\n\t\t\tintersects.sort( ascSort );\n\n\t\t\treturn intersects;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Clock( autoStart ) {\n\n\t\tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\n\n\t\tthis.startTime = 0;\n\t\tthis.oldTime = 0;\n\t\tthis.elapsedTime = 0;\n\n\t\tthis.running = false;\n\n\t}\n\n\tObject.assign( Clock.prototype, {\n\n\t\tstart: function () {\n\n\t\t\tthis.startTime = ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732\n\n\t\t\tthis.oldTime = this.startTime;\n\t\t\tthis.elapsedTime = 0;\n\t\t\tthis.running = true;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tthis.getElapsedTime();\n\t\t\tthis.running = false;\n\t\t\tthis.autoStart = false;\n\n\t\t},\n\n\t\tgetElapsedTime: function () {\n\n\t\t\tthis.getDelta();\n\t\t\treturn this.elapsedTime;\n\n\t\t},\n\n\t\tgetDelta: function () {\n\n\t\t\tvar diff = 0;\n\n\t\t\tif ( this.autoStart && ! this.running ) {\n\n\t\t\t\tthis.start();\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\tif ( this.running ) {\n\n\t\t\t\tvar newTime = ( typeof performance === 'undefined' ? Date : performance ).now();\n\n\t\t\t\tdiff = ( newTime - this.oldTime ) / 1000;\n\t\t\t\tthis.oldTime = newTime;\n\n\t\t\t\tthis.elapsedTime += diff;\n\n\t\t\t}\n\n\t\t\treturn diff;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n\t *\n\t * The poles (phi) are at the positive and negative y axis.\n\t * The equator starts at positive z.\n\t */\n\n\tfunction Spherical( radius, phi, theta ) {\n\n\t\tthis.radius = ( radius !== undefined ) ? radius : 1.0;\n\t\tthis.phi = ( phi !== undefined ) ? phi : 0; // up / down towards top and bottom pole\n\t\tthis.theta = ( theta !== undefined ) ? theta : 0; // around the equator of the sphere\n\n\t\treturn this;\n\n\t}\n\n\tObject.assign( Spherical.prototype, {\n\n\t\tset: function ( radius, phi, theta ) {\n\n\t\t\tthis.radius = radius;\n\t\t\tthis.phi = phi;\n\t\t\tthis.theta = theta;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( other ) {\n\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.phi = other.phi;\n\t\t\tthis.theta = other.theta;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// restrict phi to be betwee EPS and PI-EPS\n\t\tmakeSafe: function() {\n\n\t\t\tvar EPS = 0.000001;\n\t\t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromVector3: function( vec3 ) {\n\n\t\t\tthis.radius = vec3.length();\n\n\t\t\tif ( this.radius === 0 ) {\n\n\t\t\t\tthis.theta = 0;\n\t\t\t\tthis.phi = 0;\n\n\t\t\t} else {\n\n\t\t\t\tthis.theta = Math.atan2( vec3.x, vec3.z ); // equator angle around y-up axis\n\t\t\t\tthis.phi = Math.acos( _Math.clamp( vec3.y / this.radius, - 1, 1 ) ); // polar angle\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\n\t *\n\t */\n\n\tfunction Cylindrical( radius, theta, y ) {\n\n\t\tthis.radius = ( radius !== undefined ) ? radius : 1.0; // distance from the origin to a point in the x-z plane\n\t\tthis.theta = ( theta !== undefined ) ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\n\t\tthis.y = ( y !== undefined ) ? y : 0; // height above the x-z plane\n\n\t\treturn this;\n\n\t}\n\n\tObject.assign( Cylindrical.prototype, {\n\n\t\tset: function ( radius, theta, y ) {\n\n\t\t\tthis.radius = radius;\n\t\t\tthis.theta = theta;\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( other ) {\n\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.theta = other.theta;\n\t\t\tthis.y = other.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromVector3: function( vec3 ) {\n\n\t\t\tthis.radius = Math.sqrt( vec3.x * vec3.x + vec3.z * vec3.z );\n\t\t\tthis.theta = Math.atan2( vec3.x, vec3.z );\n\t\t\tthis.y = vec3.y;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction MorphBlendMesh( geometry, material ) {\n\r\n\t\tMesh.call( this, geometry, material );\r\n\r\n\t\tthis.animationsMap = {};\r\n\t\tthis.animationsList = [];\r\n\r\n\t\t// prepare default animation\r\n\t\t// (all frames played together in 1 second)\r\n\r\n\t\tvar numFrames = this.geometry.morphTargets.length;\r\n\r\n\t\tvar name = \"__default\";\r\n\r\n\t\tvar startFrame = 0;\r\n\t\tvar endFrame = numFrames - 1;\r\n\r\n\t\tvar fps = numFrames / 1;\r\n\r\n\t\tthis.createAnimation( name, startFrame, endFrame, fps );\r\n\t\tthis.setAnimationWeight( name, 1 );\r\n\r\n\t}\r\n\r\n\tMorphBlendMesh.prototype = Object.create( Mesh.prototype );\r\n\tMorphBlendMesh.prototype.constructor = MorphBlendMesh;\r\n\r\n\tMorphBlendMesh.prototype.createAnimation = function ( name, start, end, fps ) {\r\n\r\n\t\tvar animation = {\r\n\r\n\t\t\tstart: start,\r\n\t\t\tend: end,\r\n\r\n\t\t\tlength: end - start + 1,\r\n\r\n\t\t\tfps: fps,\r\n\t\t\tduration: ( end - start ) / fps,\r\n\r\n\t\t\tlastFrame: 0,\r\n\t\t\tcurrentFrame: 0,\r\n\r\n\t\t\tactive: false,\r\n\r\n\t\t\ttime: 0,\r\n\t\t\tdirection: 1,\r\n\t\t\tweight: 1,\r\n\r\n\t\t\tdirectionBackwards: false,\r\n\t\t\tmirroredLoop: false\r\n\r\n\t\t};\r\n\r\n\t\tthis.animationsMap[ name ] = animation;\r\n\t\tthis.animationsList.push( animation );\r\n\r\n\t};\r\n\r\n\tMorphBlendMesh.prototype.autoCreateAnimations = function ( fps ) {\r\n\r\n\t\tvar pattern = /([a-z]+)_?(\\d+)/i;\r\n\r\n\t\tvar firstAnimation, frameRanges = {};\r\n\r\n\t\tvar geometry = this.geometry;\r\n\r\n\t\tfor ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar morph = geometry.morphTargets[ i ];\r\n\t\t\tvar chunks = morph.name.match( pattern );\r\n\r\n\t\t\tif ( chunks && chunks.length > 1 ) {\r\n\r\n\t\t\t\tvar name = chunks[ 1 ];\r\n\r\n\t\t\t\tif ( ! frameRanges[ name ] ) frameRanges[ name ] = { start: Infinity, end: - Infinity };\r\n\r\n\t\t\t\tvar range = frameRanges[ name ];\r\n\r\n\t\t\t\tif ( i < range.start ) range.start = i;\r\n\t\t\t\tif ( i > range.end ) range.end = i;\r\n\r\n\t\t\t\tif ( ! firstAnimation ) firstAnimation = name;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var name in frameRanges ) {\r\n\r\n\t\t\tvar range = frameRanges[ name ];\r\n\t\t\tthis.createAnimation( name, range.start, range.end, fps );\r\n\r\n\t\t}\r\n\r\n\t\tthis.firstAnimation = firstAnimation;\r\n\r\n\t};\r\n\r\n\tMorphBlendMesh.prototype.setAnimationDirectionForward = function ( name ) {\r\n\r\n\t\tvar animation = this.animationsMap[ name ];\r\n\r\n\t\tif ( animation ) {\r\n\r\n\t\t\tanimation.direction = 1;\r\n\t\t\tanimation.directionBackwards = false;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tMorphBlendMesh.prototype.setAnimationDirectionBackward = function ( name ) {\r\n\r\n\t\tvar animation = this.animationsMap[ name ];\r\n\r\n\t\tif ( animation ) {\r\n\r\n\t\t\tanimation.direction = - 1;\r\n\t\t\tanimation.directionBackwards = true;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tMorphBlendMesh.prototype.setAnimationFPS = function ( name, fps ) {\r\n\r\n\t\tvar animation = this.animationsMap[ name ];\r\n\r\n\t\tif ( animation ) {\r\n\r\n\t\t\tanimation.fps = fps;\r\n\t\t\tanimation.duration = ( animation.end - animation.start ) / animation.fps;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tMorphBlendMesh.prototype.setAnimationDuration = function ( name, duration ) {\r\n\r\n\t\tvar animation = this.animationsMap[ name ];\r\n\r\n\t\tif ( animation ) {\r\n\r\n\t\t\tanimation.duration = duration;\r\n\t\t\tanimation.fps = ( animation.end - animation.start ) / animation.duration;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tMorphBlendMesh.prototype.setAnimationWeight = function ( name, weight ) {\r\n\r\n\t\tvar animation = this.animationsMap[ name ];\r\n\r\n\t\tif ( animation ) {\r\n\r\n\t\t\tanimation.weight = weight;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tMorphBlendMesh.prototype.setAnimationTime = function ( name, time ) {\r\n\r\n\t\tvar animation = this.animationsMap[ name ];\r\n\r\n\t\tif ( animation ) {\r\n\r\n\t\t\tanimation.time = time;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tMorphBlendMesh.prototype.getAnimationTime = function ( name ) {\r\n\r\n\t\tvar time = 0;\r\n\r\n\t\tvar animation = this.animationsMap[ name ];\r\n\r\n\t\tif ( animation ) {\r\n\r\n\t\t\ttime = animation.time;\r\n\r\n\t\t}\r\n\r\n\t\treturn time;\r\n\r\n\t};\r\n\r\n\tMorphBlendMesh.prototype.getAnimationDuration = function ( name ) {\r\n\r\n\t\tvar duration = - 1;\r\n\r\n\t\tvar animation = this.animationsMap[ name ];\r\n\r\n\t\tif ( animation ) {\r\n\r\n\t\t\tduration = animation.duration;\r\n\r\n\t\t}\r\n\r\n\t\treturn duration;\r\n\r\n\t};\r\n\r\n\tMorphBlendMesh.prototype.playAnimation = function ( name ) {\r\n\r\n\t\tvar animation = this.animationsMap[ name ];\r\n\r\n\t\tif ( animation ) {\r\n\r\n\t\t\tanimation.time = 0;\r\n\t\t\tanimation.active = true;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.warn( \"THREE.MorphBlendMesh: animation[\" + name + \"] undefined in .playAnimation()\" );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tMorphBlendMesh.prototype.stopAnimation = function ( name ) {\r\n\r\n\t\tvar animation = this.animationsMap[ name ];\r\n\r\n\t\tif ( animation ) {\r\n\r\n\t\t\tanimation.active = false;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tMorphBlendMesh.prototype.update = function ( delta ) {\r\n\r\n\t\tfor ( var i = 0, il = this.animationsList.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar animation = this.animationsList[ i ];\r\n\r\n\t\t\tif ( ! animation.active ) continue;\r\n\r\n\t\t\tvar frameTime = animation.duration / animation.length;\r\n\r\n\t\t\tanimation.time += animation.direction * delta;\r\n\r\n\t\t\tif ( animation.mirroredLoop ) {\r\n\r\n\t\t\t\tif ( animation.time > animation.duration || animation.time < 0 ) {\r\n\r\n\t\t\t\t\tanimation.direction *= - 1;\r\n\r\n\t\t\t\t\tif ( animation.time > animation.duration ) {\r\n\r\n\t\t\t\t\t\tanimation.time = animation.duration;\r\n\t\t\t\t\t\tanimation.directionBackwards = true;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( animation.time < 0 ) {\r\n\r\n\t\t\t\t\t\tanimation.time = 0;\r\n\t\t\t\t\t\tanimation.directionBackwards = false;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tanimation.time = animation.time % animation.duration;\r\n\r\n\t\t\t\tif ( animation.time < 0 ) animation.time += animation.duration;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar keyframe = animation.start + _Math.clamp( Math.floor( animation.time / frameTime ), 0, animation.length - 1 );\r\n\t\t\tvar weight = animation.weight;\r\n\r\n\t\t\tif ( keyframe !== animation.currentFrame ) {\r\n\r\n\t\t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = 0;\r\n\t\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = 1 * weight;\r\n\r\n\t\t\t\tthis.morphTargetInfluences[ keyframe ] = 0;\r\n\r\n\t\t\t\tanimation.lastFrame = animation.currentFrame;\r\n\t\t\t\tanimation.currentFrame = keyframe;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar mix = ( animation.time % frameTime ) / frameTime;\r\n\r\n\t\t\tif ( animation.directionBackwards ) mix = 1 - mix;\r\n\r\n\t\t\tif ( animation.currentFrame !== animation.lastFrame ) {\r\n\r\n\t\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = mix * weight;\r\n\t\t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = ( 1 - mix ) * weight;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = weight;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction ImmediateRenderObject( material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.material = material;\n\t\tthis.render = function ( renderCallback ) {};\n\n\t}\n\n\tImmediateRenderObject.prototype = Object.create( Object3D.prototype );\n\tImmediateRenderObject.prototype.constructor = ImmediateRenderObject;\n\n\tImmediateRenderObject.prototype.isImmediateRenderObject = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t*/\n\n\tfunction VertexNormalsHelper( object, size, hex, linewidth ) {\n\n\t\tthis.object = object;\n\n\t\tthis.size = ( size !== undefined ) ? size : 1;\n\n\t\tvar color = ( hex !== undefined ) ? hex : 0xff0000;\n\n\t\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\n\t\t//\n\n\t\tvar nNormals = 0;\n\n\t\tvar objGeometry = this.object.geometry;\n\n\t\tif ( objGeometry && objGeometry.isGeometry ) {\n\n\t\t\tnNormals = objGeometry.faces.length * 3;\n\n\t\t} else if ( objGeometry && objGeometry.isBufferGeometry ) {\n\n\t\t\tnNormals = objGeometry.attributes.normal.count;\n\n\t\t}\n\n\t\t//\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tvar positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );\n\n\t\tgeometry.addAttribute( 'position', positions );\n\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\n\n\t\t//\n\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\t}\n\n\tVertexNormalsHelper.prototype = Object.create( LineSegments.prototype );\n\tVertexNormalsHelper.prototype.constructor = VertexNormalsHelper;\n\n\tVertexNormalsHelper.prototype.update = ( function () {\n\n\t\tvar v1 = new Vector3();\n\t\tvar v2 = new Vector3();\n\t\tvar normalMatrix = new Matrix3();\n\n\t\treturn function update() {\n\n\t\t\tvar keys = [ 'a', 'b', 'c' ];\n\n\t\t\tthis.object.updateMatrixWorld( true );\n\n\t\t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\n\t\t\tvar matrixWorld = this.object.matrixWorld;\n\n\t\t\tvar position = this.geometry.attributes.position;\n\n\t\t\t//\n\n\t\t\tvar objGeometry = this.object.geometry;\n\n\t\t\tif ( objGeometry && objGeometry.isGeometry ) {\n\n\t\t\t\tvar vertices = objGeometry.vertices;\n\n\t\t\t\tvar faces = objGeometry.faces;\n\n\t\t\t\tvar idx = 0;\n\n\t\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar vertex = vertices[ face[ keys[ j ] ] ];\n\n\t\t\t\t\t\tvar normal = face.vertexNormals[ j ];\n\n\t\t\t\t\t\tv1.copy( vertex ).applyMatrix4( matrixWorld );\n\n\t\t\t\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n\t\t\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n\t\t\t\t\t\tidx = idx + 1;\n\n\t\t\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n\t\t\t\t\t\tidx = idx + 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( objGeometry && objGeometry.isBufferGeometry ) {\n\n\t\t\t\tvar objPos = objGeometry.attributes.position;\n\n\t\t\t\tvar objNorm = objGeometry.attributes.normal;\n\n\t\t\t\tvar idx = 0;\n\n\t\t\t\t// for simplicity, ignore index and drawcalls, and render every normal\n\n\t\t\t\tfor ( var j = 0, jl = objPos.count; j < jl; j ++ ) {\n\n\t\t\t\t\tv1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );\n\n\t\t\t\t\tv2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );\n\n\t\t\t\t\tv2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n\t\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n\t\t\t\t\tidx = idx + 1;\n\n\t\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n\t\t\t\t\tidx = idx + 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tposition.needsUpdate = true;\n\n\t\t};\n\n\t}() );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t*/\n\n\tfunction SpotLightHelper( light ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tvar positions = [\n\t\t\t0, 0, 0,   0,   0,   1,\n\t\t\t0, 0, 0,   1,   0,   1,\n\t\t\t0, 0, 0, - 1,   0,   1,\n\t\t\t0, 0, 0,   0,   1,   1,\n\t\t\t0, 0, 0,   0, - 1,   1\n\t\t];\n\n\t\tfor ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\n\n\t\t\tvar p1 = ( i / l ) * Math.PI * 2;\n\t\t\tvar p2 = ( j / l ) * Math.PI * 2;\n\n\t\t\tpositions.push(\n\t\t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\n\t\t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\n\t\t\t);\n\n\t\t}\n\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { fog: false } );\n\n\t\tthis.cone = new LineSegments( geometry, material );\n\t\tthis.add( this.cone );\n\n\t\tthis.update();\n\n\t}\n\n\tSpotLightHelper.prototype = Object.create( Object3D.prototype );\n\tSpotLightHelper.prototype.constructor = SpotLightHelper;\n\n\tSpotLightHelper.prototype.dispose = function () {\n\n\t\tthis.cone.geometry.dispose();\n\t\tthis.cone.material.dispose();\n\n\t};\n\n\tSpotLightHelper.prototype.update = function () {\n\n\t\tvar vector = new Vector3();\n\t\tvar vector2 = new Vector3();\n\n\t\treturn function update() {\n\n\t\t\tthis.light.updateMatrixWorld();\n\n\t\t\tvar coneLength = this.light.distance ? this.light.distance : 1000;\n\t\t\tvar coneWidth = coneLength * Math.tan( this.light.angle );\n\n\t\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\n\t\t\tvector.setFromMatrixPosition( this.light.matrixWorld );\n\t\t\tvector2.setFromMatrixPosition( this.light.target.matrixWorld );\n\n\t\t\tthis.cone.lookAt( vector2.sub( vector ) );\n\n\t\t\tthis.cone.material.color.copy( this.light.color );\n\n\t\t};\n\n\t}();\n\n\t/**\n\t * @author Sean Griffin / http://twitter.com/sgrif\n\t * @author Michael Guerrero / http://realitymeltdown.com\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author ikerr / http://verold.com\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction getBoneList( object ) {\n\n\t\tvar boneList = [];\n\n\t\tif ( object && object.isBone ) {\n\n\t\t\tboneList.push( object );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < object.children.length; i ++ ) {\n\n\t\t\tboneList.push.apply( boneList, getBoneList( object.children[ i ] ) );\n\n\t\t}\n\n\t\treturn boneList;\n\n\t}\n\n\tfunction SkeletonHelper( object ) {\n\n\t\tvar bones = getBoneList( object );\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tvar vertices = [];\n\t\tvar colors = [];\n\n\t\tvar color1 = new Color( 0, 0, 1 );\n\t\tvar color2 = new Color( 0, 1, 0 );\n\n\t\tfor ( var i = 0; i < bones.length; i ++ ) {\n\n\t\t\tvar bone = bones[ i ];\n\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tcolors.push( color1.r, color1.g, color1.b );\n\t\t\t\tcolors.push( color2.r, color2.g, color2.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors, depthTest: false, depthWrite: false, transparent: true } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t\tthis.root = object;\n\t\tthis.bones = bones;\n\n\t\tthis.matrix = object.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.onBeforeRender();\n\n\t}\n\n\tSkeletonHelper.prototype = Object.create( LineSegments.prototype );\n\tSkeletonHelper.prototype.constructor = SkeletonHelper;\n\n\tSkeletonHelper.prototype.onBeforeRender = function () {\n\n\t\tvar vector = new Vector3();\n\n\t\tvar boneMatrix = new Matrix4();\n\t\tvar matrixWorldInv = new Matrix4();\n\n\t\treturn function onBeforeRender() {\n\n\t\t\tvar bones = this.bones;\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar position = geometry.getAttribute( 'position' );\n\n\t\t\tmatrixWorldInv.getInverse( this.root.matrixWorld );\n\n\t\t\tfor ( var i = 0, j = 0; i < bones.length; i ++ ) {\n\n\t\t\t\tvar bone = bones[ i ];\n\n\t\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );\n\t\t\t\t\tvector.setFromMatrixPosition( boneMatrix );\n\t\t\t\t\tposition.setXYZ( j, vector.x, vector.y, vector.z );\n\n\t\t\t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );\n\t\t\t\t\tvector.setFromMatrixPosition( boneMatrix );\n\t\t\t\t\tposition.setXYZ( j + 1, vector.x, vector.y, vector.z );\n\n\t\t\t\t\tj += 2;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t\t};\n\n\t}();\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction PointLightHelper( light, sphereSize ) {\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tvar geometry = new SphereBufferGeometry( sphereSize, 4, 2 );\n\t\tvar material = new MeshBasicMaterial( { wireframe: true, fog: false } );\n\t\tmaterial.color.copy( this.light.color );\n\n\t\tMesh.call( this, geometry, material );\n\n\t\tthis.matrix = this.light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\t/*\n\t\tvar distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\n\t\tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\n\t\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\t\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\n\t\tvar d = light.distance;\n\n\t\tif ( d === 0.0 ) {\n\n\t\t\tthis.lightDistance.visible = false;\n\n\t\t} else {\n\n\t\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t\t}\n\n\t\tthis.add( this.lightDistance );\n\t\t*/\n\n\t}\n\n\tPointLightHelper.prototype = Object.create( Mesh.prototype );\n\tPointLightHelper.prototype.constructor = PointLightHelper;\n\n\tPointLightHelper.prototype.dispose = function () {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t};\n\n\tPointLightHelper.prototype.update = function () {\n\n\t\tthis.material.color.copy( this.light.color );\n\n\t\t/*\n\t\tvar d = this.light.distance;\n\n\t\tif ( d === 0.0 ) {\n\n\t\t\tthis.lightDistance.visible = false;\n\n\t\t} else {\n\n\t\t\tthis.lightDistance.visible = true;\n\t\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t\t}\n\t\t*/\n\n\t};\n\n\t/**\n\t * @author abelnation / http://github.com/abelnation\n\t * @author Mugen87 / http://github.com/Mugen87\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction RectAreaLightHelper( light ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tvar material = new LineBasicMaterial( { color: light.color } );\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tgeometry.addAttribute( 'position', new BufferAttribute( new Float32Array( 5 * 3 ), 3 ) );\n\n\t\tthis.add( new Line( geometry, material ) );\n\n\t\tthis.update();\n\n\t}\n\n\tRectAreaLightHelper.prototype = Object.create( Object3D.prototype );\n\tRectAreaLightHelper.prototype.constructor = RectAreaLightHelper;\n\n\tRectAreaLightHelper.prototype.dispose = function () {\n\n\t\tthis.children[ 0 ].geometry.dispose();\n\t\tthis.children[ 0 ].material.dispose();\n\n\t};\n\n\tRectAreaLightHelper.prototype.update = function () {\n\n\t\tvar line = this.children[ 0 ];\n\n\t\t// update material\n\n\t\tline.material.color.copy( this.light.color );\n\n\t\t// calculate new dimensions of the helper\n\n\t\tvar hx = this.light.width * 0.5;\n\t\tvar hy = this.light.height * 0.5;\n\n\t\tvar position = line.geometry.attributes.position;\n\t\tvar array = position.array;\n\n\t\t// update vertices\n\n\t\tarray[  0 ] =   hx; array[  1 ] = - hy; array[  2 ] = 0;\n\t\tarray[  3 ] =   hx; array[  4 ] =   hy; array[  5 ] = 0;\n\t\tarray[  6 ] = - hx; array[  7 ] =   hy; array[  8 ] = 0;\n\t\tarray[  9 ] = - hx; array[ 10 ] = - hy; array[ 11 ] = 0;\n\t\tarray[ 12 ] =   hx; array[ 13 ] = - hy; array[ 14 ] = 0;\n\n\t\tposition.needsUpdate = true;\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction HemisphereLightHelper( light, size ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tvar geometry = new OctahedronBufferGeometry( size );\n\t\tgeometry.rotateY( Math.PI * 0.5 );\n\n\t\tvar material = new MeshBasicMaterial( { vertexColors: VertexColors, wireframe: true } );\n\n\t\tvar position = geometry.getAttribute( 'position' );\n\t\tvar colors = new Float32Array( position.count * 3 );\n\n\t\tgeometry.addAttribute( 'color', new BufferAttribute( colors, 3 ) );\n\n\t\tthis.add( new Mesh( geometry, material ) );\n\n\t\tthis.update();\n\n\t}\n\n\tHemisphereLightHelper.prototype = Object.create( Object3D.prototype );\n\tHemisphereLightHelper.prototype.constructor = HemisphereLightHelper;\n\n\tHemisphereLightHelper.prototype.dispose = function () {\n\n\t\tthis.children[ 0 ].geometry.dispose();\n\t\tthis.children[ 0 ].material.dispose();\n\n\t};\n\n\tHemisphereLightHelper.prototype.update = function () {\n\n\t\tvar vector = new Vector3();\n\n\t\tvar color1 = new Color();\n\t\tvar color2 = new Color();\n\n\t\treturn function update() {\n\n\t\t\tvar mesh = this.children[ 0 ];\n\n\t\t\tvar colors = mesh.geometry.getAttribute( 'color' );\n\n\t\t\tcolor1.copy( this.light.color );\n\t\t\tcolor2.copy( this.light.groundColor );\n\n\t\t\tfor ( var i = 0, l = colors.count; i < l; i ++ ) {\n\n\t\t\t\tvar color = ( i < ( l / 2 ) ) ? color1 : color2;\n\n\t\t\t\tcolors.setXYZ( i, color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t\tmesh.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n\n\t\t\tcolors.needsUpdate = true;\n\n\t\t};\n\n\t}();\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction GridHelper( size, divisions, color1, color2 ) {\n\n\t\tsize = size || 10;\n\t\tdivisions = divisions || 10;\n\t\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n\t\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\n\t\tvar center = divisions / 2;\n\t\tvar step = size / divisions;\n\t\tvar halfSize = size / 2;\n\n\t\tvar vertices = [], colors = [];\n\n\t\tfor ( var i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {\n\n\t\t\tvertices.push( - halfSize, 0, k, halfSize, 0, k );\n\t\t\tvertices.push( k, 0, - halfSize, k, 0, halfSize );\n\n\t\t\tvar color = i === center ? color1 : color2;\n\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\n\t\t}\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t}\n\n\tGridHelper.prototype = Object.create( LineSegments.prototype );\n\tGridHelper.prototype.constructor = GridHelper;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / http://github.com/Mugen87\n\t * @author Hectate / http://www.github.com/Hectate\n\t */\n\n\tfunction PolarGridHelper( radius, radials, circles, divisions, color1, color2 ) {\n\n\t\tradius = radius || 10;\n\t\tradials = radials || 16;\n\t\tcircles = circles || 8;\n\t\tdivisions = divisions || 64;\n\t\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n\t\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\n\t\tvar vertices = [];\n\t\tvar colors = [];\n\n\t\tvar x, z;\n\t\tvar v, i, j, r, color;\n\n\t\t// create the radials\n\n\t\tfor ( i = 0; i <= radials; i ++ ) {\n\n\t\t\tv = ( i / radials ) * ( Math.PI * 2 );\n\n\t\t\tx = Math.sin( v ) * radius;\n\t\t\tz = Math.cos( v ) * radius;\n\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tvertices.push( x, 0, z );\n\n\t\t\tcolor = ( i & 1 ) ? color1 : color2;\n\n\t\t\tcolors.push( color.r, color.g, color.b );\n\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t}\n\n\t\t// create the circles\n\n\t\tfor ( i = 0; i <= circles; i ++ ) {\n\n\t\t\tcolor = ( i & 1 ) ? color1 : color2;\n\n\t\t\tr = radius - ( radius / circles * i );\n\n\t\t\tfor ( j = 0; j < divisions; j ++ ) {\n\n\t\t\t\t// first vertex\n\n\t\t\t\tv = ( j / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tx = Math.sin( v ) * r;\n\t\t\t\tz = Math.cos( v ) * r;\n\n\t\t\t\tvertices.push( x, 0, z );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t\t// second vertex\n\n\t\t\t\tv = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tx = Math.sin( v ) * r;\n\t\t\t\tz = Math.cos( v ) * r;\n\n\t\t\t\tvertices.push( x, 0, z );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t}\n\n\tPolarGridHelper.prototype = Object.create( LineSegments.prototype );\n\tPolarGridHelper.prototype.constructor = PolarGridHelper;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t*/\n\n\tfunction FaceNormalsHelper( object, size, hex, linewidth ) {\n\n\t\t// FaceNormalsHelper only supports THREE.Geometry\n\n\t\tthis.object = object;\n\n\t\tthis.size = ( size !== undefined ) ? size : 1;\n\n\t\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\n\t\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\n\t\t//\n\n\t\tvar nNormals = 0;\n\n\t\tvar objGeometry = this.object.geometry;\n\n\t\tif ( objGeometry && objGeometry.isGeometry ) {\n\n\t\t\tnNormals = objGeometry.faces.length;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );\n\n\t\t}\n\n\t\t//\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tvar positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );\n\n\t\tgeometry.addAttribute( 'position', positions );\n\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\n\n\t\t//\n\n\t\tthis.matrixAutoUpdate = false;\n\t\tthis.update();\n\n\t}\n\n\tFaceNormalsHelper.prototype = Object.create( LineSegments.prototype );\n\tFaceNormalsHelper.prototype.constructor = FaceNormalsHelper;\n\n\tFaceNormalsHelper.prototype.update = ( function () {\n\n\t\tvar v1 = new Vector3();\n\t\tvar v2 = new Vector3();\n\t\tvar normalMatrix = new Matrix3();\n\n\t\treturn function update() {\n\n\t\t\tthis.object.updateMatrixWorld( true );\n\n\t\t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\n\t\t\tvar matrixWorld = this.object.matrixWorld;\n\n\t\t\tvar position = this.geometry.attributes.position;\n\n\t\t\t//\n\n\t\t\tvar objGeometry = this.object.geometry;\n\n\t\t\tvar vertices = objGeometry.vertices;\n\n\t\t\tvar faces = objGeometry.faces;\n\n\t\t\tvar idx = 0;\n\n\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tvar normal = face.normal;\n\n\t\t\t\tv1.copy( vertices[ face.a ] )\n\t\t\t\t\t.add( vertices[ face.b ] )\n\t\t\t\t\t.add( vertices[ face.c ] )\n\t\t\t\t\t.divideScalar( 3 )\n\t\t\t\t\t.applyMatrix4( matrixWorld );\n\n\t\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n\t\t\t\tidx = idx + 1;\n\n\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n\t\t\t\tidx = idx + 1;\n\n\t\t\t}\n\n\t\t\tposition.needsUpdate = true;\n\n\t\t};\n\n\t}() );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction DirectionalLightHelper( light, size ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tif ( size === undefined ) size = 1;\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( [\n\t\t\t- size,   size, 0,\n\t\t\t  size,   size, 0,\n\t\t\t  size, - size, 0,\n\t\t\t- size, - size, 0,\n\t\t\t- size,   size, 0\n\t\t], 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { fog: false } );\n\n\t\tthis.add( new Line( geometry, material ) );\n\n\t\tgeometry = new BufferGeometry();\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\n\n\t\tthis.add( new Line( geometry, material ));\n\n\t\tthis.update();\n\n\t}\n\n\tDirectionalLightHelper.prototype = Object.create( Object3D.prototype );\n\tDirectionalLightHelper.prototype.constructor = DirectionalLightHelper;\n\n\tDirectionalLightHelper.prototype.dispose = function () {\n\n\t\tvar lightPlane = this.children[ 0 ];\n\t\tvar targetLine = this.children[ 1 ];\n\n\t\tlightPlane.geometry.dispose();\n\t\tlightPlane.material.dispose();\n\t\ttargetLine.geometry.dispose();\n\t\ttargetLine.material.dispose();\n\n\t};\n\n\tDirectionalLightHelper.prototype.update = function () {\n\n\t\tvar v1 = new Vector3();\n\t\tvar v2 = new Vector3();\n\t\tvar v3 = new Vector3();\n\n\t\treturn function update() {\n\n\t\t\tv1.setFromMatrixPosition( this.light.matrixWorld );\n\t\t\tv2.setFromMatrixPosition( this.light.target.matrixWorld );\n\t\t\tv3.subVectors( v2, v1 );\n\n\t\t\tvar lightPlane = this.children[ 0 ];\n\t\t\tvar targetLine = this.children[ 1 ];\n\n\t\t\tlightPlane.lookAt( v3 );\n\t\t\tlightPlane.material.color.copy( this.light.color );\n\n\t\t\ttargetLine.lookAt( v3 );\n\t\t\ttargetLine.scale.z = v3.length();\n\n\t\t};\n\n\t}();\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t *\t- shows frustum, line of sight and up of the camera\n\t *\t- suitable for fast updates\n\t * \t- based on frustum visualization in lightgl.js shadowmap example\n\t *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n\t */\n\n\tfunction CameraHelper( camera ) {\n\n\t\tvar geometry = new BufferGeometry();\n\t\tvar material = new LineBasicMaterial( { color: 0xffffff, vertexColors: FaceColors } );\n\n\t\tvar vertices = [];\n\t\tvar colors = [];\n\n\t\tvar pointMap = {};\n\n\t\t// colors\n\n\t\tvar colorFrustum = new Color( 0xffaa00 );\n\t\tvar colorCone = new Color( 0xff0000 );\n\t\tvar colorUp = new Color( 0x00aaff );\n\t\tvar colorTarget = new Color( 0xffffff );\n\t\tvar colorCross = new Color( 0x333333 );\n\n\t\t// near\n\n\t\taddLine( \"n1\", \"n2\", colorFrustum );\n\t\taddLine( \"n2\", \"n4\", colorFrustum );\n\t\taddLine( \"n4\", \"n3\", colorFrustum );\n\t\taddLine( \"n3\", \"n1\", colorFrustum );\n\n\t\t// far\n\n\t\taddLine( \"f1\", \"f2\", colorFrustum );\n\t\taddLine( \"f2\", \"f4\", colorFrustum );\n\t\taddLine( \"f4\", \"f3\", colorFrustum );\n\t\taddLine( \"f3\", \"f1\", colorFrustum );\n\n\t\t// sides\n\n\t\taddLine( \"n1\", \"f1\", colorFrustum );\n\t\taddLine( \"n2\", \"f2\", colorFrustum );\n\t\taddLine( \"n3\", \"f3\", colorFrustum );\n\t\taddLine( \"n4\", \"f4\", colorFrustum );\n\n\t\t// cone\n\n\t\taddLine( \"p\", \"n1\", colorCone );\n\t\taddLine( \"p\", \"n2\", colorCone );\n\t\taddLine( \"p\", \"n3\", colorCone );\n\t\taddLine( \"p\", \"n4\", colorCone );\n\n\t\t// up\n\n\t\taddLine( \"u1\", \"u2\", colorUp );\n\t\taddLine( \"u2\", \"u3\", colorUp );\n\t\taddLine( \"u3\", \"u1\", colorUp );\n\n\t\t// target\n\n\t\taddLine( \"c\", \"t\", colorTarget );\n\t\taddLine( \"p\", \"c\", colorCross );\n\n\t\t// cross\n\n\t\taddLine( \"cn1\", \"cn2\", colorCross );\n\t\taddLine( \"cn3\", \"cn4\", colorCross );\n\n\t\taddLine( \"cf1\", \"cf2\", colorCross );\n\t\taddLine( \"cf3\", \"cf4\", colorCross );\n\n\t\tfunction addLine( a, b, color ) {\n\n\t\t\taddPoint( a, color );\n\t\t\taddPoint( b, color );\n\n\t\t}\n\n\t\tfunction addPoint( id, color ) {\n\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\tif ( pointMap[ id ] === undefined ) {\n\n\t\t\t\tpointMap[ id ] = [];\n\n\t\t\t}\n\n\t\t\tpointMap[ id ].push( ( vertices.length / 3 ) - 1 );\n\n\t\t}\n\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t\tthis.camera = camera;\n\t\tif ( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();\n\n\t\tthis.matrix = camera.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.pointMap = pointMap;\n\n\t\tthis.update();\n\n\t}\n\n\tCameraHelper.prototype = Object.create( LineSegments.prototype );\n\tCameraHelper.prototype.constructor = CameraHelper;\n\n\tCameraHelper.prototype.update = function () {\n\n\t\tvar geometry, pointMap;\n\n\t\tvar vector = new Vector3();\n\t\tvar camera = new Camera();\n\n\t\tfunction setPoint( point, x, y, z ) {\n\n\t\t\tvector.set( x, y, z ).unproject( camera );\n\n\t\t\tvar points = pointMap[ point ];\n\n\t\t\tif ( points !== undefined ) {\n\n\t\t\t\tvar position = geometry.getAttribute( 'position' );\n\n\t\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\t\tposition.setXYZ( points[ i ], vector.x, vector.y, vector.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn function update() {\n\n\t\t\tgeometry = this.geometry;\n\t\t\tpointMap = this.pointMap;\n\n\t\t\tvar w = 1, h = 1;\n\n\t\t\t// we need just camera projection matrix\n\t\t\t// world matrix must be identity\n\n\t\t\tcamera.projectionMatrix.copy( this.camera.projectionMatrix );\n\n\t\t\t// center / target\n\n\t\t\tsetPoint( \"c\", 0, 0, - 1 );\n\t\t\tsetPoint( \"t\", 0, 0,  1 );\n\n\t\t\t// near\n\n\t\t\tsetPoint( \"n1\", - w, - h, - 1 );\n\t\t\tsetPoint( \"n2\",   w, - h, - 1 );\n\t\t\tsetPoint( \"n3\", - w,   h, - 1 );\n\t\t\tsetPoint( \"n4\",   w,   h, - 1 );\n\n\t\t\t// far\n\n\t\t\tsetPoint( \"f1\", - w, - h, 1 );\n\t\t\tsetPoint( \"f2\",   w, - h, 1 );\n\t\t\tsetPoint( \"f3\", - w,   h, 1 );\n\t\t\tsetPoint( \"f4\",   w,   h, 1 );\n\n\t\t\t// up\n\n\t\t\tsetPoint( \"u1\",   w * 0.7, h * 1.1, - 1 );\n\t\t\tsetPoint( \"u2\", - w * 0.7, h * 1.1, - 1 );\n\t\t\tsetPoint( \"u3\",         0, h * 2,   - 1 );\n\n\t\t\t// cross\n\n\t\t\tsetPoint( \"cf1\", - w,   0, 1 );\n\t\t\tsetPoint( \"cf2\",   w,   0, 1 );\n\t\t\tsetPoint( \"cf3\",   0, - h, 1 );\n\t\t\tsetPoint( \"cf4\",   0,   h, 1 );\n\n\t\t\tsetPoint( \"cn1\", - w,   0, - 1 );\n\t\t\tsetPoint( \"cn2\",   w,   0, - 1 );\n\t\t\tsetPoint( \"cn3\",   0, - h, - 1 );\n\t\t\tsetPoint( \"cn4\",   0,   h, - 1 );\n\n\t\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t\t};\n\n\t}();\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / http://github.com/Mugen87\n\t */\n\n\tfunction BoxHelper( object, color ) {\n\n\t\tthis.object = object;\n\n\t\tif ( color === undefined ) color = 0xffff00;\n\n\t\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\t\tvar positions = new Float32Array( 8 * 3 );\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\t\tgeometry.addAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );\n\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\t}\n\n\tBoxHelper.prototype = Object.create( LineSegments.prototype );\n\tBoxHelper.prototype.constructor = BoxHelper;\n\n\tBoxHelper.prototype.update = ( function () {\n\n\t\tvar box = new Box3();\n\n\t\treturn function update( object ) {\n\n\t\t\tif ( object !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );\n\n\t\t\t}\n\n\t\t\tif ( this.object !== undefined ) {\n\n\t\t\t\tbox.setFromObject( this.object );\n\n\t\t\t}\n\n\t\t\tif ( box.isEmpty() ) return;\n\n\t\t\tvar min = box.min;\n\t\t\tvar max = box.max;\n\n\t\t\t/*\n\t\t\t  5____4\n\t\t\t1/___0/|\n\t\t\t| 6__|_7\n\t\t\t2/___3/\n\n\t\t\t0: max.x, max.y, max.z\n\t\t\t1: min.x, max.y, max.z\n\t\t\t2: min.x, min.y, max.z\n\t\t\t3: max.x, min.y, max.z\n\t\t\t4: max.x, max.y, min.z\n\t\t\t5: min.x, max.y, min.z\n\t\t\t6: min.x, min.y, min.z\n\t\t\t7: max.x, min.y, min.z\n\t\t\t*/\n\n\t\t\tvar position = this.geometry.attributes.position;\n\t\t\tvar array = position.array;\n\n\t\t\tarray[  0 ] = max.x; array[  1 ] = max.y; array[  2 ] = max.z;\n\t\t\tarray[  3 ] = min.x; array[  4 ] = max.y; array[  5 ] = max.z;\n\t\t\tarray[  6 ] = min.x; array[  7 ] = min.y; array[  8 ] = max.z;\n\t\t\tarray[  9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\n\t\t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\n\t\t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\n\t\t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\n\t\t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\n\n\t\t\tposition.needsUpdate = true;\n\n\t\t\tthis.geometry.computeBoundingSphere();\n\n\t\t};\n\n\t} )();\n\n\tBoxHelper.prototype.setFromObject = function ( object ) {\n\n\t\tthis.object = object;\n\t\tthis.update();\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author zz85 / http://github.com/zz85\n\t * @author bhouston / http://clara.io\n\t *\n\t * Creates an arrow for visualizing directions\n\t *\n\t * Parameters:\n\t *  dir - Vector3\n\t *  origin - Vector3\n\t *  length - Number\n\t *  color - color in hex value\n\t *  headLength - Number\n\t *  headWidth - Number\n\t */\n\n\tvar lineGeometry;\n\tvar coneGeometry;\n\n\tfunction ArrowHelper( dir, origin, length, color, headLength, headWidth ) {\n\n\t\t// dir is assumed to be normalized\n\n\t\tObject3D.call( this );\n\n\t\tif ( color === undefined ) color = 0xffff00;\n\t\tif ( length === undefined ) length = 1;\n\t\tif ( headLength === undefined ) headLength = 0.2 * length;\n\t\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\n\t\tif ( lineGeometry === undefined ) {\n\n\t\t\tlineGeometry = new BufferGeometry();\n\t\t\tlineGeometry.addAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\n\n\t\t\tconeGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );\n\t\t\tconeGeometry.translate( 0, - 0.5, 0 );\n\n\t\t}\n\n\t\tthis.position.copy( origin );\n\n\t\tthis.line = new Line( lineGeometry, new LineBasicMaterial( { color: color } ) );\n\t\tthis.line.matrixAutoUpdate = false;\n\t\tthis.add( this.line );\n\n\t\tthis.cone = new Mesh( coneGeometry, new MeshBasicMaterial( { color: color } ) );\n\t\tthis.cone.matrixAutoUpdate = false;\n\t\tthis.add( this.cone );\n\n\t\tthis.setDirection( dir );\n\t\tthis.setLength( length, headLength, headWidth );\n\n\t}\n\n\tArrowHelper.prototype = Object.create( Object3D.prototype );\n\tArrowHelper.prototype.constructor = ArrowHelper;\n\n\tArrowHelper.prototype.setDirection = ( function () {\n\n\t\tvar axis = new Vector3();\n\t\tvar radians;\n\n\t\treturn function setDirection( dir ) {\n\n\t\t\t// dir is assumed to be normalized\n\n\t\t\tif ( dir.y > 0.99999 ) {\n\n\t\t\t\tthis.quaternion.set( 0, 0, 0, 1 );\n\n\t\t\t} else if ( dir.y < - 0.99999 ) {\n\n\t\t\t\tthis.quaternion.set( 1, 0, 0, 0 );\n\n\t\t\t} else {\n\n\t\t\t\taxis.set( dir.z, 0, - dir.x ).normalize();\n\n\t\t\t\tradians = Math.acos( dir.y );\n\n\t\t\t\tthis.quaternion.setFromAxisAngle( axis, radians );\n\n\t\t\t}\n\n\t\t};\n\n\t}() );\n\n\tArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {\n\n\t\tif ( headLength === undefined ) headLength = 0.2 * length;\n\t\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\n\t\tthis.line.scale.set( 1, Math.max( 0, length - headLength ), 1 );\n\t\tthis.line.updateMatrix();\n\n\t\tthis.cone.scale.set( headWidth, headLength, headWidth );\n\t\tthis.cone.position.y = length;\n\t\tthis.cone.updateMatrix();\n\n\t};\n\n\tArrowHelper.prototype.setColor = function ( color ) {\n\n\t\tthis.line.material.color.copy( color );\n\t\tthis.cone.material.color.copy( color );\n\n\t};\n\n\t/**\n\t * @author sroucheray / http://sroucheray.org/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AxisHelper( size ) {\n\n\t\tsize = size || 1;\n\n\t\tvar vertices = [\n\t\t\t0, 0, 0,  size, 0, 0,\n\t\t\t0, 0, 0,  0, size, 0,\n\t\t\t0, 0, 0,  0, 0, size\n\t\t];\n\n\t\tvar colors = [\n\t\t\t1, 0, 0,  1, 0.6, 0,\n\t\t\t0, 1, 0,  0.6, 1, 0,\n\t\t\t0, 0, 1,  0, 0.6, 1\n\t\t];\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t}\n\n\tAxisHelper.prototype = Object.create( LineSegments.prototype );\n\tAxisHelper.prototype.constructor = AxisHelper;\n\n\t/**\n\t * @author zz85 https://github.com/zz85\n\t *\n\t * Centripetal CatmullRom Curve - which is useful for avoiding\n\t * cusps and self-intersections in non-uniform catmull rom curves.\n\t * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n\t *\n\t * curve.type accepts centripetal(default), chordal and catmullrom\n\t * curve.tension is used for catmullrom which defaults to 0.5\n\t */\n\n\n\t/*\n\tBased on an optimized c++ solution in\n\t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n\t - http://ideone.com/NoEbVM\n\n\tThis CubicPoly class could be used for reusing some variables and calculations,\n\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n\twhich can be placed in CurveUtils.\n\t*/\n\n\tfunction CubicPoly() {\n\n\t\tvar c0 = 0, c1 = 0, c2 = 0, c3 = 0;\n\n\t\t/*\n\t\t * Compute coefficients for a cubic polynomial\n\t\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t\t * such that\n\t\t *   p(0) = x0, p(1) = x1\n\t\t *  and\n\t\t *   p'(0) = t0, p'(1) = t1.\n\t\t */\n\t\tfunction init( x0, x1, t0, t1 ) {\n\n\t\t\tc0 = x0;\n\t\t\tc1 = t0;\n\t\t\tc2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tinitCatmullRom: function ( x0, x1, x2, x3, tension ) {\n\n\t\t\t\tinit( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n\n\t\t\t},\n\n\t\t\tinitNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n\n\t\t\t\t// compute tangents when parameterized in [t1,t2]\n\t\t\t\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n\t\t\t\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n\n\t\t\t\t// rescale tangents for parametrization in [0,1]\n\t\t\t\tt1 *= dt1;\n\t\t\t\tt2 *= dt1;\n\n\t\t\t\tinit( x1, x2, t1, t2 );\n\n\t\t\t},\n\n\t\t\tcalc: function ( t ) {\n\n\t\t\t\tvar t2 = t * t;\n\t\t\t\tvar t3 = t2 * t;\n\t\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t//\n\n\tvar tmp = new Vector3();\n\tvar px = new CubicPoly();\n\tvar py = new CubicPoly();\n\tvar pz = new CubicPoly();\n\n\tfunction CatmullRomCurve3( points ) {\n\n\t\tCurve.call( this );\n\n\t\tif ( points.length < 2 ) console.warn( 'THREE.CatmullRomCurve3: Points array needs at least two entries.' );\n\n\t\tthis.points = points || [];\n\t\tthis.closed = false;\n\n\t}\n\n\tCatmullRomCurve3.prototype = Object.create( Curve.prototype );\n\tCatmullRomCurve3.prototype.constructor = CatmullRomCurve3;\n\n\tCatmullRomCurve3.prototype.getPoint = function ( t ) {\n\n\t\tvar points = this.points;\n\t\tvar l = points.length;\n\n\t\tvar point = ( l - ( this.closed ? 0 : 1 ) ) * t;\n\t\tvar intPoint = Math.floor( point );\n\t\tvar weight = point - intPoint;\n\n\t\tif ( this.closed ) {\n\n\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;\n\n\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\n\n\t\t\tintPoint = l - 2;\n\t\t\tweight = 1;\n\n\t\t}\n\n\t\tvar p0, p1, p2, p3; // 4 points\n\n\t\tif ( this.closed || intPoint > 0 ) {\n\n\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate first point\n\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n\t\t\tp0 = tmp;\n\n\t\t}\n\n\t\tp1 = points[ intPoint % l ];\n\t\tp2 = points[ ( intPoint + 1 ) % l ];\n\n\t\tif ( this.closed || intPoint + 2 < l ) {\n\n\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate last point\n\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\n\t\t\tp3 = tmp;\n\n\t\t}\n\n\t\tif ( this.type === undefined || this.type === 'centripetal' || this.type === 'chordal' ) {\n\n\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t\t\tvar pow = this.type === 'chordal' ? 0.5 : 0.25;\n\t\t\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n\t\t\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n\t\t\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n\n\t\t\t// safety check for repeated points\n\t\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\n\t\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\n\t\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\n\n\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n\n\t\t} else if ( this.type === 'catmullrom' ) {\n\n\t\t\tvar tension = this.tension !== undefined ? this.tension : 0.5;\n\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, tension );\n\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, tension );\n\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, tension );\n\n\t\t}\n\n\t\treturn new Vector3( px.calc( weight ), py.calc( weight ), pz.calc( weight ) );\n\n\t};\n\n\tfunction CubicBezierCurve3( v0, v1, v2, v3 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t\tthis.v3 = v3;\n\n\t}\n\n\tCubicBezierCurve3.prototype = Object.create( Curve.prototype );\n\tCubicBezierCurve3.prototype.constructor = CubicBezierCurve3;\n\n\tCubicBezierCurve3.prototype.getPoint = function ( t ) {\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\t\treturn new Vector3(\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y ),\n\t\t\tCubicBezier( t, v0.z, v1.z, v2.z, v3.z )\n\t\t);\n\n\t};\n\n\tfunction QuadraticBezierCurve3( v0, v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t}\n\n\tQuadraticBezierCurve3.prototype = Object.create( Curve.prototype );\n\tQuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;\n\n\tQuadraticBezierCurve3.prototype.getPoint = function ( t ) {\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\t\treturn new Vector3(\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y ),\n\t\t\tQuadraticBezier( t, v0.z, v1.z, v2.z )\n\t\t);\n\n\t};\n\n\tfunction LineCurve3( v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t}\n\n\tLineCurve3.prototype = Object.create( Curve.prototype );\n\tLineCurve3.prototype.constructor = LineCurve3;\n\n\tLineCurve3.prototype.getPoint = function ( t ) {\n\n\t\tif ( t === 1 ) {\n\n\t\t\treturn this.v2.clone();\n\n\t\t}\n\n\t\tvar vector = new Vector3();\n\n\t\tvector.subVectors( this.v2, this.v1 ); // diff\n\t\tvector.multiplyScalar( t );\n\t\tvector.add( this.v1 );\n\n\t\treturn vector;\n\n\t};\n\n\tfunction ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tEllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t}\n\n\tArcCurve.prototype = Object.create( EllipseCurve.prototype );\n\tArcCurve.prototype.constructor = ArcCurve;\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tvar SceneUtils = {\n\n\t\tcreateMultiMaterialObject: function ( geometry, materials ) {\n\n\t\t\tvar group = new Group();\n\n\t\t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\n\n\t\t\t\tgroup.add( new Mesh( geometry, materials[ i ] ) );\n\n\t\t\t}\n\n\t\t\treturn group;\n\n\t\t},\n\n\t\tdetach: function ( child, parent, scene ) {\n\n\t\t\tchild.applyMatrix( parent.matrixWorld );\n\t\t\tparent.remove( child );\n\t\t\tscene.add( child );\n\n\t\t},\n\n\t\tattach: function ( child, scene, parent ) {\n\n\t\t\tchild.applyMatrix( new Matrix4().getInverse( parent.matrixWorld ) );\n\n\t\t\tscene.remove( child );\n\t\t\tparent.add( child );\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Face4( a, b, c, d, normal, color, materialIndex ) {\n\n\t\tconsole.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );\n\t\treturn new Face3( a, b, c, normal, color, materialIndex );\n\n\t}\n\n\tvar LineStrip = 0;\n\n\tvar LinePieces = 1;\n\n\tfunction MeshFaceMaterial( materials ) {\n\n\t\tconsole.warn( 'THREE.MeshFaceMaterial has been removed. Use an Array instead.' );\n\t\treturn materials;\n\n\t}\n\n\tfunction MultiMaterial( materials ) {\n\n\t\tif ( materials === undefined ) materials = [];\n\n\t\tconsole.warn( 'THREE.MultiMaterial has been removed. Use an Array instead.' );\n\t\tmaterials.isMultiMaterial = true;\n\t\tmaterials.materials = materials;\n\t\tmaterials.clone = function () {\n\n\t\t\treturn materials.slice();\n\n\t\t};\n\t\treturn materials;\n\n\t}\n\n\tfunction PointCloud( geometry, material ) {\n\n\t\tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\n\t\treturn new Points( geometry, material );\n\n\t}\n\n\tfunction Particle( material ) {\n\n\t\tconsole.warn( 'THREE.Particle has been renamed to THREE.Sprite.' );\n\t\treturn new Sprite( material );\n\n\t}\n\n\tfunction ParticleSystem( geometry, material ) {\n\n\t\tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\n\t\treturn new Points( geometry, material );\n\n\t}\n\n\tfunction PointCloudMaterial( parameters ) {\n\n\t\tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new PointsMaterial( parameters );\n\n\t}\n\n\tfunction ParticleBasicMaterial( parameters ) {\n\n\t\tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new PointsMaterial( parameters );\n\n\t}\n\n\tfunction ParticleSystemMaterial( parameters ) {\n\n\t\tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new PointsMaterial( parameters );\n\n\t}\n\n\tfunction Vertex( x, y, z ) {\n\n\t\tconsole.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );\n\t\treturn new Vector3( x, y, z );\n\n\t}\n\n\t//\n\n\tfunction DynamicBufferAttribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );\n\t\treturn new BufferAttribute( array, itemSize ).setDynamic( true );\n\n\t}\n\n\tfunction Int8Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.' );\n\t\treturn new Int8BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint8Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.' );\n\t\treturn new Uint8BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint8ClampedAttribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.' );\n\t\treturn new Uint8ClampedBufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Int16Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.' );\n\t\treturn new Int16BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint16Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.' );\n\t\treturn new Uint16BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Int32Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.' );\n\t\treturn new Int32BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint32Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.' );\n\t\treturn new Uint32BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Float32Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.' );\n\t\treturn new Float32BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Float64Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.' );\n\t\treturn new Float64BufferAttribute( array, itemSize );\n\n\t}\n\n\t//\n\n\tCurve.create = function ( construct, getPoint ) {\n\n\t\tconsole.log( 'THREE.Curve.create() has been deprecated' );\n\n\t\tconstruct.prototype = Object.create( Curve.prototype );\n\t\tconstruct.prototype.constructor = construct;\n\t\tconstruct.prototype.getPoint = getPoint;\n\n\t\treturn construct;\n\n\t};\n\n\t//\n\n\tfunction ClosedSplineCurve3( points ) {\n\n\t\tconsole.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );\n\n\t\tCatmullRomCurve3.call( this, points );\n\t\tthis.type = 'catmullrom';\n\t\tthis.closed = true;\n\n\t}\n\n\tClosedSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\n\n\t//\n\n\tfunction SplineCurve3( points ) {\n\n\t\tconsole.warn( 'THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );\n\n\t\tCatmullRomCurve3.call( this, points );\n\t\tthis.type = 'catmullrom';\n\n\t}\n\n\tSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\n\n\t//\n\n\tfunction Spline( points ) {\n\n\t\tconsole.warn( 'THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.' );\n\n\t\tCatmullRomCurve3.call( this, points );\n\t\tthis.type = 'catmullrom';\n\n\t}\n\n\tSpline.prototype = Object.create( CatmullRomCurve3.prototype );\n\n\tObject.assign( Spline.prototype, {\n\n\t\tinitFromArray: function ( a ) {\n\n\t\t\tconsole.error( 'THREE.Spline: .initFromArray() has been removed.' );\n\n\t\t},\n\t\tgetControlPointsArray: function ( optionalTarget ) {\n\n\t\t\tconsole.error( 'THREE.Spline: .getControlPointsArray() has been removed.' );\n\n\t\t},\n\t\treparametrizeByArcLength: function ( samplingCoef ) {\n\n\t\t\tconsole.error( 'THREE.Spline: .reparametrizeByArcLength() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\t//\n\tfunction BoundingBoxHelper( object, color ) {\n\n\t\tconsole.warn( 'THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.' );\n\t\treturn new BoxHelper( object, color );\n\n\t}\n\n\tfunction EdgesHelper( object, hex ) {\n\n\t\tconsole.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );\n\t\treturn new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\n\t}\n\n\tGridHelper.prototype.setColors = function () {\n\n\t\tconsole.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );\n\n\t};\n\n\tSkeletonHelper.prototype.update = function () {\n\n\t\tconsole.error( 'THREE.SkeletonHelper: update() no longer needs to be called.' );\n\t\t\n\t};\n\n\tfunction WireframeHelper( object, hex ) {\n\n\t\tconsole.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );\n\t\treturn new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\n\t}\n\n\t//\n\n\tfunction XHRLoader( manager ) {\n\n\t\tconsole.warn( 'THREE.XHRLoader has been renamed to THREE.FileLoader.' );\n\t\treturn new FileLoader( manager );\n\n\t}\n\n\tfunction BinaryTextureLoader( manager ) {\n\n\t\tconsole.warn( 'THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.' );\n\t\treturn new DataTextureLoader( manager );\n\n\t}\n\n\t//\n\n\tObject.assign( Box2.prototype, {\n\n\t\tcenter: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );\n\t\t\treturn this.getCenter( optionalTarget );\n\n\t\t},\n\t\tempty: function () {\n\n\t\t\tconsole.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );\n\t\t\treturn this.isEmpty();\n\n\t\t},\n\t\tisIntersectionBox: function ( box ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\n\t\t},\n\t\tsize: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );\n\t\t\treturn this.getSize( optionalTarget );\n\n\t\t}\n\t} );\n\n\tObject.assign( Box3.prototype, {\n\n\t\tcenter: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );\n\t\t\treturn this.getCenter( optionalTarget );\n\n\t\t},\n\t\tempty: function () {\n\n\t\t\tconsole.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\n\t\t\treturn this.isEmpty();\n\n\t\t},\n\t\tisIntersectionBox: function ( box ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\n\t\t},\n\t\tisIntersectionSphere: function ( sphere ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t},\n\t\tsize: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );\n\t\t\treturn this.getSize( optionalTarget );\n\n\t\t}\n\t} );\n\n\tLine3.prototype.center = function ( optionalTarget ) {\n\n\t\tconsole.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );\n\t\treturn this.getCenter( optionalTarget );\n\n\t};\n\n\t_Math.random16 = function () {\n\n\t\tconsole.warn( 'THREE.Math.random16() has been deprecated. Use Math.random() instead.' );\n\t\treturn Math.random();\n\n\t};\n\n\tObject.assign( Matrix3.prototype, {\n\n\t\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\" );\n\t\t\treturn this.toArray( array, offset );\n\n\t\t},\n\t\tmultiplyVector3: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix3( this );\n\n\t\t},\n\t\tmultiplyVector3Array: function ( a ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: .multiplyVector3Array() has been removed.'  );\n\n\t\t},\n\t\tapplyToBuffer: function( buffer, offset, length ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );\n\t\t\treturn this.applyToBufferAttribute( buffer );\n\n\t\t},\n\t\tapplyToVector3Array: function( array, offset, length ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: .applyToVector3Array() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Matrix4.prototype, {\n\n\t\textractPosition: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\n\t\t\treturn this.copyPosition( m );\n\n\t\t},\n\t\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\t\tconsole.warn( \"THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\" );\n\t\t\treturn this.toArray( array, offset );\n\n\t\t},\n\t\tgetPosition: function () {\n\n\t\t\tvar v1;\n\n\t\t\treturn function getPosition() {\n\n\t\t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\n\t\t\t\treturn v1.setFromMatrixColumn( this, 3 );\n\n\t\t\t};\n\n\t\t}(),\n\t\tsetRotationFromQuaternion: function ( q ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\n\t\t\treturn this.makeRotationFromQuaternion( q );\n\n\t\t},\n\t\tmultiplyToArray: function () {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyToArray() has been removed.' );\n\n\t\t},\n\t\tmultiplyVector3: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\n\t\t},\n\t\tmultiplyVector4: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\n\t\t},\n\t\tmultiplyVector3Array: function ( a ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .multiplyVector3Array() has been removed.'  );\n\n\t\t},\n\t\trotateAxis: function ( v ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\n\t\t\tv.transformDirection( this );\n\n\t\t},\n\t\tcrossVector: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\n\t\t},\n\t\ttranslate: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\n\n\t\t},\n\t\trotateX: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\n\n\t\t},\n\t\trotateY: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\n\n\t\t},\n\t\trotateZ: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\n\n\t\t},\n\t\trotateByAxis: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\n\n\t\t},\n\t\tapplyToBuffer: function( buffer, offset, length ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );\n\t\t\treturn this.applyToBufferAttribute( buffer );\n\n\t\t},\n\t\tapplyToVector3Array: function( array, offset, length ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .applyToVector3Array() has been removed.' );\n\n\t\t},\n\t\tmakeFrustum: function( left, right, bottom, top, near, far ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.' );\n\t\t\treturn this.makePerspective( left, right, top, bottom, near, far );\n\n\t\t}\n\n\t} );\n\n\tPlane.prototype.isIntersectionLine = function ( line ) {\n\n\t\tconsole.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\n\t\treturn this.intersectsLine( line );\n\n\t};\n\n\tQuaternion.prototype.multiplyVector3 = function ( vector ) {\n\n\t\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\n\t\treturn vector.applyQuaternion( this );\n\n\t};\n\n\tObject.assign( Ray.prototype, {\n\n\t\tisIntersectionBox: function ( box ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\n\t\t},\n\t\tisIntersectionPlane: function ( plane ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\n\t\t\treturn this.intersectsPlane( plane );\n\n\t\t},\n\t\tisIntersectionSphere: function ( sphere ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Shape.prototype, {\n\n\t\textrude: function ( options ) {\n\n\t\t\tconsole.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );\n\t\t\treturn new ExtrudeGeometry( this, options );\n\n\t\t},\n\t\tmakeGeometry: function ( options ) {\n\n\t\t\tconsole.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );\n\t\t\treturn new ShapeGeometry( this, options );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector2.prototype, {\n\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tconsole.error( 'THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector3.prototype, {\n\n\t\tsetEulerFromRotationMatrix: function () {\n\n\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\n\n\t\t},\n\t\tsetEulerFromQuaternion: function () {\n\n\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\n\n\t\t},\n\t\tgetPositionFromMatrix: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\n\t\t\treturn this.setFromMatrixPosition( m );\n\n\t\t},\n\t\tgetScaleFromMatrix: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\n\t\t\treturn this.setFromMatrixScale( m );\n\n\t\t},\n\t\tgetColumnFromMatrix: function ( index, matrix ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\n\t\t\treturn this.setFromMatrixColumn( matrix, index );\n\n\t\t},\n\t\tapplyProjection: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.' );\n\t\t\treturn this.applyMatrix4( m );\n\n\t\t},\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tconsole.error( 'THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector4.prototype, {\n\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tconsole.error( 'THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tGeometry.prototype.computeTangents = function () {\n\n\t\tconsole.warn( 'THREE.Geometry: .computeTangents() has been removed.' );\n\n\t};\n\n\tObject.assign( Object3D.prototype, {\n\n\t\tgetChildByName: function ( name ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\n\t\t\treturn this.getObjectByName( name );\n\n\t\t},\n\t\trenderDepth: function () {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\n\n\t\t},\n\t\ttranslate: function ( distance, axis ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\n\t\t\treturn this.translateOnAxis( axis, distance );\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( Object3D.prototype, {\n\n\t\teulerOrder: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\t\treturn this.rotation.order;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\t\tthis.rotation.order = value;\n\n\t\t\t}\n\t\t},\n\t\tuseQuaternion: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( LOD.prototype, {\n\n\t\tobjects: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.LOD: .objects has been renamed to .levels.' );\n\t\t\t\treturn this.levels;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperty( Skeleton.prototype, 'useVertexTexture', {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperty( Curve.prototype, '__arcLengthDivisions', {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );\n\t\t\treturn this.arcLengthDivisions;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );\n\t\t\tthis.arcLengthDivisions = value;\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tPerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {\n\n\t\tconsole.warn( \"THREE.PerspectiveCamera.setLens is deprecated. \" +\n\t\t\t\t\"Use .setFocalLength and .filmGauge for a photographic setup.\" );\n\n\t\tif ( filmGauge !== undefined ) this.filmGauge = filmGauge;\n\t\tthis.setFocalLength( focalLength );\n\n\t};\n\n\t//\n\n\tObject.defineProperties( Light.prototype, {\n\t\tonlyShadow: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraFov: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\n\t\t\t\tthis.shadow.camera.fov = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraLeft: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\n\t\t\t\tthis.shadow.camera.left = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraRight: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\n\t\t\t\tthis.shadow.camera.right = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraTop: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\n\t\t\t\tthis.shadow.camera.top = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraBottom: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\n\t\t\t\tthis.shadow.camera.bottom = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraNear: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\n\t\t\t\tthis.shadow.camera.near = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraFar: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\n\t\t\t\tthis.shadow.camera.far = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraVisible: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\n\n\t\t\t}\n\t\t},\n\t\tshadowBias: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\n\t\t\t\tthis.shadow.bias = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowDarkness: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowDarkness has been removed.' );\n\n\t\t\t}\n\t\t},\n\t\tshadowMapWidth: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\n\t\t\t\tthis.shadow.mapSize.width = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowMapHeight: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\n\t\t\t\tthis.shadow.mapSize.height = value;\n\n\t\t\t}\n\t\t}\n\t} );\n\n\t//\n\n\tObject.defineProperties( BufferAttribute.prototype, {\n\n\t\tlength: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Use .count instead.' );\n\t\t\t\treturn this.array.length;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.assign( BufferGeometry.prototype, {\n\n\t\taddIndex: function ( index ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\n\t\t\tthis.setIndex( index );\n\n\t\t},\n\t\taddDrawCall: function ( start, count, indexOffset ) {\n\n\t\t\tif ( indexOffset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\n\n\t\t\t}\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\n\t\t\tthis.addGroup( start, count );\n\n\t\t},\n\t\tclearDrawCalls: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\n\t\t\tthis.clearGroups();\n\n\t\t},\n\t\tcomputeTangents: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );\n\n\t\t},\n\t\tcomputeOffsets: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( BufferGeometry.prototype, {\n\n\t\tdrawcalls: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\n\t\t\t\treturn this.groups;\n\n\t\t\t}\n\t\t},\n\t\toffsets: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\n\t\t\t\treturn this.groups;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( Uniform.prototype, {\n\n\t\tdynamic: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.' );\n\n\t\t\t}\n\t\t},\n\t\tonUpdate: {\n\t\t\tvalue: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );\n\t\t\t\treturn this;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( Material.prototype, {\n\n\t\twrapAround: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\n\n\t\t\t}\n\t\t},\n\t\twrapRGB: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapRGB has been removed.' );\n\t\t\t\treturn new Color();\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( MeshPhongMaterial.prototype, {\n\n\t\tmetal: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );\n\t\t\t\treturn false;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( ShaderMaterial.prototype, {\n\n\t\tderivatives: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\t\treturn this.extensions.derivatives;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\t\tthis.extensions.derivatives = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( WebGLRenderer.prototype, {\n\n\t\tgetCurrentRenderTarget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().' );\n\t\t\treturn this.getRenderTarget();\n\n\t\t},\n\n\t\tsupportsFloatTextures: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_texture_float' );\n\n\t\t},\n\t\tsupportsHalfFloatTextures: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_texture_half_float' );\n\n\t\t},\n\t\tsupportsStandardDerivatives: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_standard_derivatives' );\n\n\t\t},\n\t\tsupportsCompressedTextureS3TC: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\n\t\t\treturn this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\t},\n\t\tsupportsCompressedTexturePVRTC: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\n\t\t\treturn this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\t},\n\t\tsupportsBlendMinMax: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\n\t\t\treturn this.extensions.get( 'EXT_blend_minmax' );\n\n\t\t},\n\t\tsupportsVertexTextures: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.' );\n\t\t\treturn this.capabilities.vertexTextures;\n\n\t\t},\n\t\tsupportsInstancedArrays: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\n\t\t\treturn this.extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t},\n\t\tenableScissorTest: function ( boolean ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\n\t\t\tthis.setScissorTest( boolean );\n\n\t\t},\n\t\tinitMaterial: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\n\n\t\t},\n\t\taddPrePlugin: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\n\n\t\t},\n\t\taddPostPlugin: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\n\n\t\t},\n\t\tupdateShadowMap: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( WebGLRenderer.prototype, {\n\n\t\tshadowMapEnabled: {\n\t\t\tget: function () {\n\n\t\t\t\treturn this.shadowMap.enabled;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\n\t\t\t\tthis.shadowMap.enabled = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowMapType: {\n\t\t\tget: function () {\n\n\t\t\t\treturn this.shadowMap.type;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\n\t\t\t\tthis.shadowMap.type = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowMapCullFace: {\n\t\t\tget: function () {\n\n\t\t\t\treturn this.shadowMap.cullFace;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.' );\n\t\t\t\tthis.shadowMap.cullFace = value;\n\n\t\t\t}\n\t\t}\n\t} );\n\n\tObject.defineProperties( WebGLShadowMap.prototype, {\n\n\t\tcullFace: {\n\t\t\tget: function () {\n\n\t\t\t\treturn this.renderReverseSided ? CullFaceFront : CullFaceBack;\n\n\t\t\t},\n\t\t\tset: function ( cullFace ) {\n\n\t\t\t\tvar value = ( cullFace !== CullFaceBack );\n\t\t\t\tconsole.warn( \"WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to \" + value + \".\" );\n\t\t\t\tthis.renderReverseSided = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( WebGLRenderTarget.prototype, {\n\n\t\twrapS: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\t\treturn this.texture.wrapS;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\t\tthis.texture.wrapS = value;\n\n\t\t\t}\n\t\t},\n\t\twrapT: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\t\treturn this.texture.wrapT;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\t\tthis.texture.wrapT = value;\n\n\t\t\t}\n\t\t},\n\t\tmagFilter: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\t\treturn this.texture.magFilter;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\t\tthis.texture.magFilter = value;\n\n\t\t\t}\n\t\t},\n\t\tminFilter: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\t\treturn this.texture.minFilter;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\t\tthis.texture.minFilter = value;\n\n\t\t\t}\n\t\t},\n\t\tanisotropy: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\t\treturn this.texture.anisotropy;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\t\tthis.texture.anisotropy = value;\n\n\t\t\t}\n\t\t},\n\t\toffset: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\t\treturn this.texture.offset;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\t\tthis.texture.offset = value;\n\n\t\t\t}\n\t\t},\n\t\trepeat: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\t\treturn this.texture.repeat;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\t\tthis.texture.repeat = value;\n\n\t\t\t}\n\t\t},\n\t\tformat: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\t\treturn this.texture.format;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\t\tthis.texture.format = value;\n\n\t\t\t}\n\t\t},\n\t\ttype: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\t\treturn this.texture.type;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\t\tthis.texture.type = value;\n\n\t\t\t}\n\t\t},\n\t\tgenerateMipmaps: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\t\treturn this.texture.generateMipmaps;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\t\tthis.texture.generateMipmaps = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tAudio.prototype.load = function ( file ) {\n\n\t\tconsole.warn( 'THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.' );\n\t\tvar scope = this;\n\t\tvar audioLoader = new AudioLoader();\n\t\taudioLoader.load( file, function ( buffer ) {\n\n\t\t\tscope.setBuffer( buffer );\n\n\t\t} );\n\t\treturn this;\n\n\t};\n\n\tAudioAnalyser.prototype.getData = function () {\n\n\t\tconsole.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );\n\t\treturn this.getFrequencyData();\n\n\t};\n\n\t//\n\n\tvar GeometryUtils = {\n\n\t\tmerge: function ( geometry1, geometry2, materialIndexOffset ) {\n\n\t\t\tconsole.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );\n\t\t\tvar matrix;\n\n\t\t\tif ( geometry2.isMesh ) {\n\n\t\t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\n\n\t\t\t\tmatrix = geometry2.matrix;\n\t\t\t\tgeometry2 = geometry2.geometry;\n\n\t\t\t}\n\n\t\t\tgeometry1.merge( geometry2, matrix, materialIndexOffset );\n\n\t\t},\n\n\t\tcenter: function ( geometry ) {\n\n\t\t\tconsole.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );\n\t\t\treturn geometry.center();\n\n\t\t}\n\n\t};\n\n\tvar ImageUtils = {\n\n\t\tcrossOrigin: undefined,\n\n\t\tloadTexture: function ( url, mapping, onLoad, onError ) {\n\n\t\t\tconsole.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\n\n\t\t\tvar loader = new TextureLoader();\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\tvar texture = loader.load( url, onLoad, undefined, onError );\n\n\t\t\tif ( mapping ) texture.mapping = mapping;\n\n\t\t\treturn texture;\n\n\t\t},\n\n\t\tloadTextureCube: function ( urls, mapping, onLoad, onError ) {\n\n\t\t\tconsole.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\n\n\t\t\tvar loader = new CubeTextureLoader();\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\tvar texture = loader.load( urls, onLoad, undefined, onError );\n\n\t\t\tif ( mapping ) texture.mapping = mapping;\n\n\t\t\treturn texture;\n\n\t\t},\n\n\t\tloadCompressedTexture: function () {\n\n\t\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\n\n\t\t},\n\n\t\tloadCompressedTextureCube: function () {\n\n\t\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\n\n\t\t}\n\n\t};\n\n\t//\n\n\tfunction Projector() {\n\n\t\tconsole.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );\n\n\t\tthis.projectVector = function ( vector, camera ) {\n\n\t\t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\n\t\t\tvector.project( camera );\n\n\t\t};\n\n\t\tthis.unprojectVector = function ( vector, camera ) {\n\n\t\t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\n\t\t\tvector.unproject( camera );\n\n\t\t};\n\n\t\tthis.pickingRay = function () {\n\n\t\t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\n\n\t\t};\n\n\t}\n\n\t//\n\n\tfunction CanvasRenderer() {\n\n\t\tconsole.error( 'THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js' );\n\n\t\tthis.domElement = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\tthis.clear = function () {};\n\t\tthis.render = function () {};\n\t\tthis.setClearColor = function () {};\n\t\tthis.setSize = function () {};\n\n\t}\n\n\texports.WebGLRenderTargetCube = WebGLRenderTargetCube;\n\texports.WebGLRenderTarget = WebGLRenderTarget;\n\texports.WebGLRenderer = WebGLRenderer;\n\texports.ShaderLib = ShaderLib;\n\texports.UniformsLib = UniformsLib;\n\texports.UniformsUtils = UniformsUtils;\n\texports.ShaderChunk = ShaderChunk;\n\texports.FogExp2 = FogExp2;\n\texports.Fog = Fog;\n\texports.Scene = Scene;\n\texports.LensFlare = LensFlare;\n\texports.Sprite = Sprite;\n\texports.LOD = LOD;\n\texports.SkinnedMesh = SkinnedMesh;\n\texports.Skeleton = Skeleton;\n\texports.Bone = Bone;\n\texports.Mesh = Mesh;\n\texports.LineSegments = LineSegments;\n\texports.LineLoop = LineLoop;\n\texports.Line = Line;\n\texports.Points = Points;\n\texports.Group = Group;\n\texports.VideoTexture = VideoTexture;\n\texports.DataTexture = DataTexture;\n\texports.CompressedTexture = CompressedTexture;\n\texports.CubeTexture = CubeTexture;\n\texports.CanvasTexture = CanvasTexture;\n\texports.DepthTexture = DepthTexture;\n\texports.Texture = Texture;\n\texports.CompressedTextureLoader = CompressedTextureLoader;\n\texports.DataTextureLoader = DataTextureLoader;\n\texports.CubeTextureLoader = CubeTextureLoader;\n\texports.TextureLoader = TextureLoader;\n\texports.ObjectLoader = ObjectLoader;\n\texports.MaterialLoader = MaterialLoader;\n\texports.BufferGeometryLoader = BufferGeometryLoader;\n\texports.DefaultLoadingManager = DefaultLoadingManager;\n\texports.LoadingManager = LoadingManager;\n\texports.JSONLoader = JSONLoader;\n\texports.ImageLoader = ImageLoader;\n\texports.FontLoader = FontLoader;\n\texports.FileLoader = FileLoader;\n\texports.Loader = Loader;\n\texports.Cache = Cache;\n\texports.AudioLoader = AudioLoader;\n\texports.SpotLightShadow = SpotLightShadow;\n\texports.SpotLight = SpotLight;\n\texports.PointLight = PointLight;\n\texports.RectAreaLight = RectAreaLight;\n\texports.HemisphereLight = HemisphereLight;\n\texports.DirectionalLightShadow = DirectionalLightShadow;\n\texports.DirectionalLight = DirectionalLight;\n\texports.AmbientLight = AmbientLight;\n\texports.LightShadow = LightShadow;\n\texports.Light = Light;\n\texports.StereoCamera = StereoCamera;\n\texports.PerspectiveCamera = PerspectiveCamera;\n\texports.OrthographicCamera = OrthographicCamera;\n\texports.CubeCamera = CubeCamera;\n\texports.ArrayCamera = ArrayCamera;\n\texports.Camera = Camera;\n\texports.AudioListener = AudioListener;\n\texports.PositionalAudio = PositionalAudio;\n\texports.AudioContext = AudioContext;\n\texports.AudioAnalyser = AudioAnalyser;\n\texports.Audio = Audio;\n\texports.VectorKeyframeTrack = VectorKeyframeTrack;\n\texports.StringKeyframeTrack = StringKeyframeTrack;\n\texports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;\n\texports.NumberKeyframeTrack = NumberKeyframeTrack;\n\texports.ColorKeyframeTrack = ColorKeyframeTrack;\n\texports.BooleanKeyframeTrack = BooleanKeyframeTrack;\n\texports.PropertyMixer = PropertyMixer;\n\texports.PropertyBinding = PropertyBinding;\n\texports.KeyframeTrack = KeyframeTrack;\n\texports.AnimationUtils = AnimationUtils;\n\texports.AnimationObjectGroup = AnimationObjectGroup;\n\texports.AnimationMixer = AnimationMixer;\n\texports.AnimationClip = AnimationClip;\n\texports.Uniform = Uniform;\n\texports.InstancedBufferGeometry = InstancedBufferGeometry;\n\texports.BufferGeometry = BufferGeometry;\n\texports.GeometryIdCount = GeometryIdCount;\n\texports.Geometry = Geometry;\n\texports.InterleavedBufferAttribute = InterleavedBufferAttribute;\n\texports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;\n\texports.InterleavedBuffer = InterleavedBuffer;\n\texports.InstancedBufferAttribute = InstancedBufferAttribute;\n\texports.Face3 = Face3;\n\texports.Object3D = Object3D;\n\texports.Raycaster = Raycaster;\n\texports.Layers = Layers;\n\texports.EventDispatcher = EventDispatcher;\n\texports.Clock = Clock;\n\texports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;\n\texports.LinearInterpolant = LinearInterpolant;\n\texports.DiscreteInterpolant = DiscreteInterpolant;\n\texports.CubicInterpolant = CubicInterpolant;\n\texports.Interpolant = Interpolant;\n\texports.Triangle = Triangle;\n\texports.Math = _Math;\n\texports.Spherical = Spherical;\n\texports.Cylindrical = Cylindrical;\n\texports.Plane = Plane;\n\texports.Frustum = Frustum;\n\texports.Sphere = Sphere;\n\texports.Ray = Ray;\n\texports.Matrix4 = Matrix4;\n\texports.Matrix3 = Matrix3;\n\texports.Box3 = Box3;\n\texports.Box2 = Box2;\n\texports.Line3 = Line3;\n\texports.Euler = Euler;\n\texports.Vector4 = Vector4;\n\texports.Vector3 = Vector3;\n\texports.Vector2 = Vector2;\n\texports.Quaternion = Quaternion;\n\texports.Color = Color;\n\texports.MorphBlendMesh = MorphBlendMesh;\n\texports.ImmediateRenderObject = ImmediateRenderObject;\n\texports.VertexNormalsHelper = VertexNormalsHelper;\n\texports.SpotLightHelper = SpotLightHelper;\n\texports.SkeletonHelper = SkeletonHelper;\n\texports.PointLightHelper = PointLightHelper;\n\texports.RectAreaLightHelper = RectAreaLightHelper;\n\texports.HemisphereLightHelper = HemisphereLightHelper;\n\texports.GridHelper = GridHelper;\n\texports.PolarGridHelper = PolarGridHelper;\n\texports.FaceNormalsHelper = FaceNormalsHelper;\n\texports.DirectionalLightHelper = DirectionalLightHelper;\n\texports.CameraHelper = CameraHelper;\n\texports.BoxHelper = BoxHelper;\n\texports.ArrowHelper = ArrowHelper;\n\texports.AxisHelper = AxisHelper;\n\texports.CatmullRomCurve3 = CatmullRomCurve3;\n\texports.CubicBezierCurve3 = CubicBezierCurve3;\n\texports.QuadraticBezierCurve3 = QuadraticBezierCurve3;\n\texports.LineCurve3 = LineCurve3;\n\texports.ArcCurve = ArcCurve;\n\texports.EllipseCurve = EllipseCurve;\n\texports.SplineCurve = SplineCurve;\n\texports.CubicBezierCurve = CubicBezierCurve;\n\texports.QuadraticBezierCurve = QuadraticBezierCurve;\n\texports.LineCurve = LineCurve;\n\texports.Shape = Shape;\n\texports.Path = Path;\n\texports.ShapePath = ShapePath;\n\texports.Font = Font;\n\texports.CurvePath = CurvePath;\n\texports.Curve = Curve;\n\texports.ShapeUtils = ShapeUtils;\n\texports.SceneUtils = SceneUtils;\n\texports.WireframeGeometry = WireframeGeometry;\n\texports.ParametricGeometry = ParametricGeometry;\n\texports.ParametricBufferGeometry = ParametricBufferGeometry;\n\texports.TetrahedronGeometry = TetrahedronGeometry;\n\texports.TetrahedronBufferGeometry = TetrahedronBufferGeometry;\n\texports.OctahedronGeometry = OctahedronGeometry;\n\texports.OctahedronBufferGeometry = OctahedronBufferGeometry;\n\texports.IcosahedronGeometry = IcosahedronGeometry;\n\texports.IcosahedronBufferGeometry = IcosahedronBufferGeometry;\n\texports.DodecahedronGeometry = DodecahedronGeometry;\n\texports.DodecahedronBufferGeometry = DodecahedronBufferGeometry;\n\texports.PolyhedronGeometry = PolyhedronGeometry;\n\texports.PolyhedronBufferGeometry = PolyhedronBufferGeometry;\n\texports.TubeGeometry = TubeGeometry;\n\texports.TubeBufferGeometry = TubeBufferGeometry;\n\texports.TorusKnotGeometry = TorusKnotGeometry;\n\texports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;\n\texports.TorusGeometry = TorusGeometry;\n\texports.TorusBufferGeometry = TorusBufferGeometry;\n\texports.TextGeometry = TextGeometry;\n\texports.TextBufferGeometry = TextBufferGeometry;\n\texports.SphereGeometry = SphereGeometry;\n\texports.SphereBufferGeometry = SphereBufferGeometry;\n\texports.RingGeometry = RingGeometry;\n\texports.RingBufferGeometry = RingBufferGeometry;\n\texports.PlaneGeometry = PlaneGeometry;\n\texports.PlaneBufferGeometry = PlaneBufferGeometry;\n\texports.LatheGeometry = LatheGeometry;\n\texports.LatheBufferGeometry = LatheBufferGeometry;\n\texports.ShapeGeometry = ShapeGeometry;\n\texports.ShapeBufferGeometry = ShapeBufferGeometry;\n\texports.ExtrudeGeometry = ExtrudeGeometry;\n\texports.ExtrudeBufferGeometry = ExtrudeBufferGeometry;\n\texports.EdgesGeometry = EdgesGeometry;\n\texports.ConeGeometry = ConeGeometry;\n\texports.ConeBufferGeometry = ConeBufferGeometry;\n\texports.CylinderGeometry = CylinderGeometry;\n\texports.CylinderBufferGeometry = CylinderBufferGeometry;\n\texports.CircleGeometry = CircleGeometry;\n\texports.CircleBufferGeometry = CircleBufferGeometry;\n\texports.BoxGeometry = BoxGeometry;\n\texports.BoxBufferGeometry = BoxBufferGeometry;\n\texports.ShadowMaterial = ShadowMaterial;\n\texports.SpriteMaterial = SpriteMaterial;\n\texports.RawShaderMaterial = RawShaderMaterial;\n\texports.ShaderMaterial = ShaderMaterial;\n\texports.PointsMaterial = PointsMaterial;\n\texports.MeshPhysicalMaterial = MeshPhysicalMaterial;\n\texports.MeshStandardMaterial = MeshStandardMaterial;\n\texports.MeshPhongMaterial = MeshPhongMaterial;\n\texports.MeshToonMaterial = MeshToonMaterial;\n\texports.MeshNormalMaterial = MeshNormalMaterial;\n\texports.MeshLambertMaterial = MeshLambertMaterial;\n\texports.MeshDepthMaterial = MeshDepthMaterial;\n\texports.MeshBasicMaterial = MeshBasicMaterial;\n\texports.LineDashedMaterial = LineDashedMaterial;\n\texports.LineBasicMaterial = LineBasicMaterial;\n\texports.Material = Material;\n\texports.Float64BufferAttribute = Float64BufferAttribute;\n\texports.Float32BufferAttribute = Float32BufferAttribute;\n\texports.Uint32BufferAttribute = Uint32BufferAttribute;\n\texports.Int32BufferAttribute = Int32BufferAttribute;\n\texports.Uint16BufferAttribute = Uint16BufferAttribute;\n\texports.Int16BufferAttribute = Int16BufferAttribute;\n\texports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;\n\texports.Uint8BufferAttribute = Uint8BufferAttribute;\n\texports.Int8BufferAttribute = Int8BufferAttribute;\n\texports.BufferAttribute = BufferAttribute;\n\texports.REVISION = REVISION;\n\texports.MOUSE = MOUSE;\n\texports.CullFaceNone = CullFaceNone;\n\texports.CullFaceBack = CullFaceBack;\n\texports.CullFaceFront = CullFaceFront;\n\texports.CullFaceFrontBack = CullFaceFrontBack;\n\texports.FrontFaceDirectionCW = FrontFaceDirectionCW;\n\texports.FrontFaceDirectionCCW = FrontFaceDirectionCCW;\n\texports.BasicShadowMap = BasicShadowMap;\n\texports.PCFShadowMap = PCFShadowMap;\n\texports.PCFSoftShadowMap = PCFSoftShadowMap;\n\texports.FrontSide = FrontSide;\n\texports.BackSide = BackSide;\n\texports.DoubleSide = DoubleSide;\n\texports.FlatShading = FlatShading;\n\texports.SmoothShading = SmoothShading;\n\texports.NoColors = NoColors;\n\texports.FaceColors = FaceColors;\n\texports.VertexColors = VertexColors;\n\texports.NoBlending = NoBlending;\n\texports.NormalBlending = NormalBlending;\n\texports.AdditiveBlending = AdditiveBlending;\n\texports.SubtractiveBlending = SubtractiveBlending;\n\texports.MultiplyBlending = MultiplyBlending;\n\texports.CustomBlending = CustomBlending;\n\texports.AddEquation = AddEquation;\n\texports.SubtractEquation = SubtractEquation;\n\texports.ReverseSubtractEquation = ReverseSubtractEquation;\n\texports.MinEquation = MinEquation;\n\texports.MaxEquation = MaxEquation;\n\texports.ZeroFactor = ZeroFactor;\n\texports.OneFactor = OneFactor;\n\texports.SrcColorFactor = SrcColorFactor;\n\texports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;\n\texports.SrcAlphaFactor = SrcAlphaFactor;\n\texports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;\n\texports.DstAlphaFactor = DstAlphaFactor;\n\texports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;\n\texports.DstColorFactor = DstColorFactor;\n\texports.OneMinusDstColorFactor = OneMinusDstColorFactor;\n\texports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;\n\texports.NeverDepth = NeverDepth;\n\texports.AlwaysDepth = AlwaysDepth;\n\texports.LessDepth = LessDepth;\n\texports.LessEqualDepth = LessEqualDepth;\n\texports.EqualDepth = EqualDepth;\n\texports.GreaterEqualDepth = GreaterEqualDepth;\n\texports.GreaterDepth = GreaterDepth;\n\texports.NotEqualDepth = NotEqualDepth;\n\texports.MultiplyOperation = MultiplyOperation;\n\texports.MixOperation = MixOperation;\n\texports.AddOperation = AddOperation;\n\texports.NoToneMapping = NoToneMapping;\n\texports.LinearToneMapping = LinearToneMapping;\n\texports.ReinhardToneMapping = ReinhardToneMapping;\n\texports.Uncharted2ToneMapping = Uncharted2ToneMapping;\n\texports.CineonToneMapping = CineonToneMapping;\n\texports.UVMapping = UVMapping;\n\texports.CubeReflectionMapping = CubeReflectionMapping;\n\texports.CubeRefractionMapping = CubeRefractionMapping;\n\texports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;\n\texports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;\n\texports.SphericalReflectionMapping = SphericalReflectionMapping;\n\texports.CubeUVReflectionMapping = CubeUVReflectionMapping;\n\texports.CubeUVRefractionMapping = CubeUVRefractionMapping;\n\texports.RepeatWrapping = RepeatWrapping;\n\texports.ClampToEdgeWrapping = ClampToEdgeWrapping;\n\texports.MirroredRepeatWrapping = MirroredRepeatWrapping;\n\texports.NearestFilter = NearestFilter;\n\texports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;\n\texports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;\n\texports.LinearFilter = LinearFilter;\n\texports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;\n\texports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;\n\texports.UnsignedByteType = UnsignedByteType;\n\texports.ByteType = ByteType;\n\texports.ShortType = ShortType;\n\texports.UnsignedShortType = UnsignedShortType;\n\texports.IntType = IntType;\n\texports.UnsignedIntType = UnsignedIntType;\n\texports.FloatType = FloatType;\n\texports.HalfFloatType = HalfFloatType;\n\texports.UnsignedShort4444Type = UnsignedShort4444Type;\n\texports.UnsignedShort5551Type = UnsignedShort5551Type;\n\texports.UnsignedShort565Type = UnsignedShort565Type;\n\texports.UnsignedInt248Type = UnsignedInt248Type;\n\texports.AlphaFormat = AlphaFormat;\n\texports.RGBFormat = RGBFormat;\n\texports.RGBAFormat = RGBAFormat;\n\texports.LuminanceFormat = LuminanceFormat;\n\texports.LuminanceAlphaFormat = LuminanceAlphaFormat;\n\texports.RGBEFormat = RGBEFormat;\n\texports.DepthFormat = DepthFormat;\n\texports.DepthStencilFormat = DepthStencilFormat;\n\texports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;\n\texports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;\n\texports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;\n\texports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;\n\texports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;\n\texports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;\n\texports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;\n\texports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;\n\texports.RGB_ETC1_Format = RGB_ETC1_Format;\n\texports.LoopOnce = LoopOnce;\n\texports.LoopRepeat = LoopRepeat;\n\texports.LoopPingPong = LoopPingPong;\n\texports.InterpolateDiscrete = InterpolateDiscrete;\n\texports.InterpolateLinear = InterpolateLinear;\n\texports.InterpolateSmooth = InterpolateSmooth;\n\texports.ZeroCurvatureEnding = ZeroCurvatureEnding;\n\texports.ZeroSlopeEnding = ZeroSlopeEnding;\n\texports.WrapAroundEnding = WrapAroundEnding;\n\texports.TrianglesDrawMode = TrianglesDrawMode;\n\texports.TriangleStripDrawMode = TriangleStripDrawMode;\n\texports.TriangleFanDrawMode = TriangleFanDrawMode;\n\texports.LinearEncoding = LinearEncoding;\n\texports.sRGBEncoding = sRGBEncoding;\n\texports.GammaEncoding = GammaEncoding;\n\texports.RGBEEncoding = RGBEEncoding;\n\texports.LogLuvEncoding = LogLuvEncoding;\n\texports.RGBM7Encoding = RGBM7Encoding;\n\texports.RGBM16Encoding = RGBM16Encoding;\n\texports.RGBDEncoding = RGBDEncoding;\n\texports.BasicDepthPacking = BasicDepthPacking;\n\texports.RGBADepthPacking = RGBADepthPacking;\n\texports.CubeGeometry = BoxGeometry;\n\texports.Face4 = Face4;\n\texports.LineStrip = LineStrip;\n\texports.LinePieces = LinePieces;\n\texports.MeshFaceMaterial = MeshFaceMaterial;\n\texports.MultiMaterial = MultiMaterial;\n\texports.PointCloud = PointCloud;\n\texports.Particle = Particle;\n\texports.ParticleSystem = ParticleSystem;\n\texports.PointCloudMaterial = PointCloudMaterial;\n\texports.ParticleBasicMaterial = ParticleBasicMaterial;\n\texports.ParticleSystemMaterial = ParticleSystemMaterial;\n\texports.Vertex = Vertex;\n\texports.DynamicBufferAttribute = DynamicBufferAttribute;\n\texports.Int8Attribute = Int8Attribute;\n\texports.Uint8Attribute = Uint8Attribute;\n\texports.Uint8ClampedAttribute = Uint8ClampedAttribute;\n\texports.Int16Attribute = Int16Attribute;\n\texports.Uint16Attribute = Uint16Attribute;\n\texports.Int32Attribute = Int32Attribute;\n\texports.Uint32Attribute = Uint32Attribute;\n\texports.Float32Attribute = Float32Attribute;\n\texports.Float64Attribute = Float64Attribute;\n\texports.ClosedSplineCurve3 = ClosedSplineCurve3;\n\texports.SplineCurve3 = SplineCurve3;\n\texports.Spline = Spline;\n\texports.BoundingBoxHelper = BoundingBoxHelper;\n\texports.EdgesHelper = EdgesHelper;\n\texports.WireframeHelper = WireframeHelper;\n\texports.XHRLoader = XHRLoader;\n\texports.BinaryTextureLoader = BinaryTextureLoader;\n\texports.GeometryUtils = GeometryUtils;\n\texports.ImageUtils = ImageUtils;\n\texports.Projector = Projector;\n\texports.CanvasRenderer = CanvasRenderer;\n\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.SpriteCanvasMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'SpriteCanvasMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff );\n\tthis.program = function () {};\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.SpriteCanvasMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.SpriteCanvasMaterial.prototype.constructor = THREE.SpriteCanvasMaterial;\nTHREE.SpriteCanvasMaterial.prototype.isSpriteCanvasMaterial = true;\n\nTHREE.SpriteCanvasMaterial.prototype.clone = function () {\n\n\tvar material = new THREE.SpriteCanvasMaterial();\n\n\tmaterial.copy( this );\n\tmaterial.color.copy( this.color );\n\tmaterial.program = this.program;\n\n\treturn material;\n\n};\n\n//\n\nTHREE.CanvasRenderer = function ( parameters ) {\n\n\tconsole.log( 'THREE.CanvasRenderer', THREE.REVISION );\n\n\tparameters = parameters || {};\n\n\tvar _this = this,\n\t\t_renderData, _elements, _lights,\n\t\t_projector = new THREE.Projector(),\n\n\t\t_canvas = parameters.canvas !== undefined\n\t\t\t\t ? parameters.canvas\n\t\t\t\t : document.createElement( 'canvas' ),\n\n\t\t_canvasWidth = _canvas.width,\n\t\t_canvasHeight = _canvas.height,\n\t\t_canvasWidthHalf = Math.floor( _canvasWidth / 2 ),\n\t\t_canvasHeightHalf = Math.floor( _canvasHeight / 2 ),\n\n\t\t_viewportX = 0,\n\t\t_viewportY = 0,\n\t\t_viewportWidth = _canvasWidth,\n\t\t_viewportHeight = _canvasHeight,\n\n\t\t_pixelRatio = 1,\n\n\t\t_context = _canvas.getContext( '2d', {\n\t\t\talpha: parameters.alpha === true\n\t\t} ),\n\n\t\t_clearColor = new THREE.Color( 0x000000 ),\n\t\t_clearAlpha = parameters.alpha === true ? 0 : 1,\n\n\t\t_contextGlobalAlpha = 1,\n\t\t_contextGlobalCompositeOperation = 0,\n\t\t_contextStrokeStyle = null,\n\t\t_contextFillStyle = null,\n\t\t_contextLineWidth = null,\n\t\t_contextLineCap = null,\n\t\t_contextLineJoin = null,\n\t\t_contextLineDash = [],\n\n\t\t_v1, _v2, _v3,\n\n\t\t_v1x, _v1y, _v2x, _v2y, _v3x, _v3y,\n\n\t\t_color = new THREE.Color(),\n\n\t\t_diffuseColor = new THREE.Color(),\n\t\t_emissiveColor = new THREE.Color(),\n\n\t\t_lightColor = new THREE.Color(),\n\n\t\t_patterns = {},\n\n\t\t_uvs,\n\t\t_uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y,\n\n\t\t_clipBox = new THREE.Box2(),\n\t\t_clearBox = new THREE.Box2(),\n\t\t_elemBox = new THREE.Box2(),\n\n\t\t_ambientLight = new THREE.Color(),\n\t\t_directionalLights = new THREE.Color(),\n\t\t_pointLights = new THREE.Color(),\n\n\t\t_vector3 = new THREE.Vector3(), // Needed for PointLight\n\t\t_centroid = new THREE.Vector3(),\n\t\t_normal = new THREE.Vector3(),\n\t\t_normalViewMatrix = new THREE.Matrix3();\n\n\t/* TODO\n\t_canvas.mozImageSmoothingEnabled = false;\n\t_canvas.webkitImageSmoothingEnabled = false;\n\t_canvas.msImageSmoothingEnabled = false;\n\t_canvas.imageSmoothingEnabled = false;\n\t*/\n\n\t// dash+gap fallbacks for Firefox and everything else\n\n\tif ( _context.setLineDash === undefined ) {\n\n\t\t_context.setLineDash = function () {};\n\n\t}\n\n\tthis.domElement = _canvas;\n\n\tthis.autoClear = true;\n\tthis.sortObjects = true;\n\tthis.sortElements = true;\n\n\tthis.info = {\n\n\t\trender: {\n\n\t\t\tvertices: 0,\n\t\t\tfaces: 0\n\n\t\t}\n\n\t};\n\n\t// WebGLRenderer compatibility\n\n\tthis.supportsVertexTextures = function () {};\n\tthis.setFaceCulling = function () {};\n\n\t// API\n\n\tthis.getContext = function () {\n\n\t\treturn _context;\n\n\t};\n\n\tthis.getContextAttributes = function () {\n\n\t\treturn _context.getContextAttributes();\n\n\t};\n\n\tthis.getPixelRatio = function () {\n\n\t\treturn _pixelRatio;\n\n\t};\n\n\tthis.setPixelRatio = function ( value ) {\n\n\t\tif ( value !== undefined ) _pixelRatio = value;\n\n\t};\n\n\tthis.setSize = function ( width, height, updateStyle ) {\n\n\t\t_canvasWidth = width * _pixelRatio;\n\t\t_canvasHeight = height * _pixelRatio;\n\n\t\t_canvas.width = _canvasWidth;\n\t\t_canvas.height = _canvasHeight;\n\n\t\t_canvasWidthHalf = Math.floor( _canvasWidth / 2 );\n\t\t_canvasHeightHalf = Math.floor( _canvasHeight / 2 );\n\n\t\tif ( updateStyle !== false ) {\n\n\t\t\t_canvas.style.width = width + 'px';\n\t\t\t_canvas.style.height = height + 'px';\n\n\t\t}\n\n\t\t_clipBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );\n\t\t_clipBox.max.set(   _canvasWidthHalf,   _canvasHeightHalf );\n\n\t\t_clearBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );\n\t\t_clearBox.max.set(   _canvasWidthHalf,   _canvasHeightHalf );\n\n\t\t_contextGlobalAlpha = 1;\n\t\t_contextGlobalCompositeOperation = 0;\n\t\t_contextStrokeStyle = null;\n\t\t_contextFillStyle = null;\n\t\t_contextLineWidth = null;\n\t\t_contextLineCap = null;\n\t\t_contextLineJoin = null;\n\n\t\tthis.setViewport( 0, 0, width, height );\n\n\t};\n\n\tthis.setViewport = function ( x, y, width, height ) {\n\n\t\t_viewportX = x * _pixelRatio;\n\t\t_viewportY = y * _pixelRatio;\n\n\t\t_viewportWidth = width * _pixelRatio;\n\t\t_viewportHeight = height * _pixelRatio;\n\n\t};\n\n\tthis.setScissor = function () {};\n\tthis.setScissorTest = function () {};\n\n\tthis.setClearColor = function ( color, alpha ) {\n\n\t\t_clearColor.set( color );\n\t\t_clearAlpha = alpha !== undefined ? alpha : 1;\n\n\t\t_clearBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );\n\t\t_clearBox.max.set(   _canvasWidthHalf,   _canvasHeightHalf );\n\n\t};\n\n\tthis.setClearColorHex = function ( hex, alpha ) {\n\n\t\tconsole.warn( 'THREE.CanvasRenderer: .setClearColorHex() is being removed. Use .setClearColor() instead.' );\n\t\tthis.setClearColor( hex, alpha );\n\n\t};\n\n\tthis.getClearColor = function () {\n\n\t\treturn _clearColor;\n\n\t};\n\n\tthis.getClearAlpha = function () {\n\n\t\treturn _clearAlpha;\n\n\t};\n\n\tthis.getMaxAnisotropy = function () {\n\n\t\treturn 0;\n\n\t};\n\n\tthis.clear = function () {\n\n\t\tif ( _clearBox.isEmpty() === false ) {\n\n\t\t\t_clearBox.intersect( _clipBox );\n\t\t\t_clearBox.expandByScalar( 2 );\n\n\t\t\t_clearBox.min.x =   _clearBox.min.x + _canvasWidthHalf;\n\t\t\t_clearBox.min.y = - _clearBox.min.y + _canvasHeightHalf;\t\t// higher y value !\n\t\t\t_clearBox.max.x =   _clearBox.max.x + _canvasWidthHalf;\n\t\t\t_clearBox.max.y = - _clearBox.max.y + _canvasHeightHalf;\t\t// lower y value !\n\n\t\t\tif ( _clearAlpha < 1 ) {\n\n\t\t\t\t_context.clearRect(\n\t\t\t\t\t_clearBox.min.x | 0,\n\t\t\t\t\t_clearBox.max.y | 0,\n\t\t\t\t\t( _clearBox.max.x - _clearBox.min.x ) | 0,\n\t\t\t\t\t( _clearBox.min.y - _clearBox.max.y ) | 0\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( _clearAlpha > 0 ) {\n\n\t\t\t\tsetBlending( THREE.NormalBlending );\n\t\t\t\tsetOpacity( 1 );\n\n\t\t\t\tsetFillStyle( 'rgba(' + Math.floor( _clearColor.r * 255 ) + ',' + Math.floor( _clearColor.g * 255 ) + ',' + Math.floor( _clearColor.b * 255 ) + ',' + _clearAlpha + ')' );\n\n\t\t\t\t_context.fillRect(\n\t\t\t\t\t_clearBox.min.x | 0,\n\t\t\t\t\t_clearBox.max.y | 0,\n\t\t\t\t\t( _clearBox.max.x - _clearBox.min.x ) | 0,\n\t\t\t\t\t( _clearBox.min.y - _clearBox.max.y ) | 0\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\t_clearBox.makeEmpty();\n\n\t\t}\n\n\t};\n\n\t// compatibility\n\n\tthis.clearColor = function () {};\n\tthis.clearDepth = function () {};\n\tthis.clearStencil = function () {};\n\n\tthis.render = function ( scene, camera ) {\n\n\t\tif ( camera.isCamera === undefined ) {\n\n\t\t\tconsole.error( 'THREE.CanvasRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar background = scene.background;\n\n\t\tif ( background && background.isColor ) {\n\n\t\t\tsetFillStyle( 'rgb(' + Math.floor( background.r * 255 ) + ',' + Math.floor( background.g * 255 ) + ',' + Math.floor( background.b * 255 ) + ')' );\n\t\t\t_context.fillRect( 0, 0, _canvasWidth, _canvasHeight );\n\n\t\t} else if ( this.autoClear === true ) {\n\n\t\t\tthis.clear();\n\n\t\t}\n\n\t\t_this.info.render.vertices = 0;\n\t\t_this.info.render.faces = 0;\n\n\t\t_context.setTransform( _viewportWidth / _canvasWidth, 0, 0, - _viewportHeight / _canvasHeight, _viewportX, _canvasHeight - _viewportY );\n\t\t_context.translate( _canvasWidthHalf, _canvasHeightHalf );\n\n\t\t_renderData = _projector.projectScene( scene, camera, this.sortObjects, this.sortElements );\n\t\t_elements = _renderData.elements;\n\t\t_lights = _renderData.lights;\n\n\t\t_normalViewMatrix.getNormalMatrix( camera.matrixWorldInverse );\n\n\t\t/* DEBUG\n\t\tsetFillStyle( 'rgba( 0, 255, 255, 0.5 )' );\n\t\t_context.fillRect( _clipBox.min.x, _clipBox.min.y, _clipBox.max.x - _clipBox.min.x, _clipBox.max.y - _clipBox.min.y );\n\t\t*/\n\n\t\tcalculateLights();\n\n\t\tfor ( var e = 0, el = _elements.length; e < el; e ++ ) {\n\n\t\t\tvar element = _elements[ e ];\n\n\t\t\tvar material = element.material;\n\n\t\t\tif ( material === undefined || material.opacity === 0 ) continue;\n\n\t\t\t_elemBox.makeEmpty();\n\n\t\t\tif ( element instanceof THREE.RenderableSprite ) {\n\n\t\t\t\t_v1 = element;\n\t\t\t\t_v1.x *= _canvasWidthHalf; _v1.y *= _canvasHeightHalf;\n\n\t\t\t\trenderSprite( _v1, element, material );\n\n\t\t\t} else if ( element instanceof THREE.RenderableLine ) {\n\n\t\t\t\t_v1 = element.v1; _v2 = element.v2;\n\n\t\t\t\t_v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf;\n\t\t\t\t_v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf;\n\n\t\t\t\t_elemBox.setFromPoints( [\n\t\t\t\t\t_v1.positionScreen,\n\t\t\t\t\t_v2.positionScreen\n\t\t\t\t] );\n\n\t\t\t\tif ( _clipBox.intersectsBox( _elemBox ) === true ) {\n\n\t\t\t\t\trenderLine( _v1, _v2, element, material );\n\n\t\t\t\t}\n\n\t\t\t} else if ( element instanceof THREE.RenderableFace ) {\n\n\t\t\t\t_v1 = element.v1; _v2 = element.v2; _v3 = element.v3;\n\n\t\t\t\tif ( _v1.positionScreen.z < - 1 || _v1.positionScreen.z > 1 ) continue;\n\t\t\t\tif ( _v2.positionScreen.z < - 1 || _v2.positionScreen.z > 1 ) continue;\n\t\t\t\tif ( _v3.positionScreen.z < - 1 || _v3.positionScreen.z > 1 ) continue;\n\n\t\t\t\t_v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf;\n\t\t\t\t_v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf;\n\t\t\t\t_v3.positionScreen.x *= _canvasWidthHalf; _v3.positionScreen.y *= _canvasHeightHalf;\n\n\t\t\t\tif ( material.overdraw > 0 ) {\n\n\t\t\t\t\texpand( _v1.positionScreen, _v2.positionScreen, material.overdraw );\n\t\t\t\t\texpand( _v2.positionScreen, _v3.positionScreen, material.overdraw );\n\t\t\t\t\texpand( _v3.positionScreen, _v1.positionScreen, material.overdraw );\n\n\t\t\t\t}\n\n\t\t\t\t_elemBox.setFromPoints( [\n\t\t\t\t\t_v1.positionScreen,\n\t\t\t\t\t_v2.positionScreen,\n\t\t\t\t\t_v3.positionScreen\n\t\t\t\t] );\n\n\t\t\t\tif ( _clipBox.intersectsBox( _elemBox ) === true ) {\n\n\t\t\t\t\trenderFace3( _v1, _v2, _v3, 0, 1, 2, element, material );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t/* DEBUG\n\t\t\tsetLineWidth( 1 );\n\t\t\tsetStrokeStyle( 'rgba( 0, 255, 0, 0.5 )' );\n\t\t\t_context.strokeRect( _elemBox.min.x, _elemBox.min.y, _elemBox.max.x - _elemBox.min.x, _elemBox.max.y - _elemBox.min.y );\n\t\t\t*/\n\n\t\t\t_clearBox.union( _elemBox );\n\n\t\t}\n\n\t\t/* DEBUG\n\t\tsetLineWidth( 1 );\n\t\tsetStrokeStyle( 'rgba( 255, 0, 0, 0.5 )' );\n\t\t_context.strokeRect( _clearBox.min.x, _clearBox.min.y, _clearBox.max.x - _clearBox.min.x, _clearBox.max.y - _clearBox.min.y );\n\t\t*/\n\n\t\t_context.setTransform( 1, 0, 0, 1, 0, 0 );\n\n\t};\n\n\t//\n\n\tfunction calculateLights() {\n\n\t\t_ambientLight.setRGB( 0, 0, 0 );\n\t\t_directionalLights.setRGB( 0, 0, 0 );\n\t\t_pointLights.setRGB( 0, 0, 0 );\n\n\t\tfor ( var l = 0, ll = _lights.length; l < ll; l ++ ) {\n\n\t\t\tvar light = _lights[ l ];\n\t\t\tvar lightColor = light.color;\n\n\t\t\tif ( light.isAmbientLight ) {\n\n\t\t\t\t_ambientLight.add( lightColor );\n\n\t\t\t} else if ( light.isDirectionalLight ) {\n\n\t\t\t\t// for sprites\n\n\t\t\t\t_directionalLights.add( lightColor );\n\n\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\t// for sprites\n\n\t\t\t\t_pointLights.add( lightColor );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction calculateLight( position, normal, color ) {\n\n\t\tfor ( var l = 0, ll = _lights.length; l < ll; l ++ ) {\n\n\t\t\tvar light = _lights[ l ];\n\n\t\t\t_lightColor.copy( light.color );\n\n\t\t\tif ( light.isDirectionalLight ) {\n\n\t\t\t\tvar lightPosition = _vector3.setFromMatrixPosition( light.matrixWorld ).normalize();\n\n\t\t\t\tvar amount = normal.dot( lightPosition );\n\n\t\t\t\tif ( amount <= 0 ) continue;\n\n\t\t\t\tamount *= light.intensity;\n\n\t\t\t\tcolor.add( _lightColor.multiplyScalar( amount ) );\n\n\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\tvar lightPosition = _vector3.setFromMatrixPosition( light.matrixWorld );\n\n\t\t\t\tvar amount = normal.dot( _vector3.subVectors( lightPosition, position ).normalize() );\n\n\t\t\t\tif ( amount <= 0 ) continue;\n\n\t\t\t\tamount *= light.distance == 0 ? 1 : 1 - Math.min( position.distanceTo( lightPosition ) / light.distance, 1 );\n\n\t\t\t\tif ( amount == 0 ) continue;\n\n\t\t\t\tamount *= light.intensity;\n\n\t\t\t\tcolor.add( _lightColor.multiplyScalar( amount ) );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction renderSprite( v1, element, material ) {\n\n\t\tsetOpacity( material.opacity );\n\t\tsetBlending( material.blending );\n\n\t\tvar scaleX = element.scale.x * _canvasWidthHalf;\n\t\tvar scaleY = element.scale.y * _canvasHeightHalf;\n\n\t\tvar dist = Math.sqrt( scaleX * scaleX + scaleY * scaleY ); // allow for rotated sprite\n\t\t_elemBox.min.set( v1.x - dist, v1.y - dist );\n\t\t_elemBox.max.set( v1.x + dist, v1.y + dist );\n\n\t\tif ( material.isSpriteMaterial ) {\n\n\t\t\tvar texture = material.map;\n\n\t\t\tif ( texture !== null ) {\n\n\t\t\t\tvar pattern = _patterns[ texture.id ];\n\n\t\t\t\tif ( pattern === undefined || pattern.version !== texture.version ) {\n\n\t\t\t\t\tpattern = textureToPattern( texture );\n\t\t\t\t\t_patterns[ texture.id ] = pattern;\n\n\t\t\t\t}\n\n\t\t\t\tif ( pattern.canvas !== undefined ) {\n\n\t\t\t\t\tsetFillStyle( pattern.canvas );\n\n\t\t\t\t\tvar bitmap = texture.image;\n\n\t\t\t\t\tvar ox = bitmap.width * texture.offset.x;\n\t\t\t\t\tvar oy = bitmap.height * texture.offset.y;\n\n\t\t\t\t\tvar sx = bitmap.width * texture.repeat.x;\n\t\t\t\t\tvar sy = bitmap.height * texture.repeat.y;\n\n\t\t\t\t\tvar cx = scaleX / sx;\n\t\t\t\t\tvar cy = scaleY / sy;\n\n\t\t\t\t\t_context.save();\n\t\t\t\t\t_context.translate( v1.x, v1.y );\n\t\t\t\t\tif ( material.rotation !== 0 ) _context.rotate( material.rotation );\n\t\t\t\t\t_context.translate( - scaleX / 2, - scaleY / 2 );\n\t\t\t\t\t_context.scale( cx, cy );\n\t\t\t\t\t_context.translate( - ox, - oy );\n\t\t\t\t\t_context.fillRect( ox, oy, sx, sy );\n\t\t\t\t\t_context.restore();\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// no texture\n\n\t\t\t\tsetFillStyle( material.color.getStyle() );\n\n\t\t\t\t_context.save();\n\t\t\t\t_context.translate( v1.x, v1.y );\n\t\t\t\tif ( material.rotation !== 0 ) _context.rotate( material.rotation );\n\t\t\t\t_context.scale( scaleX, - scaleY );\n\t\t\t\t_context.fillRect( - 0.5, - 0.5, 1, 1 );\n\t\t\t\t_context.restore();\n\n\t\t\t}\n\n\t\t} else if ( material.isSpriteCanvasMaterial ) {\n\n\t\t\tsetStrokeStyle( material.color.getStyle() );\n\t\t\tsetFillStyle( material.color.getStyle() );\n\n\t\t\t_context.save();\n\t\t\t_context.translate( v1.x, v1.y );\n\t\t\tif ( material.rotation !== 0 ) _context.rotate( material.rotation );\n\t\t\t_context.scale( scaleX, scaleY );\n\n\t\t\tmaterial.program( _context );\n\n\t\t\t_context.restore();\n\n\t\t} else if ( material.isPointsMaterial ) {\n\n\t\t\tsetFillStyle( material.color.getStyle() );\n\n\t\t\t_context.save();\n\t\t\t_context.translate( v1.x, v1.y );\n\t\t\tif ( material.rotation !== 0 ) _context.rotate( material.rotation );\n\t\t\t_context.scale( scaleX * material.size, - scaleY * material.size );\n\t\t\t_context.fillRect( - 0.5, - 0.5, 1, 1 );\n\t\t\t_context.restore();\n\n\t\t}\n\n\t\t/* DEBUG\n\t\tsetStrokeStyle( 'rgb(255,255,0)' );\n\t\t_context.beginPath();\n\t\t_context.moveTo( v1.x - 10, v1.y );\n\t\t_context.lineTo( v1.x + 10, v1.y );\n\t\t_context.moveTo( v1.x, v1.y - 10 );\n\t\t_context.lineTo( v1.x, v1.y + 10 );\n\t\t_context.stroke();\n\t\t*/\n\n\t}\n\n\tfunction renderLine( v1, v2, element, material ) {\n\n\t\tsetOpacity( material.opacity );\n\t\tsetBlending( material.blending );\n\n\t\t_context.beginPath();\n\t\t_context.moveTo( v1.positionScreen.x, v1.positionScreen.y );\n\t\t_context.lineTo( v2.positionScreen.x, v2.positionScreen.y );\n\n\t\tif ( material.isLineBasicMaterial ) {\n\n\t\t\tsetLineWidth( material.linewidth );\n\t\t\tsetLineCap( material.linecap );\n\t\t\tsetLineJoin( material.linejoin );\n\n\t\t\tif ( material.vertexColors !== THREE.VertexColors ) {\n\n\t\t\t\tsetStrokeStyle( material.color.getStyle() );\n\n\t\t\t} else {\n\n\t\t\t\tvar colorStyle1 = element.vertexColors[ 0 ].getStyle();\n\t\t\t\tvar colorStyle2 = element.vertexColors[ 1 ].getStyle();\n\n\t\t\t\tif ( colorStyle1 === colorStyle2 ) {\n\n\t\t\t\t\tsetStrokeStyle( colorStyle1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tvar grad = _context.createLinearGradient(\n\t\t\t\t\t\t\tv1.positionScreen.x,\n\t\t\t\t\t\t\tv1.positionScreen.y,\n\t\t\t\t\t\t\tv2.positionScreen.x,\n\t\t\t\t\t\t\tv2.positionScreen.y\n\t\t\t\t\t\t);\n\t\t\t\t\t\tgrad.addColorStop( 0, colorStyle1 );\n\t\t\t\t\t\tgrad.addColorStop( 1, colorStyle2 );\n\n\t\t\t\t\t} catch ( exception ) {\n\n\t\t\t\t\t\tgrad = colorStyle1;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tsetStrokeStyle( grad );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_context.stroke();\n\t\t\t_elemBox.expandByScalar( material.linewidth * 2 );\n\n\t\t} else if ( material.isLineDashedMaterial ) {\n\n\t\t\tsetLineWidth( material.linewidth );\n\t\t\tsetLineCap( material.linecap );\n\t\t\tsetLineJoin( material.linejoin );\n\t\t\tsetStrokeStyle( material.color.getStyle() );\n\t\t\tsetLineDash( [ material.dashSize, material.gapSize ] );\n\n\t\t\t_context.stroke();\n\n\t\t\t_elemBox.expandByScalar( material.linewidth * 2 );\n\n\t\t\tsetLineDash( [] );\n\n\t\t}\n\n\t}\n\n\tfunction renderFace3( v1, v2, v3, uv1, uv2, uv3, element, material ) {\n\n\t\t_this.info.render.vertices += 3;\n\t\t_this.info.render.faces ++;\n\n\t\tsetOpacity( material.opacity );\n\t\tsetBlending( material.blending );\n\n\t\t_v1x = v1.positionScreen.x; _v1y = v1.positionScreen.y;\n\t\t_v2x = v2.positionScreen.x; _v2y = v2.positionScreen.y;\n\t\t_v3x = v3.positionScreen.x; _v3y = v3.positionScreen.y;\n\n\t\tdrawTriangle( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y );\n\n\t\tif ( ( material.isMeshLambertMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial ) && material.map === null ) {\n\n\t\t\t_diffuseColor.copy( material.color );\n\t\t\t_emissiveColor.copy( material.emissive );\n\n\t\t\tif ( material.vertexColors === THREE.FaceColors ) {\n\n\t\t\t\t_diffuseColor.multiply( element.color );\n\n\t\t\t}\n\n\t\t\t_color.copy( _ambientLight );\n\n\t\t\t_centroid.copy( v1.positionWorld ).add( v2.positionWorld ).add( v3.positionWorld ).divideScalar( 3 );\n\n\t\t\tcalculateLight( _centroid, element.normalModel, _color );\n\n\t\t\t_color.multiply( _diffuseColor ).add( _emissiveColor );\n\n\t\t\tmaterial.wireframe === true\n\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n\t\t\t\t : fillPath( _color );\n\n\t\t} else if ( material.isMeshBasicMaterial || material.isMeshLambertMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial ) {\n\n\t\t\tif ( material.map !== null ) {\n\n\t\t\t\tvar mapping = material.map.mapping;\n\n\t\t\t\tif ( mapping === THREE.UVMapping ) {\n\n\t\t\t\t\t_uvs = element.uvs;\n\t\t\t\t\tpatternPath( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uvs[ uv1 ].x, _uvs[ uv1 ].y, _uvs[ uv2 ].x, _uvs[ uv2 ].y, _uvs[ uv3 ].x, _uvs[ uv3 ].y, material.map );\n\n\t\t\t\t}\n\n\t\t\t} else if ( material.envMap !== null ) {\n\n\t\t\t\tif ( material.envMap.mapping === THREE.SphericalReflectionMapping ) {\n\n\t\t\t\t\t_normal.copy( element.vertexNormalsModel[ uv1 ] ).applyMatrix3( _normalViewMatrix );\n\t\t\t\t\t_uv1x = 0.5 * _normal.x + 0.5;\n\t\t\t\t\t_uv1y = 0.5 * _normal.y + 0.5;\n\n\t\t\t\t\t_normal.copy( element.vertexNormalsModel[ uv2 ] ).applyMatrix3( _normalViewMatrix );\n\t\t\t\t\t_uv2x = 0.5 * _normal.x + 0.5;\n\t\t\t\t\t_uv2y = 0.5 * _normal.y + 0.5;\n\n\t\t\t\t\t_normal.copy( element.vertexNormalsModel[ uv3 ] ).applyMatrix3( _normalViewMatrix );\n\t\t\t\t\t_uv3x = 0.5 * _normal.x + 0.5;\n\t\t\t\t\t_uv3y = 0.5 * _normal.y + 0.5;\n\n\t\t\t\t\tpatternPath( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, material.envMap );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t_color.copy( material.color );\n\n\t\t\t\tif ( material.vertexColors === THREE.FaceColors ) {\n\n\t\t\t\t\t_color.multiply( element.color );\n\n\t\t\t\t}\n\n\t\t\t\tmaterial.wireframe === true\n\t\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n\t\t\t\t\t : fillPath( _color );\n\n\t\t\t}\n\n\t\t} else if ( material.isMeshNormalMaterial ) {\n\n\t\t\t_normal.copy( element.normalModel ).applyMatrix3( _normalViewMatrix );\n\n\t\t\t_color.setRGB( _normal.x, _normal.y, _normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );\n\n\t\t\tmaterial.wireframe === true\n\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n\t\t\t\t : fillPath( _color );\n\n\t\t} else {\n\n\t\t\t_color.setRGB( 1, 1, 1 );\n\n\t\t\tmaterial.wireframe === true\n\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n\t\t\t\t : fillPath( _color );\n\n\t\t}\n\n\t}\n\n\t//\n\n\tfunction drawTriangle( x0, y0, x1, y1, x2, y2 ) {\n\n\t\t_context.beginPath();\n\t\t_context.moveTo( x0, y0 );\n\t\t_context.lineTo( x1, y1 );\n\t\t_context.lineTo( x2, y2 );\n\t\t_context.closePath();\n\n\t}\n\n\tfunction strokePath( color, linewidth, linecap, linejoin ) {\n\n\t\tsetLineWidth( linewidth );\n\t\tsetLineCap( linecap );\n\t\tsetLineJoin( linejoin );\n\t\tsetStrokeStyle( color.getStyle() );\n\n\t\t_context.stroke();\n\n\t\t_elemBox.expandByScalar( linewidth * 2 );\n\n\t}\n\n\tfunction fillPath( color ) {\n\n\t\tsetFillStyle( color.getStyle() );\n\t\t_context.fill();\n\n\t}\n\n\tfunction textureToPattern( texture ) {\n\n\t\tif ( texture.version === 0 ||\n\t\t\ttexture instanceof THREE.CompressedTexture ||\n\t\t\ttexture instanceof THREE.DataTexture ) {\n\n\t\t\treturn {\n\t\t\t\tcanvas: undefined,\n\t\t\t\tversion: texture.version\n\t\t\t};\n\n\t\t}\n\n\t\tvar image = texture.image;\n\n\t\tif ( image.complete === false ) {\n\n\t\t\treturn {\n\t\t\t\tcanvas: undefined,\n\t\t\t\tversion: 0\n\t\t\t};\n\n\t\t}\n\n\t\tvar repeatX = texture.wrapS === THREE.RepeatWrapping || texture.wrapS === THREE.MirroredRepeatWrapping;\n\t\tvar repeatY = texture.wrapT === THREE.RepeatWrapping || texture.wrapT === THREE.MirroredRepeatWrapping;\n\n\t\tvar mirrorX = texture.wrapS === THREE.MirroredRepeatWrapping;\n\t\tvar mirrorY = texture.wrapT === THREE.MirroredRepeatWrapping;\n\n\t\t//\n\n\t\tvar canvas = document.createElement( 'canvas' );\n\t\tcanvas.width = image.width * ( mirrorX ? 2 : 1 );\n\t\tcanvas.height = image.height * ( mirrorY ? 2 : 1 );\n\n\t\tvar context = canvas.getContext( '2d' );\n\t\tcontext.setTransform( 1, 0, 0, - 1, 0, image.height );\n\t\tcontext.drawImage( image, 0, 0 );\n\n\t\tif ( mirrorX === true ) {\n\n\t\t\tcontext.setTransform( - 1, 0, 0, - 1, image.width, image.height );\n\t\t\tcontext.drawImage( image, - image.width, 0 );\n\n\t\t}\n\n\t\tif ( mirrorY === true ) {\n\n\t\t\tcontext.setTransform( 1, 0, 0, 1, 0, 0 );\n\t\t\tcontext.drawImage( image, 0, image.height );\n\n\t\t}\n\n\t\tif ( mirrorX === true && mirrorY === true ) {\n\n\t\t\tcontext.setTransform( - 1, 0, 0, 1, image.width, 0 );\n\t\t\tcontext.drawImage( image, - image.width, image.height );\n\n\t\t}\n\n\t\tvar repeat = 'no-repeat';\n\n\t\tif ( repeatX === true && repeatY === true ) {\n\n\t\t\trepeat = 'repeat';\n\n\t\t} else if ( repeatX === true ) {\n\n\t\t\trepeat = 'repeat-x';\n\n\t\t} else if ( repeatY === true ) {\n\n\t\t\trepeat = 'repeat-y';\n\n\t\t}\n\n\t\tvar pattern = _context.createPattern( canvas, repeat );\n\n\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t\treturn {\n\t\t\tcanvas: pattern,\n\t\t\tversion: texture.version\n\t\t};\n\n\t}\n\n\tfunction patternPath( x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, texture ) {\n\n\t\tvar pattern = _patterns[ texture.id ];\n\n\t\tif ( pattern === undefined || pattern.version !== texture.version ) {\n\n\t\t\tpattern = textureToPattern( texture );\n\t\t\t_patterns[ texture.id ] = pattern;\n\n\t\t}\n\n\t\tif ( pattern.canvas !== undefined ) {\n\n\t\t\tsetFillStyle( pattern.canvas );\n\n\t\t} else {\n\n\t\t\tsetFillStyle( 'rgba( 0, 0, 0, 1)' );\n\t\t\t_context.fill();\n\t\t\treturn;\n\n\t\t}\n\n\t\t// http://extremelysatisfactorytotalitarianism.com/blog/?p=2120\n\n\t\tvar a, b, c, d, e, f, det, idet,\n\t\t\toffsetX = texture.offset.x / texture.repeat.x,\n\t\t\toffsetY = texture.offset.y / texture.repeat.y,\n\t\t\twidth = texture.image.width * texture.repeat.x,\n\t\t\theight = texture.image.height * texture.repeat.y;\n\n\t\tu0 = ( u0 + offsetX ) * width;\n\t\tv0 = ( v0 + offsetY ) * height;\n\n\t\tu1 = ( u1 + offsetX ) * width;\n\t\tv1 = ( v1 + offsetY ) * height;\n\n\t\tu2 = ( u2 + offsetX ) * width;\n\t\tv2 = ( v2 + offsetY ) * height;\n\n\t\tx1 -= x0; y1 -= y0;\n\t\tx2 -= x0; y2 -= y0;\n\n\t\tu1 -= u0; v1 -= v0;\n\t\tu2 -= u0; v2 -= v0;\n\n\t\tdet = u1 * v2 - u2 * v1;\n\n\t\tif ( det === 0 ) return;\n\n\t\tidet = 1 / det;\n\n\t\ta = ( v2 * x1 - v1 * x2 ) * idet;\n\t\tb = ( v2 * y1 - v1 * y2 ) * idet;\n\t\tc = ( u1 * x2 - u2 * x1 ) * idet;\n\t\td = ( u1 * y2 - u2 * y1 ) * idet;\n\n\t\te = x0 - a * u0 - c * v0;\n\t\tf = y0 - b * u0 - d * v0;\n\n\t\t_context.save();\n\t\t_context.transform( a, b, c, d, e, f );\n\t\t_context.fill();\n\t\t_context.restore();\n\n\t}\n\n\t/*\n\tfunction clipImage( x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, image ) {\n\n\t\t// http://extremelysatisfactorytotalitarianism.com/blog/?p=2120\n\n\t\tvar a, b, c, d, e, f, det, idet,\n\t\twidth = image.width - 1,\n\t\theight = image.height - 1;\n\n\t\tu0 *= width; v0 *= height;\n\t\tu1 *= width; v1 *= height;\n\t\tu2 *= width; v2 *= height;\n\n\t\tx1 -= x0; y1 -= y0;\n\t\tx2 -= x0; y2 -= y0;\n\n\t\tu1 -= u0; v1 -= v0;\n\t\tu2 -= u0; v2 -= v0;\n\n\t\tdet = u1 * v2 - u2 * v1;\n\n\t\tidet = 1 / det;\n\n\t\ta = ( v2 * x1 - v1 * x2 ) * idet;\n\t\tb = ( v2 * y1 - v1 * y2 ) * idet;\n\t\tc = ( u1 * x2 - u2 * x1 ) * idet;\n\t\td = ( u1 * y2 - u2 * y1 ) * idet;\n\n\t\te = x0 - a * u0 - c * v0;\n\t\tf = y0 - b * u0 - d * v0;\n\n\t\t_context.save();\n\t\t_context.transform( a, b, c, d, e, f );\n\t\t_context.clip();\n\t\t_context.drawImage( image, 0, 0 );\n\t\t_context.restore();\n\n\t}\n\t*/\n\n\t// Hide anti-alias gaps\n\n\tfunction expand( v1, v2, pixels ) {\n\n\t\tvar x = v2.x - v1.x, y = v2.y - v1.y,\n\t\t\tdet = x * x + y * y, idet;\n\n\t\tif ( det === 0 ) return;\n\n\t\tidet = pixels / Math.sqrt( det );\n\n\t\tx *= idet; y *= idet;\n\n\t\tv2.x += x; v2.y += y;\n\t\tv1.x -= x; v1.y -= y;\n\n\t}\n\n\t// Context cached methods.\n\n\tfunction setOpacity( value ) {\n\n\t\tif ( _contextGlobalAlpha !== value ) {\n\n\t\t\t_context.globalAlpha = value;\n\t\t\t_contextGlobalAlpha = value;\n\n\t\t}\n\n\t}\n\n\tfunction setBlending( value ) {\n\n\t\tif ( _contextGlobalCompositeOperation !== value ) {\n\n\t\t\tif ( value === THREE.NormalBlending ) {\n\n\t\t\t\t_context.globalCompositeOperation = 'source-over';\n\n\t\t\t} else if ( value === THREE.AdditiveBlending ) {\n\n\t\t\t\t_context.globalCompositeOperation = 'lighter';\n\n\t\t\t} else if ( value === THREE.SubtractiveBlending ) {\n\n\t\t\t\t_context.globalCompositeOperation = 'darker';\n\n\t\t\t} else if ( value === THREE.MultiplyBlending ) {\n\n\t\t\t\t_context.globalCompositeOperation = 'multiply';\n\n\t\t\t}\n\n\t\t\t_contextGlobalCompositeOperation = value;\n\n\t\t}\n\n\t}\n\n\tfunction setLineWidth( value ) {\n\n\t\tif ( _contextLineWidth !== value ) {\n\n\t\t\t_context.lineWidth = value;\n\t\t\t_contextLineWidth = value;\n\n\t\t}\n\n\t}\n\n\tfunction setLineCap( value ) {\n\n\t\t// \"butt\", \"round\", \"square\"\n\n\t\tif ( _contextLineCap !== value ) {\n\n\t\t\t_context.lineCap = value;\n\t\t\t_contextLineCap = value;\n\n\t\t}\n\n\t}\n\n\tfunction setLineJoin( value ) {\n\n\t\t// \"round\", \"bevel\", \"miter\"\n\n\t\tif ( _contextLineJoin !== value ) {\n\n\t\t\t_context.lineJoin = value;\n\t\t\t_contextLineJoin = value;\n\n\t\t}\n\n\t}\n\n\tfunction setStrokeStyle( value ) {\n\n\t\tif ( _contextStrokeStyle !== value ) {\n\n\t\t\t_context.strokeStyle = value;\n\t\t\t_contextStrokeStyle = value;\n\n\t\t}\n\n\t}\n\n\tfunction setFillStyle( value ) {\n\n\t\tif ( _contextFillStyle !== value ) {\n\n\t\t\t_context.fillStyle = value;\n\t\t\t_contextFillStyle = value;\n\n\t\t}\n\n\t}\n\n\tfunction setLineDash( value ) {\n\n\t\tif ( _contextLineDash.length !== value.length ) {\n\n\t\t\t_context.setLineDash( value );\n\t\t\t_contextLineDash = value;\n\n\t\t}\n\n\t}\n\n};\n","/**\n * @author mrdoob / http://mrdoob.com/\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author julianwa / https://github.com/julianwa\n */\n\nTHREE.RenderableObject = function () {\n\n\tthis.id = 0;\n\n\tthis.object = null;\n\tthis.z = 0;\n\tthis.renderOrder = 0;\n\n};\n\n//\n\nTHREE.RenderableFace = function () {\n\n\tthis.id = 0;\n\n\tthis.v1 = new THREE.RenderableVertex();\n\tthis.v2 = new THREE.RenderableVertex();\n\tthis.v3 = new THREE.RenderableVertex();\n\n\tthis.normalModel = new THREE.Vector3();\n\n\tthis.vertexNormalsModel = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\n\tthis.vertexNormalsLength = 0;\n\n\tthis.color = new THREE.Color();\n\tthis.material = null;\n\tthis.uvs = [ new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() ];\n\n\tthis.z = 0;\n\tthis.renderOrder = 0;\n\n};\n\n//\n\nTHREE.RenderableVertex = function () {\n\n\tthis.position = new THREE.Vector3();\n\tthis.positionWorld = new THREE.Vector3();\n\tthis.positionScreen = new THREE.Vector4();\n\n\tthis.visible = true;\n\n};\n\nTHREE.RenderableVertex.prototype.copy = function ( vertex ) {\n\n\tthis.positionWorld.copy( vertex.positionWorld );\n\tthis.positionScreen.copy( vertex.positionScreen );\n\n};\n\n//\n\nTHREE.RenderableLine = function () {\n\n\tthis.id = 0;\n\n\tthis.v1 = new THREE.RenderableVertex();\n\tthis.v2 = new THREE.RenderableVertex();\n\n\tthis.vertexColors = [ new THREE.Color(), new THREE.Color() ];\n\tthis.material = null;\n\n\tthis.z = 0;\n\tthis.renderOrder = 0;\n\n};\n\n//\n\nTHREE.RenderableSprite = function () {\n\n\tthis.id = 0;\n\n\tthis.object = null;\n\n\tthis.x = 0;\n\tthis.y = 0;\n\tthis.z = 0;\n\n\tthis.rotation = 0;\n\tthis.scale = new THREE.Vector2();\n\n\tthis.material = null;\n\tthis.renderOrder = 0;\n\n};\n\n//\n\nTHREE.Projector = function () {\n\n\tvar _object, _objectCount, _objectPool = [], _objectPoolLength = 0,\n\t\t_vertex, _vertexCount, _vertexPool = [], _vertexPoolLength = 0,\n\t\t_face, _faceCount, _facePool = [], _facePoolLength = 0,\n\t\t_line, _lineCount, _linePool = [], _linePoolLength = 0,\n\t\t_sprite, _spriteCount, _spritePool = [], _spritePoolLength = 0,\n\n\t\t_renderData = { objects: [], lights: [], elements: [] },\n\n\t\t_vector3 = new THREE.Vector3(),\n\t\t_vector4 = new THREE.Vector4(),\n\n\t\t_clipBox = new THREE.Box3( new THREE.Vector3( - 1, - 1, - 1 ), new THREE.Vector3( 1, 1, 1 ) ),\n\t\t_boundingBox = new THREE.Box3(),\n\t\t_points3 = new Array( 3 ),\n\n\t\t_viewMatrix = new THREE.Matrix4(),\n\t\t_viewProjectionMatrix = new THREE.Matrix4(),\n\n\t\t_modelMatrix,\n\t\t_modelViewProjectionMatrix = new THREE.Matrix4(),\n\n\t\t_normalMatrix = new THREE.Matrix3(),\n\n\t\t_frustum = new THREE.Frustum(),\n\n\t\t_clippedVertex1PositionScreen = new THREE.Vector4(),\n\t\t_clippedVertex2PositionScreen = new THREE.Vector4();\n\n\t//\n\n\tthis.projectVector = function ( vector, camera ) {\n\n\t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\n\t\tvector.project( camera );\n\n\t};\n\n\tthis.unprojectVector = function ( vector, camera ) {\n\n\t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\n\t\tvector.unproject( camera );\n\n\t};\n\n\tthis.pickingRay = function () {\n\n\t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\n\n\t};\n\n\t//\n\n\tvar RenderList = function () {\n\n\t\tvar normals = [];\n\t\tvar colors = [];\n\t\tvar uvs = [];\n\n\t\tvar object = null;\n\t\tvar material = null;\n\n\t\tvar normalMatrix = new THREE.Matrix3();\n\n\t\tfunction setObject( value ) {\n\n\t\t\tobject = value;\n\t\t\tmaterial = object.material;\n\n\t\t\tnormalMatrix.getNormalMatrix( object.matrixWorld );\n\n\t\t\tnormals.length = 0;\n\t\t\tcolors.length = 0;\n\t\t\tuvs.length = 0;\n\n\t\t}\n\n\t\tfunction projectVertex( vertex ) {\n\n\t\t\tvar position = vertex.position;\n\t\t\tvar positionWorld = vertex.positionWorld;\n\t\t\tvar positionScreen = vertex.positionScreen;\n\n\t\t\tpositionWorld.copy( position ).applyMatrix4( _modelMatrix );\n\t\t\tpositionScreen.copy( positionWorld ).applyMatrix4( _viewProjectionMatrix );\n\n\t\t\tvar invW = 1 / positionScreen.w;\n\n\t\t\tpositionScreen.x *= invW;\n\t\t\tpositionScreen.y *= invW;\n\t\t\tpositionScreen.z *= invW;\n\n\t\t\tvertex.visible = positionScreen.x >= - 1 && positionScreen.x <= 1 &&\n\t\t\t\t\t positionScreen.y >= - 1 && positionScreen.y <= 1 &&\n\t\t\t\t\t positionScreen.z >= - 1 && positionScreen.z <= 1;\n\n\t\t}\n\n\t\tfunction pushVertex( x, y, z ) {\n\n\t\t\t_vertex = getNextVertexInPool();\n\t\t\t_vertex.position.set( x, y, z );\n\n\t\t\tprojectVertex( _vertex );\n\n\t\t}\n\n\t\tfunction pushNormal( x, y, z ) {\n\n\t\t\tnormals.push( x, y, z );\n\n\t\t}\n\n\t\tfunction pushColor( r, g, b ) {\n\n\t\t\tcolors.push( r, g, b );\n\n\t\t}\n\n\t\tfunction pushUv( x, y ) {\n\n\t\t\tuvs.push( x, y );\n\n\t\t}\n\n\t\tfunction checkTriangleVisibility( v1, v2, v3 ) {\n\n\t\t\tif ( v1.visible === true || v2.visible === true || v3.visible === true ) return true;\n\n\t\t\t_points3[ 0 ] = v1.positionScreen;\n\t\t\t_points3[ 1 ] = v2.positionScreen;\n\t\t\t_points3[ 2 ] = v3.positionScreen;\n\n\t\t\treturn _clipBox.intersectsBox( _boundingBox.setFromPoints( _points3 ) );\n\n\t\t}\n\n\t\tfunction checkBackfaceCulling( v1, v2, v3 ) {\n\n\t\t\treturn ( ( v3.positionScreen.x - v1.positionScreen.x ) *\n\t\t\t\t    ( v2.positionScreen.y - v1.positionScreen.y ) -\n\t\t\t\t    ( v3.positionScreen.y - v1.positionScreen.y ) *\n\t\t\t\t    ( v2.positionScreen.x - v1.positionScreen.x ) ) < 0;\n\n\t\t}\n\n\t\tfunction pushLine( a, b ) {\n\n\t\t\tvar v1 = _vertexPool[ a ];\n\t\t\tvar v2 = _vertexPool[ b ];\n\n\t\t\t// Clip\n\n\t\t\tv1.positionScreen.copy( v1.position ).applyMatrix4( _modelViewProjectionMatrix );\n\t\t\tv2.positionScreen.copy( v2.position ).applyMatrix4( _modelViewProjectionMatrix );\n\n\t\t\tif ( clipLine( v1.positionScreen, v2.positionScreen ) === true ) {\n\n\t\t\t\t// Perform the perspective divide\n\t\t\t\tv1.positionScreen.multiplyScalar( 1 / v1.positionScreen.w );\n\t\t\t\tv2.positionScreen.multiplyScalar( 1 / v2.positionScreen.w );\n\n\t\t\t\t_line = getNextLineInPool();\n\t\t\t\t_line.id = object.id;\n\t\t\t\t_line.v1.copy( v1 );\n\t\t\t\t_line.v2.copy( v2 );\n\t\t\t\t_line.z = Math.max( v1.positionScreen.z, v2.positionScreen.z );\n\t\t\t\t_line.renderOrder = object.renderOrder;\n\n\t\t\t\t_line.material = object.material;\n\n\t\t\t\tif ( object.material.vertexColors === THREE.VertexColors ) {\n\n\t\t\t\t\t_line.vertexColors[ 0 ].fromArray( colors, a * 3 );\n\t\t\t\t\t_line.vertexColors[ 1 ].fromArray( colors, b * 3 );\n\n\t\t\t\t}\n\n\t\t\t\t_renderData.elements.push( _line );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction pushTriangle( a, b, c ) {\n\n\t\t\tvar v1 = _vertexPool[ a ];\n\t\t\tvar v2 = _vertexPool[ b ];\n\t\t\tvar v3 = _vertexPool[ c ];\n\n\t\t\tif ( checkTriangleVisibility( v1, v2, v3 ) === false ) return;\n\n\t\t\tif ( material.side === THREE.DoubleSide || checkBackfaceCulling( v1, v2, v3 ) === true ) {\n\n\t\t\t\t_face = getNextFaceInPool();\n\n\t\t\t\t_face.id = object.id;\n\t\t\t\t_face.v1.copy( v1 );\n\t\t\t\t_face.v2.copy( v2 );\n\t\t\t\t_face.v3.copy( v3 );\n\t\t\t\t_face.z = ( v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z ) / 3;\n\t\t\t\t_face.renderOrder = object.renderOrder;\n\n\t\t\t\t// use first vertex normal as face normal\n\n\t\t\t\t_face.normalModel.fromArray( normals, a * 3 );\n\t\t\t\t_face.normalModel.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\tfor ( var i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\tvar normal = _face.vertexNormalsModel[ i ];\n\t\t\t\t\tnormal.fromArray( normals, arguments[ i ] * 3 );\n\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t\tvar uv = _face.uvs[ i ];\n\t\t\t\t\tuv.fromArray( uvs, arguments[ i ] * 2 );\n\n\t\t\t\t}\n\n\t\t\t\t_face.vertexNormalsLength = 3;\n\n\t\t\t\t_face.material = object.material;\n\n\t\t\t\t_renderData.elements.push( _face );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\tsetObject: setObject,\n\t\t\tprojectVertex: projectVertex,\n\t\t\tcheckTriangleVisibility: checkTriangleVisibility,\n\t\t\tcheckBackfaceCulling: checkBackfaceCulling,\n\t\t\tpushVertex: pushVertex,\n\t\t\tpushNormal: pushNormal,\n\t\t\tpushColor: pushColor,\n\t\t\tpushUv: pushUv,\n\t\t\tpushLine: pushLine,\n\t\t\tpushTriangle: pushTriangle\n\t\t};\n\n\t};\n\n\tvar renderList = new RenderList();\n\n\tfunction projectObject( object ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tif ( object instanceof THREE.Light ) {\n\n\t\t\t_renderData.lights.push( object );\n\n\t\t} else if ( object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Points ) {\n\n\t\t\tif ( object.material.visible === false ) return;\n\t\t\tif ( object.frustumCulled === true && _frustum.intersectsObject( object ) === false ) return;\n\n\t\t\taddObject( object );\n\n\t\t} else if ( object instanceof THREE.Sprite ) {\n\n\t\t\tif ( object.material.visible === false ) return;\n\t\t\tif ( object.frustumCulled === true && _frustum.intersectsSprite( object ) === false ) return;\n\n\t\t\taddObject( object );\n\n\t\t}\n\n\t\tvar children = object.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tprojectObject( children[ i ] );\n\n\t\t}\n\n\t}\n\n\tfunction addObject( object ) {\n\n\t\t_object = getNextObjectInPool();\n\t\t_object.id = object.id;\n\t\t_object.object = object;\n\n\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n\t\t_vector3.applyMatrix4( _viewProjectionMatrix );\n\t\t_object.z = _vector3.z;\n\t\t_object.renderOrder = object.renderOrder;\n\n\t\t_renderData.objects.push( _object );\n\n\t}\n\n\tthis.projectScene = function ( scene, camera, sortObjects, sortElements ) {\n\n\t\t_faceCount = 0;\n\t\t_lineCount = 0;\n\t\t_spriteCount = 0;\n\n\t\t_renderData.elements.length = 0;\n\n\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\n\t\t_viewMatrix.copy( camera.matrixWorldInverse );\n\t\t_viewProjectionMatrix.multiplyMatrices( camera.projectionMatrix, _viewMatrix );\n\n\t\t_frustum.setFromMatrix( _viewProjectionMatrix );\n\n\t\t//\n\n\t\t_objectCount = 0;\n\n\t\t_renderData.objects.length = 0;\n\t\t_renderData.lights.length = 0;\n\n\t\tprojectObject( scene );\n\n\t\tif ( sortObjects === true ) {\n\n\t\t\t_renderData.objects.sort( painterSort );\n\n\t\t}\n\n\t\t//\n\n\t\tvar objects = _renderData.objects;\n\n\t\tfor ( var o = 0, ol = objects.length; o < ol; o ++ ) {\n\n\t\t\tvar object = objects[ o ].object;\n\t\t\tvar geometry = object.geometry;\n\n\t\t\trenderList.setObject( object );\n\n\t\t\t_modelMatrix = object.matrixWorld;\n\n\t\t\t_vertexCount = 0;\n\n\t\t\tif ( object instanceof THREE.Mesh ) {\n\n\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\tif ( attributes.position === undefined ) continue;\n\n\t\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\trenderList.pushVertex( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( attributes.normal !== undefined ) {\n\n\t\t\t\t\t\tvar normals = attributes.normal.array;\n\n\t\t\t\t\t\tfor ( var i = 0, l = normals.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\trenderList.pushNormal( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( attributes.uv !== undefined ) {\n\n\t\t\t\t\t\tvar uvs = attributes.uv.array;\n\n\t\t\t\t\t\tfor ( var i = 0, l = uvs.length; i < l; i += 2 ) {\n\n\t\t\t\t\t\t\trenderList.pushUv( uvs[ i ], uvs[ i + 1 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t\t\tvar indices = geometry.index.array;\n\n\t\t\t\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\t\t\t\tfor ( var g = 0; g < groups.length; g ++ ) {\n\n\t\t\t\t\t\t\t\tvar group = groups[ g ];\n\n\t\t\t\t\t\t\t\tfor ( var i = group.start, l = group.start + group.count; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\t\trenderList.pushTriangle( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\trenderList.pushTriangle( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\trenderList.pushTriangle( i, i + 1, i + 2 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\t\tvar faces = geometry.faces;\n\t\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\n\t\t\t\t\t_normalMatrix.getNormalMatrix( _modelMatrix );\n\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tvar isMultiMaterial = Array.isArray( material );\n\n\t\t\t\t\tfor ( var v = 0, vl = vertices.length; v < vl; v ++ ) {\n\n\t\t\t\t\t\tvar vertex = vertices[ v ];\n\n\t\t\t\t\t\t_vector3.copy( vertex );\n\n\t\t\t\t\t\tif ( material.morphTargets === true ) {\n\n\t\t\t\t\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\t\t\t\t\tvar morphInfluences = object.morphTargetInfluences;\n\n\t\t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\n\n\t\t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\n\n\t\t\t\t\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t\t\t\t\tvar target = morphTargets[ t ];\n\t\t\t\t\t\t\t\tvar targetVertex = target.vertices[ v ];\n\n\t\t\t\t\t\t\t\t_vector3.x += ( targetVertex.x - vertex.x ) * influence;\n\t\t\t\t\t\t\t\t_vector3.y += ( targetVertex.y - vertex.y ) * influence;\n\t\t\t\t\t\t\t\t_vector3.z += ( targetVertex.z - vertex.z ) * influence;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\trenderList.pushVertex( _vector3.x, _vector3.y, _vector3.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\t\tvar face = faces[ f ];\n\n\t\t\t\t\t\tmaterial = isMultiMaterial === true\n\t\t\t\t\t\t\t ? object.material[ face.materialIndex ]\n\t\t\t\t\t\t\t : object.material;\n\n\t\t\t\t\t\tif ( material === undefined ) continue;\n\n\t\t\t\t\t\tvar side = material.side;\n\n\t\t\t\t\t\tvar v1 = _vertexPool[ face.a ];\n\t\t\t\t\t\tvar v2 = _vertexPool[ face.b ];\n\t\t\t\t\t\tvar v3 = _vertexPool[ face.c ];\n\n\t\t\t\t\t\tif ( renderList.checkTriangleVisibility( v1, v2, v3 ) === false ) continue;\n\n\t\t\t\t\t\tvar visible = renderList.checkBackfaceCulling( v1, v2, v3 );\n\n\t\t\t\t\t\tif ( side !== THREE.DoubleSide ) {\n\n\t\t\t\t\t\t\tif ( side === THREE.FrontSide && visible === false ) continue;\n\t\t\t\t\t\t\tif ( side === THREE.BackSide && visible === true ) continue;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_face = getNextFaceInPool();\n\n\t\t\t\t\t\t_face.id = object.id;\n\t\t\t\t\t\t_face.v1.copy( v1 );\n\t\t\t\t\t\t_face.v2.copy( v2 );\n\t\t\t\t\t\t_face.v3.copy( v3 );\n\n\t\t\t\t\t\t_face.normalModel.copy( face.normal );\n\n\t\t\t\t\t\tif ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {\n\n\t\t\t\t\t\t\t_face.normalModel.negate();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_face.normalModel.applyMatrix3( _normalMatrix ).normalize();\n\n\t\t\t\t\t\tvar faceVertexNormals = face.vertexNormals;\n\n\t\t\t\t\t\tfor ( var n = 0, nl = Math.min( faceVertexNormals.length, 3 ); n < nl; n ++ ) {\n\n\t\t\t\t\t\t\tvar normalModel = _face.vertexNormalsModel[ n ];\n\t\t\t\t\t\t\tnormalModel.copy( faceVertexNormals[ n ] );\n\n\t\t\t\t\t\t\tif ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {\n\n\t\t\t\t\t\t\t\tnormalModel.negate();\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tnormalModel.applyMatrix3( _normalMatrix ).normalize();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_face.vertexNormalsLength = faceVertexNormals.length;\n\n\t\t\t\t\t\tvar vertexUvs = faceVertexUvs[ f ];\n\n\t\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\t\t\tfor ( var u = 0; u < 3; u ++ ) {\n\n\t\t\t\t\t\t\t\t_face.uvs[ u ].copy( vertexUvs[ u ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_face.color = face.color;\n\t\t\t\t\t\t_face.material = material;\n\n\t\t\t\t\t\t_face.z = ( v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z ) / 3;\n\t\t\t\t\t\t_face.renderOrder = object.renderOrder;\n\n\t\t\t\t\t\t_renderData.elements.push( _face );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( object instanceof THREE.Line ) {\n\n\t\t\t\t_modelViewProjectionMatrix.multiplyMatrices( _viewProjectionMatrix, _modelMatrix );\n\n\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\t\tvar attributes = geometry.attributes;\n\n\t\t\t\t\tif ( attributes.position !== undefined ) {\n\n\t\t\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\trenderList.pushVertex( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( attributes.color !== undefined ) {\n\n\t\t\t\t\t\t\tvar colors = attributes.color.array;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = colors.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\trenderList.pushColor( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t\t\t\tvar indices = geometry.index.array;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 2 ) {\n\n\t\t\t\t\t\t\t\trenderList.pushLine( indices[ i ], indices[ i + 1 ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tvar step = object instanceof THREE.LineSegments ? 2 : 1;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = ( positions.length / 3 ) - 1; i < l; i += step ) {\n\n\t\t\t\t\t\t\t\trenderList.pushLine( i, i + 1 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\t\tvar vertices = object.geometry.vertices;\n\n\t\t\t\t\tif ( vertices.length === 0 ) continue;\n\n\t\t\t\t\tv1 = getNextVertexInPool();\n\t\t\t\t\tv1.positionScreen.copy( vertices[ 0 ] ).applyMatrix4( _modelViewProjectionMatrix );\n\n\t\t\t\t\tvar step = object instanceof THREE.LineSegments ? 2 : 1;\n\n\t\t\t\t\tfor ( var v = 1, vl = vertices.length; v < vl; v ++ ) {\n\n\t\t\t\t\t\tv1 = getNextVertexInPool();\n\t\t\t\t\t\tv1.positionScreen.copy( vertices[ v ] ).applyMatrix4( _modelViewProjectionMatrix );\n\n\t\t\t\t\t\tif ( ( v + 1 ) % step > 0 ) continue;\n\n\t\t\t\t\t\tv2 = _vertexPool[ _vertexCount - 2 ];\n\n\t\t\t\t\t\t_clippedVertex1PositionScreen.copy( v1.positionScreen );\n\t\t\t\t\t\t_clippedVertex2PositionScreen.copy( v2.positionScreen );\n\n\t\t\t\t\t\tif ( clipLine( _clippedVertex1PositionScreen, _clippedVertex2PositionScreen ) === true ) {\n\n\t\t\t\t\t\t\t// Perform the perspective divide\n\t\t\t\t\t\t\t_clippedVertex1PositionScreen.multiplyScalar( 1 / _clippedVertex1PositionScreen.w );\n\t\t\t\t\t\t\t_clippedVertex2PositionScreen.multiplyScalar( 1 / _clippedVertex2PositionScreen.w );\n\n\t\t\t\t\t\t\t_line = getNextLineInPool();\n\n\t\t\t\t\t\t\t_line.id = object.id;\n\t\t\t\t\t\t\t_line.v1.positionScreen.copy( _clippedVertex1PositionScreen );\n\t\t\t\t\t\t\t_line.v2.positionScreen.copy( _clippedVertex2PositionScreen );\n\n\t\t\t\t\t\t\t_line.z = Math.max( _clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z );\n\t\t\t\t\t\t\t_line.renderOrder = object.renderOrder;\n\n\t\t\t\t\t\t\t_line.material = object.material;\n\n\t\t\t\t\t\t\tif ( object.material.vertexColors === THREE.VertexColors ) {\n\n\t\t\t\t\t\t\t\t_line.vertexColors[ 0 ].copy( object.geometry.colors[ v ] );\n\t\t\t\t\t\t\t\t_line.vertexColors[ 1 ].copy( object.geometry.colors[ v - 1 ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_renderData.elements.push( _line );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( object instanceof THREE.Points ) {\n\n\t\t\t\t_modelViewProjectionMatrix.multiplyMatrices( _viewProjectionMatrix, _modelMatrix );\n\n\t\t\t\tif ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\t\tvar vertices = object.geometry.vertices;\n\n\t\t\t\t\tfor ( var v = 0, vl = vertices.length; v < vl; v ++ ) {\n\n\t\t\t\t\t\tvar vertex = vertices[ v ];\n\n\t\t\t\t\t\t_vector4.set( vertex.x, vertex.y, vertex.z, 1 );\n\t\t\t\t\t\t_vector4.applyMatrix4( _modelViewProjectionMatrix );\n\n\t\t\t\t\t\tpushPoint( _vector4, object, camera );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\t\tvar attributes = geometry.attributes;\n\n\t\t\t\t\tif ( attributes.position !== undefined ) {\n\n\t\t\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t_vector4.set( positions[ i ], positions[ i + 1 ], positions[ i + 2 ], 1 );\n\t\t\t\t\t\t\t_vector4.applyMatrix4( _modelViewProjectionMatrix );\n\n\t\t\t\t\t\t\tpushPoint( _vector4, object, camera );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( object instanceof THREE.Sprite ) {\n\n\t\t\t\t_vector4.set( _modelMatrix.elements[ 12 ], _modelMatrix.elements[ 13 ], _modelMatrix.elements[ 14 ], 1 );\n\t\t\t\t_vector4.applyMatrix4( _viewProjectionMatrix );\n\n\t\t\t\tpushPoint( _vector4, object, camera );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( sortElements === true ) {\n\n\t\t\t_renderData.elements.sort( painterSort );\n\n\t\t}\n\n\t\treturn _renderData;\n\n\t};\n\n\tfunction pushPoint( _vector4, object, camera ) {\n\n\t\tvar invW = 1 / _vector4.w;\n\n\t\t_vector4.z *= invW;\n\n\t\tif ( _vector4.z >= - 1 && _vector4.z <= 1 ) {\n\n\t\t\t_sprite = getNextSpriteInPool();\n\t\t\t_sprite.id = object.id;\n\t\t\t_sprite.x = _vector4.x * invW;\n\t\t\t_sprite.y = _vector4.y * invW;\n\t\t\t_sprite.z = _vector4.z;\n\t\t\t_sprite.renderOrder = object.renderOrder;\n\t\t\t_sprite.object = object;\n\n\t\t\t_sprite.rotation = object.rotation;\n\n\t\t\t_sprite.scale.x = object.scale.x * Math.abs( _sprite.x - ( _vector4.x + camera.projectionMatrix.elements[ 0 ] ) / ( _vector4.w + camera.projectionMatrix.elements[ 12 ] ) );\n\t\t\t_sprite.scale.y = object.scale.y * Math.abs( _sprite.y - ( _vector4.y + camera.projectionMatrix.elements[ 5 ] ) / ( _vector4.w + camera.projectionMatrix.elements[ 13 ] ) );\n\n\t\t\t_sprite.material = object.material;\n\n\t\t\t_renderData.elements.push( _sprite );\n\n\t\t}\n\n\t}\n\n\t// Pools\n\n\tfunction getNextObjectInPool() {\n\n\t\tif ( _objectCount === _objectPoolLength ) {\n\n\t\t\tvar object = new THREE.RenderableObject();\n\t\t\t_objectPool.push( object );\n\t\t\t_objectPoolLength ++;\n\t\t\t_objectCount ++;\n\t\t\treturn object;\n\n\t\t}\n\n\t\treturn _objectPool[ _objectCount ++ ];\n\n\t}\n\n\tfunction getNextVertexInPool() {\n\n\t\tif ( _vertexCount === _vertexPoolLength ) {\n\n\t\t\tvar vertex = new THREE.RenderableVertex();\n\t\t\t_vertexPool.push( vertex );\n\t\t\t_vertexPoolLength ++;\n\t\t\t_vertexCount ++;\n\t\t\treturn vertex;\n\n\t\t}\n\n\t\treturn _vertexPool[ _vertexCount ++ ];\n\n\t}\n\n\tfunction getNextFaceInPool() {\n\n\t\tif ( _faceCount === _facePoolLength ) {\n\n\t\t\tvar face = new THREE.RenderableFace();\n\t\t\t_facePool.push( face );\n\t\t\t_facePoolLength ++;\n\t\t\t_faceCount ++;\n\t\t\treturn face;\n\n\t\t}\n\n\t\treturn _facePool[ _faceCount ++ ];\n\n\n\t}\n\n\tfunction getNextLineInPool() {\n\n\t\tif ( _lineCount === _linePoolLength ) {\n\n\t\t\tvar line = new THREE.RenderableLine();\n\t\t\t_linePool.push( line );\n\t\t\t_linePoolLength ++;\n\t\t\t_lineCount ++;\n\t\t\treturn line;\n\n\t\t}\n\n\t\treturn _linePool[ _lineCount ++ ];\n\n\t}\n\n\tfunction getNextSpriteInPool() {\n\n\t\tif ( _spriteCount === _spritePoolLength ) {\n\n\t\t\tvar sprite = new THREE.RenderableSprite();\n\t\t\t_spritePool.push( sprite );\n\t\t\t_spritePoolLength ++;\n\t\t\t_spriteCount ++;\n\t\t\treturn sprite;\n\n\t\t}\n\n\t\treturn _spritePool[ _spriteCount ++ ];\n\n\t}\n\n\t//\n\n\tfunction painterSort( a, b ) {\n\n\t\tif ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t} else if ( a.z !== b.z ) {\n\n\t\t\treturn b.z - a.z;\n\n\t\t} else if ( a.id !== b.id ) {\n\n\t\t\treturn a.id - b.id;\n\n\t\t} else {\n\n\t\t\treturn 0;\n\n\t\t}\n\n\t}\n\n\tfunction clipLine( s1, s2 ) {\n\n\t\tvar alpha1 = 0, alpha2 = 1,\n\n\t\t// Calculate the boundary coordinate of each vertex for the near and far clip planes,\n\t\t// Z = -1 and Z = +1, respectively.\n\n\t\t\tbc1near = s1.z + s1.w,\n\t\t\tbc2near = s2.z + s2.w,\n\t\t\tbc1far = - s1.z + s1.w,\n\t\t\tbc2far = - s2.z + s2.w;\n\n\t\tif ( bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0 ) {\n\n\t\t\t// Both vertices lie entirely within all clip planes.\n\t\t\treturn true;\n\n\t\t} else if ( ( bc1near < 0 && bc2near < 0 ) || ( bc1far < 0 && bc2far < 0 ) ) {\n\n\t\t\t// Both vertices lie entirely outside one of the clip planes.\n\t\t\treturn false;\n\n\t\t} else {\n\n\t\t\t// The line segment spans at least one clip plane.\n\n\t\t\tif ( bc1near < 0 ) {\n\n\t\t\t\t// v1 lies outside the near plane, v2 inside\n\t\t\t\talpha1 = Math.max( alpha1, bc1near / ( bc1near - bc2near ) );\n\n\t\t\t} else if ( bc2near < 0 ) {\n\n\t\t\t\t// v2 lies outside the near plane, v1 inside\n\t\t\t\talpha2 = Math.min( alpha2, bc1near / ( bc1near - bc2near ) );\n\n\t\t\t}\n\n\t\t\tif ( bc1far < 0 ) {\n\n\t\t\t\t// v1 lies outside the far plane, v2 inside\n\t\t\t\talpha1 = Math.max( alpha1, bc1far / ( bc1far - bc2far ) );\n\n\t\t\t} else if ( bc2far < 0 ) {\n\n\t\t\t\t// v2 lies outside the far plane, v2 inside\n\t\t\t\talpha2 = Math.min( alpha2, bc1far / ( bc1far - bc2far ) );\n\n\t\t\t}\n\n\t\t\tif ( alpha2 < alpha1 ) {\n\n\t\t\t\t// The line segment spans two boundaries, but is outside both of them.\n\t\t\t\t// (This can't happen when we're only clipping against just near/far but good\n\t\t\t\t//  to leave the check here for future usage if other clip planes are added.)\n\t\t\t\treturn false;\n\n\t\t\t} else {\n\n\t\t\t\t// Update the s1 and s2 vertices to match the clipped line segment.\n\t\t\t\ts1.lerp( s2, alpha1 );\n\t\t\t\ts2.lerp( s1, 1 - alpha2 );\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n};\n"]}