{"version":3,"sources":["main.js"],"names":["Site","mobileThreshold","init","_this","this","$","window","resize","onResize","document","ready","Player","MobileOverlay","StreamChecker","fixWidows","each","string","html","replace","triggerEvent","eventName","detail","console","log","customEvent","CustomEvent","dispatchEvent","Overlay","mobileToggle","getElementById","mobileMenu","bindToggles","addEventListener","handleToggle","bind","handleMobileToggle","body","classList","contains","remove","add","statusUrl","statusCheckInterval","streamData","startChecker","checkStreamStatus","setInterval","getJSON","data","status","fail","neverPlayed","fadeTime","streamUrl","volumeIncrement","playerContainer","playerElement","playerSrc","playButton","pauseButton","streamStatusText","nowPlayingText","handleOnlineStream","handleCanplay","handleOfflineStream","animateTest","play","pause","setupAudioProcessing","audioContext","AudioContext","webkitAudioContext","audioSource","createMediaElementSource","audioAnalyser","createAnalyser","fftSize","minDecibels","maxDecibels","smoothingTimeConstant","analyserData","Uint8Array","frequencyBinCount","connect","destination","event","src","crossOrigin","load","innerHTML","current_track","title","requestAnimationFrame","level","parseInt","getAnalyserValue","levelString","Array","join","getByteTimeDomainData","networkState","volume","paused","fadeInterval","newVolume","clearInterval"],"mappings":"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","file":"main.min.js","sourcesContent":["/* jshint browser: true, devel: true, indent: 2, curly: true, eqeqeq: true, futurehostile: true, latedef: true, undef: true, unused: true */\n/* global $, jQuery, document, Site, Modernizr */\n\nSite = {\n  mobileThreshold: 601,\n  init: function() {\n    var _this = this;\n\n    $(window).resize(function(){\n      _this.onResize();\n    });\n\n    $(document).ready(function () {\n      Site.Player.init();\n      Site.MobileOverlay.init();\n    });\n\n    Site.StreamChecker.init();\n  },\n\n  onResize: function() {\n    var _this = this;\n\n  },\n\n  fixWidows: function() {\n    // utility class mainly for use on headines to avoid widows [single words on a new line]\n    $('.js-fix-widows').each(function(){\n      var string = $(this).html();\n      string = string.replace(/ ([^ ]*)$/,'&nbsp;$1');\n      $(this).html(string);\n    });\n  },\n\n  triggerEvent: function(eventName, detail) {\n    var _this =  this;\n\n    console.log('event triggered: ', eventName);\n\n    var customEvent = new CustomEvent(eventName, {\n      detail: detail,\n    });\n\n    document.dispatchEvent(customEvent);\n  },\n};\n\nSite.Overlay = {\n  init: function() {\n    var _this = this;\n\n    _this.mobileToggle = document.getElementById('mobile-overlay-toggle');\n    _this.mobileMenu = document.getElementById('mobile-menu');\n\n    _this.bindToggles();\n  },\n\n  bindToggles: function() {\n    var _this = this;\n\n    _this.mobileToggle.addEventListener('click', _this.handleToggle.bind(_this));\n  },\n\n  handleMobileToggle: function() {\n    var _this = this;\n\n    if (document.body.classList.contains('overlay-active')) {\n      document.body.classList.remove('overlay-active');\n    } else {\n      document.body.classList.add('overlay-active');\n    }\n  }\n};\n\nSite.StreamChecker = {\n  statusUrl: 'https://public.radio.co/stations/s0b5e9c02c/status',\n  statusCheckInterval: 5000,\n  streamData: null,\n  init: function() {\n    var _this = this;\n\n    _this.startChecker();\n  },\n\n  startChecker: function() {\n    var _this = this;\n\n\n    _this.checkStreamStatus();\n\n    // Start checker on an interval\n    setInterval(function() {\n      _this.checkStreamStatus();\n    }, _this.statusCheckInterval);\n  },\n\n  // Check the stream status thru ajax and change the player accordingly\n  checkStreamStatus: function() {\n    var _this = this;\n\n    // Make the ajax request\n    $.getJSON(_this.statusUrl, function(data) {\n\n      // Save data in a cache var, just in case\n      _this.streamData = data.status;\n\n      // Check if the stream is offline\n      if (data.status === 'offline') {\n\n        // Trigger the event\n        Site.triggerEvent('streamoffline', data);\n\n      } else if (data.status === 'online')  {  // else  (stream is online)\n\n        // Trigger the event\n        Site.triggerEvent('streamonline', data);\n      }\n    })\n    .fail( function() {\n      // Trigger the event\n      Site.triggerEvent('streamoffline');\n\n      console.log('Radio.co seems to be unresponsive');\n\n    });\n\n  },\n\n};\n\nSite.Player = {\n  neverPlayed: true,\n  fadeTime:  2000,\n  streamUrl: 'http://streaming.radio.co/s0b5e9c02c/listen',\n  init: function() {\n    var _this = this;\n\n    // Calculate the volume increment\n    _this.volumeIncrement = 1 / (_this.fadeTime / 50);\n\n    // Player DOM elements\n    _this.playerContainer =  document.getElementById('player-container');\n    _this.playerElement =  document.getElementById('player');\n    _this.playerSrc =  document.getElementById('player-src');\n    _this.playButton =  document.getElementById('play-button');\n    _this.pauseButton =  document.getElementById('pause-button');\n    _this.streamStatusText =  document.getElementById('stream-status');\n    _this.nowPlayingText =  document.getElementById('now-playing');\n\n    // Bind event handlers\n    _this.handleOnlineStream = _this.handleOnlineStream.bind(_this);\n    _this.handleCanplay = _this.handleCanplay.bind(_this);\n    _this.handleOfflineStream = _this.handleOfflineStream.bind(_this);\n    _this.animateTest = _this.animateTest.bind(_this); // TODO: Remove when globe is done\n\n    // Subscribe to stream events\n    document.addEventListener('streamonline', _this.handleOnlineStream);\n    document.addEventListener('streamoffline', _this.handleOfflineStream);\n\n    // Subscribe to clic on player controls\n    _this.playButton.addEventListener('click', _this.play.bind(_this));\n    _this.pauseButton.addEventListener('click', _this.pause.bind(_this));\n\n  },\n\n  /*\n   * Setup all web audio stuff.\n   */\n  setupAudioProcessing: function() {\n    var _this = this;\n\n    // Set Audio Context\n    _this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n\n    // Create audio source from <audio>\n    _this.audioSource = _this.audioContext.createMediaElementSource(_this.playerElement);\n\n    // Create analyser node\n    _this.audioAnalyser = _this.audioContext.createAnalyser();\n\n    // Set analyser settings\n    _this.audioAnalyser.fftSize = 32;\n    _this.audioAnalyser.minDecibels = -90;\n    _this.audioAnalyser.maxDecibels = -10;\n    _this.audioAnalyser.smoothingTimeConstant = 1;\n\n    // Init the anaylser data array\n    _this.analyserData = new Uint8Array(_this.audioAnalyser.frequencyBinCount);\n\n    // Conect Source to Analyser\n    _this.audioSource.connect(_this.audioAnalyser);\n\n    // Conect Analyser to destination. connectin to destination triggers the audio\n    _this.audioAnalyser.connect(_this.audioContext.destination);\n\n  },\n\n  handleOnlineStream: function(event) {\n    var _this = this;\n\n    var data = event.detail;\n\n    // Add class `online` to the player container\n    _this.playerContainer.classList.add('online');\n\n    // Check if player src is empty\n    if (_this.playerSrc.src === '') {\n\n      // Add src\n      _this.playerSrc.src = _this.streamUrl;\n\n      // Disable player CORS restriction\n      _this.playerElement.crossOrigin = 'anonymous';\n\n      // Load src\n      _this.playerElement.load();\n\n    }\n\n    // Update marquee status\n    _this.streamStatusText.innerHTML = 'Ahora: ';\n\n    // Update Now playing\n    _this.nowPlayingText.innerHTML = data.current_track.title;\n\n    // We subscribe to the `canplay` event from the player\n    _this.playerElement.addEventListener('canplay', _this.handleCanplay);\n  },\n\n  handleCanplay: function(event) {\n    var _this = this;\n\n    // If the player has never started playing\n    if (_this.neverPlayed) {\n\n      // Play the player\n      _this.play();\n\n      // Setup Audio processing\n      _this.setupAudioProcessing();\n\n      // Trigger test animation, which actually is not really an animation but its just for testing\n      window.requestAnimationFrame(_this.animateTest); // TODO remove when globe is done\n    }\n\n  },\n\n  // TODO remove when globe is done\n  animateTest: function() {\n    var _this = this;\n\n    window.requestAnimationFrame(_this.animateTest);\n\n\n    // When the globe is done, from whatever code is animating it we will call `Site.Player.analyserData[2]` to\n    var level = parseInt(_this.getAnalyserValue() / 2);\n    var levelString = new Array(level + 1).join('#');\n\n    console.log(levelString);\n\n  },\n\n  // Returns analyser data\n  // TODO: Globe should call this function on every `render()`\n  // Site.Plater.getAnalyserValue();\n  getAnalyserValue: function() {\n    var _this = this;\n\n    // Pass anlyser data to _this.analyserData\n    _this.audioAnalyser.getByteTimeDomainData(_this.analyserData);\n\n    // from max 256\n    var returnAnalysisValue = 256 - _this.analyserData[0];\n\n    return returnAnalysisValue;\n\n  },\n\n  handleOfflineStream: function() {\n    var _this = this;\n\n    // Remove `online` class from the player container\n    _this.playerContainer.classList.remove('online');\n\n    // Update marquee status\n    _this.streamStatusText.innerHTML = 'Siguiente: ';\n\n    // Update the marquee text\n    _this.nowPlayingText.innerHTML = 'the upcoming show that has to be requested thru ajax';\n\n    // Pause the player\n    _this.pause();\n  },\n\n  play: function() {\n    var _this = this;\n\n    if (_this.playerElement.networkState !== 3) {\n\n      // Reset volume\n      _this.playerElement.volume = 0;\n\n      if( _this.playerElement.paused) {\n\n        // Play audio element\n        _this.playerElement.play();\n\n      }\n\n      // Add `playing` class to player container\n      _this.playerContainer.classList.add('playing');\n\n      _this.neverPlayed = false;\n\n      // Fade in the volume\n      var fadeInterval = setInterval( function() {\n        var newVolume = _this.playerElement.volume + _this.volumeIncrement;\n\n        if (newVolume > 1) {\n          newVolume = 1;\n        }\n\n        _this.playerElement.volume = newVolume;\n\n        if (_this.playerElement.volume >= 1) {\n          // Clear the interval\n          clearInterval(fadeInterval);\n\n        }\n      }, 50);\n    }\n  },\n\n  pause: function() {\n    var _this = this;\n\n    // Mute the player instead of pause to keep the stream in sync\n    // because pause doesn't exist in live radio\n    _this.playerElement.volume = 0;\n\n    // Remove `playing` class from the player container\n    _this.playerContainer.classList.remove('playing');\n  },\n};\n\nSite.init();\n"]}