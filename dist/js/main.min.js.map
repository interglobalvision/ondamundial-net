{"version":3,"sources":["main.js"],"names":["Site","mobileThreshold","init","_this","this","$","window","resize","onResize","document","ready","StreamChecker","Player","fixWidows","each","string","html","replace","statusUrl","statusCheckInterval","streamData","startChecker","checkStreamStatus","setInterval","getJSON","data","status","triggerEvent","eventName","detail","console","log","customEvent","CustomEvent","dispatchEvent","neverPlayed","fadeTime","streamUrl","playerContainer","getElementById","playerElement","playerSrc","playerControl","streamStatusText","nowPlayingText","handleOnlineStream","bind","handleCanPlay","handleOfflineStream","addEventListener","event","classList","add","src","paused","load","innerHTML","current_track","title","play","target","removeEventListener","type","remove","pause","networkState","volume","volumeIncrement","fadeInterval","clearInterval"],"mappings":"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","file":"main.min.js","sourcesContent":["/* jshint browser: true, devel: true, indent: 2, curly: true, eqeqeq: true, futurehostile: true, latedef: true, undef: true, unused: true */\n/* global $, jQuery, document, Site, Modernizr */\n\nSite = {\n  mobileThreshold: 601,\n  init: function() {\n    var _this = this;\n\n    $(window).resize(function(){\n      _this.onResize();\n    });\n\n    $(document).ready(function () {\n      Site.StreamChecker.init();\n      Site.Player.init();\n    });\n\n  },\n\n  onResize: function() {\n    var _this = this;\n\n  },\n\n  fixWidows: function() {\n    // utility class mainly for use on headines to avoid widows [single words on a new line]\n    $('.js-fix-widows').each(function(){\n      var string = $(this).html();\n      string = string.replace(/ ([^ ]*)$/,'&nbsp;$1');\n      $(this).html(string);\n    });\n  },\n};\n\nSite.StreamChecker = {\n  statusUrl: 'https://public.radio.co/stations/s0b5e9c02c/status',\n  statusCheckInterval: 5000,\n  streamData: null,\n  init: function() {\n    var _this = this;\n\n    _this.startChecker();\n  },\n\n  startChecker: function() {\n    var _this = this;\n\n\n    _this.checkStreamStatus();\n\n    // Start checker on an interval\n    setInterval(function() {\n      _this.checkStreamStatus();\n    }, _this.statusCheckInterval);\n  },\n\n  // Check the stream status thru ajax and change the player accordingly\n  checkStreamStatus: function() {\n    var _this = this;\n\n    // Make the ajax request\n    $.getJSON(_this.statusUrl, function(data) {\n\n      // Save data in a cache var, just in case\n      _this.streamData = data.status;\n\n      // Check if the stream is offline\n      if(data.status == 'offline') {\n\n        _this.triggerEvent('streamoffline', data);\n\n      } else if(data.status === 'online')  {  // else  (stream is online)\n\n        _this.triggerEvent('streamonline', data);\n      }\n    });\n\n  },\n\n  triggerEvent: function(eventName, detail) {\n    var _this =  this;\n\n    console.log('event triggered: ', eventName);\n\n    var customEvent = new CustomEvent(eventName, {\n      detail: detail,\n    });\n\n    document.dispatchEvent(customEvent);\n  },\n\n};\n\nSite.Player = {\n  neverPlayed: true,\n  fadeTime:  2000,\n  streamUrl: 'http://streaming.radio.co/s0b5e9c02c/listen',\n  init: function() {\n    var _this = this;\n\n    // Player DOM elements\n    _this.playerContainer =  document.getElementById('player-container');\n    _this.playerElement =  document.getElementById('player');\n    _this.playerSrc =  document.getElementById('player-src');\n    _this.playerControl =  document.getElementById('player-control');\n    _this.streamStatusText =  document.getElementById('stream-status');\n    _this.nowPlayingText =  document.getElementById('now-playing');\n\n    // Bind event handlers\n    _this.handleOnlineStream = _this.handleOnlineStream.bind(_this);\n    _this.handleCanPlay = _this.handleCanPlay.bind(_this);\n    _this.handleOfflineStream = _this.handleOfflineStream.bind(_this);\n\n    // Subscribe to stream events\n    document.addEventListener('streamonline', _this.handleOnlineStream);\n    document.addEventListener('streamoffline', _this.handleOfflineStream);\n\n  },\n\n  handleOnlineStream: function(event) {\n    var _this = this;\n\n    var data = event.detail;\n\n    _this.playerContainer.classList.add('online');\n\n    // Check if player src is empty\n    if (_this.playerSrc.src === '' || _this.playerElement.paused) {\n      // Add src\n      _this.playerSrc.src =  _this.streamUrl;\n\n      // Load src\n      _this.playerElement.load();\n    }\n\n    // Update marquee status\n    _this.streamStatusText.innerHTML = 'Ahora: ';\n\n    // Update Now playing\n    _this.nowPlayingText.innerHTML = data.current_track.title;\n\n    if (_this.neverPlayed) {\n      _this.playerElement.addEventListener('canplay', _this.handleCanPlay);\n    }\n  },\n\n  handleCanPlay: function(event) {\n    var _this = this;\n\n    _this.play();\n    event.target.removeEventListener(event.type, _this.handleCanPlay);\n\n  },\n\n  handleOfflineStream: function() {\n    var _this = this;\n\n    _this.playerContainer.classList.remove('online');\n\n    // Update marquee status\n    _this.streamStatusText.innerHTML = 'Siguiente: ';\n\n    // Update the marquee text\n    _this.nowPlayingText.innerHTML = 'the upcoming show that has to be requested thru ajax';\n\n    // Pause the stream\n    _this.pause();\n  },\n\n  play: function() {\n    var _this = this;\n\n    if( _this.playerElement.networkState !== 3) {\n      _this.playerElement.volume = 0;\n\n      _this.playerElement.play();\n\n      _this.neverPlayed = false;\n\n      var volumeIncrement = 1 / (_this.fadeTime / 50);\n      var fadeInterval = setInterval( function() {\n        _this.playerElement.volume += volumeIncrement;\n\n        if (_this.playerElement.volume >= 1 - volumeIncrement) {\n          _this.playerElement.volume = 1;\n          clearInterval(fadeInterval);\n        }\n      }, 50);\n    }\n  },\n\n  pause: function() {\n    var _this = this;\n\n    _this.playerElement.pause();\n  },\n};\n\nSite.init();\n"]}