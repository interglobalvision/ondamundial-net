{"version":3,"sources":["main.js"],"names":["Site","mobileThreshold","init","_this","this","$","window","resize","onResize","document","ready","Player","fixWidows","each","string","html","replace","neverStarted","fadeTime","statusCheckInterval","statusUrl","streamUrl","streamData","playerElement","getElementById","playerSrc","playerControl","streamStatusText","nowPlayingText","checkStreamStatus","setInterval","forcePlay","getJSON","data","status","innerHTML","pause","src","load","current_track","title","paused","canplayListener","addEventListener","play","removeEventListener","networkState","volume","volumeIncrement","fadeInterval","clearInterval"],"mappings":"AAGAA,MACEC,gBAAiB,IACjBC,KAAM,WACJ,GAAIC,OAAQC,IAEZC,GAAEC,QAAQC,OAAO,WACfJ,MAAMK,aAGRH,EAAEI,UAAUC,MAAM,WAChBV,KAAKW,OAAOT,UAKhBM,SAAU,aAKVI,UAAW,WAETP,EAAE,kBAAkBQ,KAAK,WACvB,GAAIC,QAAST,EAAED,MAAMW,MACrBD,QAASA,OAAOE,QAAQ,YAAY,YACpCX,EAAED,MAAMW,KAAKD,YAKnBd,KAAKW,QACHM,cAAc,EACdC,SAAW,IACXC,oBAAqB,IACrBC,UAAW,qDACXC,UAAW,8CACXC,WAAY,KACZpB,KAAM,WACJ,GAAIC,OAAQC,IAEZD,OAAMoB,cAAiBd,SAASe,eAAe,gBAC/CrB,MAAMsB,UAAahB,SAASe,eAAe,cAC3CrB,MAAMuB,cAAiBjB,SAASe,eAAe,kBAC/CrB,MAAMwB,iBAAoBlB,SAASe,eAAe,iBAClDrB,MAAMyB,eAAkBnB,SAASe,eAAe,eAGhDrB,MAAM0B,mBAAkB,GAGxBC,YAAY,WACV3B,MAAM0B,qBACL1B,MAAMgB,sBAMXU,kBAAmB,SAASE,WAC1B,GAAI5B,OAAQC,IAGZC,GAAE2B,QAAQ7B,MAAMiB,UAAW,SAASa,MAMlC,GAHA9B,MAAMmB,WAAaW,KAAKC,OAGN,WAAfD,KAAKC,OAEN/B,MAAMwB,iBAAiBQ,UAAY,cAGnChC,MAAMyB,eAAeO,UAAY,uDAGjChC,MAAMiC,YAmBN,IAd4B,KAAxBjC,MAAMsB,UAAUY,MAElBlC,MAAMsB,UAAUY,IAAOlC,MAAMkB,UAG7BlB,MAAMoB,cAAce,QAItBnC,MAAMwB,iBAAiBQ,UAAY,UAGnChC,MAAMyB,eAAeO,UAAYF,KAAKM,cAAcC,MAEhDrC,MAAMoB,cAAckB,UAAyB,IAAdV,WAAsB5B,MAAMc,cAC7D,GAAIyB,iBAAkBvC,MAAMoB,cAAcoB,iBAAiB,UAAW,WAEpExC,MAAMyC,OACNzC,MAAMoB,cAAcsB,oBAAoB,UAAWH,sBAS7DE,KAAM,WACJ,GAAIzC,OAAQC,IAEZ,IAAyC,IAArCD,MAAMoB,cAAcuB,aAAoB,CAC1C3C,MAAMoB,cAAcwB,OAAS,EAE7B5C,MAAMoB,cAAcqB,OAEpBzC,MAAMc,cAAe,CAErB,IAAI+B,iBAAkB,GAAK7C,MAAMe,SAAW,IACxC+B,aAAenB,YAAa,WAC9B3B,MAAMoB,cAAcwB,QAAUC,gBAE1B7C,MAAMoB,cAAcwB,QAAU,EAAIC,kBACpC7C,MAAMoB,cAAcwB,OAAS,EAC7BG,cAAcD,gBAEf,MAIPb,MAAO,WACOhC,KAENmB,cAAca,UAIxBpC,KAAKE","file":"main.min.js","sourcesContent":["/* jshint browser: true, devel: true, indent: 2, curly: true, eqeqeq: true, futurehostile: true, latedef: true, undef: true, unused: true */\n/* global $, jQuery, document, Site, Modernizr */\n\nSite = {\n  mobileThreshold: 601,\n  init: function() {\n    var _this = this;\n\n    $(window).resize(function(){\n      _this.onResize();\n    });\n\n    $(document).ready(function () {\n      Site.Player.init();\n    });\n\n  },\n\n  onResize: function() {\n    var _this = this;\n\n  },\n\n  fixWidows: function() {\n    // utility class mainly for use on headines to avoid widows [single words on a new line]\n    $('.js-fix-widows').each(function(){\n      var string = $(this).html();\n      string = string.replace(/ ([^ ]*)$/,'&nbsp;$1');\n      $(this).html(string);\n    });\n  },\n};\n\nSite.Player = {\n  neverStarted: true,\n  fadeTime:  2000,\n  statusCheckInterval: 5000,\n  statusUrl: 'https://public.radio.co/stations/s0b5e9c02c/status',\n  streamUrl: 'http://streaming.radio.co/s0b5e9c02c/listen',\n  streamData: null,\n  init: function() {\n    var _this = this;\n\n    _this.playerElement =  document.getElementById('radio-player');\n    _this.playerSrc =  document.getElementById('player-src');\n    _this.playerControl =  document.getElementById('player-control');\n    _this.streamStatusText =  document.getElementById('stream-status');\n    _this.nowPlayingText =  document.getElementById('now-playing');\n\n    // Check if the stream is online\n    _this.checkStreamStatus(true);\n\n    // Start checker on an interval\n    setInterval(function() {\n      _this.checkStreamStatus();\n    }, _this.statusCheckInterval);\n\n\n  },\n\n  // Check the stream status thru ajax and change the player accordingly\n  checkStreamStatus: function(forcePlay) {\n    var _this = this;\n\n    // Make the ajax request\n    $.getJSON(_this.statusUrl, function(data) {\n\n      // Save data in a cache var, just in case\n      _this.streamData = data.status;\n\n      // Check if the stream is offline\n      if(data.status == 'offline') {\n        // Update marquee status\n        _this.streamStatusText.innerHTML = 'Siguiente: ';\n\n        // Update the marquee text\n        _this.nowPlayingText.innerHTML = 'the upcoming show that has to be requested thru ajax';\n\n        // Pause the stream\n        _this.pause();\n\n      } else {  // else  (stream is online)\n\n        // Check if player src is empty\n        if (_this.playerSrc.src === '') {\n          // Add src\n          _this.playerSrc.src =  _this.streamUrl;\n\n          // Load src\n          _this.playerElement.load();\n        }\n\n        // Update marquee status\n        _this.streamStatusText.innerHTML = 'Ahora: ';\n\n        // Update Now playing\n        _this.nowPlayingText.innerHTML = data.current_track.title;\n\n        if (_this.playerElement.paused && (forcePlay === true || _this.neverStarted) ) {\n          var canplayListener = _this.playerElement.addEventListener('canplay', function() {\n            // If the player is paused and [forcePlay is true  or the player has never started playing]\n            _this.play();\n            _this.playerElement.removeEventListener('canplay', canplayListener);\n          });\n        }\n\n      }\n    });\n\n  },\n\n  play: function() {\n    var _this = this;\n\n    if( _this.playerElement.networkState !== 3) {\n      _this.playerElement.volume = 0;\n\n      _this.playerElement.play();\n\n      _this.neverStarted = false;\n\n      var volumeIncrement = 1 / (_this.fadeTime / 50);\n      var fadeInterval = setInterval( function() {\n        _this.playerElement.volume += volumeIncrement;\n\n        if (_this.playerElement.volume >= 1 - volumeIncrement) {\n          _this.playerElement.volume = 1\n          clearInterval(fadeInterval);\n        }\n      }, 50);\n    }\n  },\n\n  pause: function() {\n    var _this = this;\n\n    _this.playerElement.pause();\n  },\n};\n\nSite.init();\n"]}